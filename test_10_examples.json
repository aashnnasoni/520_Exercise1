{
  "id": [
    10,
    11,
    12,
    13,
    14,
    15,
    16,
    17,
    18,
    19
  ],
  "question": [
    "On the planet Mars a year lasts exactly n days (there are no leap years on Mars). But Martians have the same weeks as earthlings\u00a0\u2014 5 work days and then 2 days off. Your task is to determine the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Input-----\n\nThe first line of the input contains a positive integer n (1 \u2264 n \u2264 1 000 000)\u00a0\u2014 the number of days in a year on Mars.\n\n\n-----Output-----\n\nPrint two integers\u00a0\u2014 the minimum possible and the maximum possible number of days off per year on Mars.\n\n\n-----Examples-----\nInput\n14\n\nOutput\n4 4\n\nInput\n2\n\nOutput\n0 2\n\n\n\n-----Note-----\n\nIn the first sample there are 14 days in a year on Mars, and therefore independently of the day a year starts with there will be exactly 4 days off .\n\nIn the second sample there are only 2 days in a year on Mars, and they can both be either work days or days off.",
    "Little Joty has got a task to do. She has a line of n tiles indexed from 1 to n. She has to paint them in a strange pattern.\n\nAn unpainted tile should be painted Red if it's index is divisible by a and an unpainted tile should be painted Blue if it's index is divisible by b. So the tile with the number divisible by a and b can be either painted Red or Blue.\n\nAfter her painting is done, she will get p chocolates for each tile that is painted Red and q chocolates for each tile that is painted Blue.\n\nNote that she can paint tiles in any order she wants.\n\nGiven the required information, find the maximum\u00a0number of chocolates Joty can get.\n\n\n-----Input-----\n\nThe only line contains five integers n, a, b, p and q (1 \u2264 n, a, b, p, q \u2264 10^9).\n\n\n-----Output-----\n\nPrint the only integer s \u2014 the maximum number of chocolates Joty can get.\n\nNote that the answer can be too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\n\n-----Examples-----\nInput\n5 2 3 12 15\n\nOutput\n39\n\nInput\n20 2 3 3 5\n\nOutput\n51",
    "Vova has won $n$ trophies in different competitions. Each trophy is either golden or silver. The trophies are arranged in a row.\n\nThe beauty of the arrangement is the length of the longest subsegment consisting of golden trophies. Vova wants to swap two trophies (not necessarily adjacent ones) to make the arrangement as beautiful as possible \u2014 that means, to maximize the length of the longest such subsegment.\n\nHelp Vova! Tell him the maximum possible beauty of the arrangement if he is allowed to do at most one swap.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ ($2 \\le n \\le 10^5$) \u2014 the number of trophies.\n\nThe second line contains $n$ characters, each of them is either G or S. If the $i$-th character is G, then the $i$-th trophy is a golden one, otherwise it's a silver trophy. \n\n\n-----Output-----\n\nPrint the maximum possible length of a subsegment of golden trophies, if Vova is allowed to do at most one swap.\n\n\n-----Examples-----\nInput\n10\nGGGSGGGSGG\n\nOutput\n7\n\nInput\n4\nGGGG\n\nOutput\n4\n\nInput\n3\nSSS\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example Vova has to swap trophies with indices $4$ and $10$. Thus he will obtain the sequence \"GGGGGGGSGS\", the length of the longest subsegment of golden trophies is $7$. \n\nIn the second example Vova can make no swaps at all. The length of the longest subsegment of golden trophies in the sequence is $4$. \n\nIn the third example Vova cannot do anything to make the length of the longest subsegment of golden trophies in the sequence greater than $0$.",
    "Now you can take online courses in the Berland State University! Polycarp needs to pass k main online courses of his specialty to get a diploma. In total n courses are availiable for the passage.\n\nThe situation is complicated by the dependence of online courses, for each course there is a list of those that must be passed before starting this online course (the list can be empty, it means that there is no limitation).\n\nHelp Polycarp to pass the least number of courses in total to get the specialty (it means to pass all main and necessary courses). Write a program which prints the order of courses. \n\nPolycarp passes courses consistently, he starts the next course when he finishes the previous one. Each course can't be passed more than once. \n\n\n-----Input-----\n\nThe first line contains n and k (1 \u2264 k \u2264 n \u2264 10^5) \u2014 the number of online-courses and the number of main courses of Polycarp's specialty. \n\nThe second line contains k distinct integers from 1 to n \u2014 numbers of main online-courses of Polycarp's specialty. \n\nThen n lines follow, each of them describes the next course: the i-th of them corresponds to the course i. Each line starts from the integer t_{i} (0 \u2264 t_{i} \u2264 n - 1) \u2014 the number of courses on which the i-th depends. Then there follows the sequence of t_{i} distinct integers from 1 to n \u2014 numbers of courses in random order, on which the i-th depends. It is guaranteed that no course can depend on itself. \n\nIt is guaranteed that the sum of all values t_{i} doesn't exceed 10^5. \n\n\n-----Output-----\n\nPrint -1, if there is no the way to get a specialty. \n\nOtherwise, in the first line print the integer m \u2014 the minimum number of online-courses which it is necessary to pass to get a specialty. In the second line print m distinct integers \u2014 numbers of courses which it is necessary to pass in the chronological order of their passage. If there are several answers it is allowed to print any of them.\n\n\n-----Examples-----\nInput\n6 2\n5 3\n0\n0\n0\n2 2 1\n1 4\n1 5\n\nOutput\n5\n1 2 3 4 5 \n\nInput\n9 3\n3 9 5\n0\n0\n3 9 4 5\n0\n0\n1 8\n1 6\n1 2\n2 1 2\n\nOutput\n6\n1 2 9 4 5 3 \n\nInput\n3 3\n1 2 3\n1 2\n1 3\n1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first test firstly you can take courses number 1 and 2, after that you can take the course number 4, then you can take the course number 5, which is the main. After that you have to take only the course number 3, which is the last not passed main course.",
    "Let's suppose you have an array a, a stack s (initially empty) and an array b (also initially empty).\n\nYou may perform the following operations until both a and s are empty:\n\n  Take the first element of a, push it into s and remove it from a (if a is not empty);  Take the top element from s, append it to the end of array b and remove it from s (if s is not empty). \n\nYou can perform these operations in arbitrary order.\n\nIf there exists a way to perform the operations such that array b is sorted in non-descending order in the end, then array a is called stack-sortable.\n\nFor example, [3, 1, 2] is stack-sortable, because b will be sorted if we perform the following operations:\n\n  Remove 3 from a and push it into s;  Remove 1 from a and push it into s;  Remove 1 from s and append it to the end of b;  Remove 2 from a and push it into s;  Remove 2 from s and append it to the end of b;  Remove 3 from s and append it to the end of b. \n\nAfter all these operations b = [1, 2, 3], so [3, 1, 2] is stack-sortable. [2, 3, 1] is not stack-sortable.\n\nYou are given k first elements of some permutation p of size n (recall that a permutation of size n is an array of size n where each integer from 1 to n occurs exactly once). You have to restore the remaining n - k elements of this permutation so it is stack-sortable. If there are multiple answers, choose the answer such that p is lexicographically maximal (an array q is lexicographically greater than an array p iff there exists some integer k such that for every i < k q_{i} = p_{i}, and q_{k} > p_{k}). You may not swap or change any of first k elements of the permutation.\n\nPrint the lexicographically maximal permutation p you can obtain.\n\nIf there exists no answer then output -1.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (2 \u2264 n \u2264 200000, 1 \u2264 k < n) \u2014 the size of a desired permutation, and the number of elements you are given, respectively.\n\nThe second line contains k integers p_1, p_2, ..., p_{k} (1 \u2264 p_{i} \u2264 n) \u2014 the first k elements of p. These integers are pairwise distinct.\n\n\n-----Output-----\n\nIf it is possible to restore a stack-sortable permutation p of size n such that the first k elements of p are equal to elements given in the input, print lexicographically maximal such permutation.\n\nOtherwise print -1.\n\n\n-----Examples-----\nInput\n5 3\n3 2 1\n\nOutput\n3 2 1 5 4 \nInput\n5 3\n2 3 1\n\nOutput\n-1\n\nInput\n5 1\n3\n\nOutput\n3 2 1 5 4 \nInput\n5 2\n3 4\n\nOutput\n-1",
    "Vasya likes everything infinite. Now he is studying the properties of a sequence s, such that its first element is equal to a (s_1 = a), and the difference between any two neighbouring elements is equal to c (s_{i} - s_{i} - 1 = c). In particular, Vasya wonders if his favourite integer b appears in this sequence, that is, there exists a positive integer i, such that s_{i} = b. Of course, you are the person he asks for a help.\n\n\n-----Input-----\n\nThe first line of the input contain three integers a, b and c ( - 10^9 \u2264 a, b, c \u2264 10^9)\u00a0\u2014 the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.\n\n\n-----Output-----\n\nIf b appears in the sequence s print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\n\n-----Examples-----\nInput\n1 7 3\n\nOutput\nYES\n\nInput\n10 10 0\n\nOutput\nYES\n\nInput\n1 -4 5\n\nOutput\nNO\n\nInput\n0 60 50\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first sample, the sequence starts from integers 1, 4, 7, so 7 is its element.\n\nIn the second sample, the favorite integer of Vasya is equal to the first element of the sequence.\n\nIn the third sample all elements of the sequence are greater than Vasya's favorite integer.\n\nIn the fourth sample, the sequence starts from 0, 50, 100, and all the following elements are greater than Vasya's favorite integer.",
    "A string is called bracket sequence if it does not contain any characters other than \"(\" and \")\". A bracket sequence is called regular if it it is possible to obtain correct arithmetic expression by inserting characters \"+\" and \"1\" into this sequence. For example, \"\", \"(())\" and \"()()\" are regular bracket sequences; \"))\" and \")((\" are bracket sequences (but not regular ones), and \"(a)\" and \"(1)+(1)\" are not bracket sequences at all.\n\nYou have a number of strings; each string is a bracket sequence of length $2$. So, overall you have $cnt_1$ strings \"((\", $cnt_2$ strings \"()\", $cnt_3$ strings \")(\" and $cnt_4$ strings \"))\". You want to write all these strings in some order, one after another; after that, you will get a long bracket sequence of length $2(cnt_1 + cnt_2 + cnt_3 + cnt_4)$. You wonder: is it possible to choose some order of the strings you have such that you will get a regular bracket sequence? Note that you may not remove any characters or strings, and you may not add anything either.\n\n\n-----Input-----\n\nThe input consists of four lines, $i$-th of them contains one integer $cnt_i$ ($0 \\le cnt_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer: $1$ if it is possible to form a regular bracket sequence by choosing the correct order of the given strings, $0$ otherwise.\n\n\n-----Examples-----\nInput\n3\n1\n4\n3\n\nOutput\n1\n\nInput\n0\n0\n0\n0\n\nOutput\n1\n\nInput\n1\n2\n3\n4\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example it is possible to construct a string \"(())()(()((()()()())))\", which is a regular bracket sequence.\n\nIn the second example it is possible to construct a string \"\", which is a regular bracket sequence.",
    "Arpa is researching the Mexican wave.\n\nThere are n spectators in the stadium, labeled from 1 to n. They start the Mexican wave at time 0. \n\n  At time 1, the first spectator stands.  At time 2, the second spectator stands.  ...  At time k, the k-th spectator stands.  At time k + 1, the (k + 1)-th spectator stands and the first spectator sits.  At time k + 2, the (k + 2)-th spectator stands and the second spectator sits.  ...  At time n, the n-th spectator stands and the (n - k)-th spectator sits.  At time n + 1, the (n + 1 - k)-th spectator sits.  ...  At time n + k, the n-th spectator sits. \n\nArpa wants to know how many spectators are standing at time t.\n\n\n-----Input-----\n\nThe first line contains three integers n, k, t (1 \u2264 n \u2264 10^9, 1 \u2264 k \u2264 n, 1 \u2264 t < n + k).\n\n\n-----Output-----\n\nPrint single integer: how many spectators are standing at time t.\n\n\n-----Examples-----\nInput\n10 5 3\n\nOutput\n3\n\nInput\n10 5 7\n\nOutput\n5\n\nInput\n10 5 12\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the following a sitting spectator is represented as -, a standing spectator is represented as ^.\n\n  At t = 0\u2002 ---------- $\\Rightarrow$ number of standing spectators = 0.  At t = 1\u2002 ^--------- $\\Rightarrow$ number of standing spectators = 1.  At t = 2\u2002 ^^-------- $\\Rightarrow$ number of standing spectators = 2.  At t = 3\u2002 ^^^------- $\\Rightarrow$ number of standing spectators = 3.  At t = 4\u2002 ^^^^------ $\\Rightarrow$ number of standing spectators = 4.  At t = 5\u2002 ^^^^^----- $\\Rightarrow$ number of standing spectators = 5.  At t = 6\u2002 -^^^^^---- $\\Rightarrow$ number of standing spectators = 5.  At t = 7\u2002 --^^^^^--- $\\Rightarrow$ number of standing spectators = 5.  At t = 8\u2002 ---^^^^^-- $\\Rightarrow$ number of standing spectators = 5.  At t = 9\u2002 ----^^^^^- $\\Rightarrow$ number of standing spectators = 5.  At t = 10 -----^^^^^ $\\Rightarrow$ number of standing spectators = 5.  At t = 11 ------^^^^ $\\Rightarrow$ number of standing spectators = 4.  At t = 12 -------^^^ $\\Rightarrow$ number of standing spectators = 3.  At t = 13 --------^^ $\\Rightarrow$ number of standing spectators = 2.  At t = 14 ---------^ $\\Rightarrow$ number of standing spectators = 1.  At t = 15 ---------- $\\Rightarrow$ number of standing spectators = 0.",
    "Petya recieved a gift of a string s with length up to 10^5 characters for his birthday. He took two more empty strings t and u and decided to play a game. This game has two possible moves:  Extract the first character of s and append t with this character.  Extract the last character of t and append u with this character. \n\nPetya wants to get strings s and t empty and string u lexicographically minimal.\n\nYou should write a program that will help Petya win the game.\n\n\n-----Input-----\n\nFirst line contains non-empty string s (1 \u2264 |s| \u2264 10^5), consisting of lowercase English letters.\n\n\n-----Output-----\n\nPrint resulting string u.\n\n\n-----Examples-----\nInput\ncab\n\nOutput\nabc\n\nInput\nacdb\n\nOutput\nabdc",
    "Polycarp has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.\n\nAll levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by $1$. If he manages to finish the level successfully then the number of clears increases by $1$ as well. Note that both of the statistics update at the same time (so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).\n\nPolycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.\n\nSo he peeked at the stats $n$ times and wrote down $n$ pairs of integers \u2014 $(p_1, c_1), (p_2, c_2), \\dots, (p_n, c_n)$, where $p_i$ is the number of plays at the $i$-th moment of time and $c_i$ is the number of clears at the same moment of time. The stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).\n\nBetween two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.\n\nFinally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.\n\nHelp him to check the correctness of his records.\n\nFor your convenience you have to answer multiple independent test cases.\n\n\n-----Input-----\n\nThe first line contains a single integer $T$ $(1 \\le T \\le 500)$ \u2014 the number of test cases.\n\nThe first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of moments of time Polycarp peeked at the stats.\n\nEach of the next $n$ lines contains two integers $p_i$ and $c_i$ ($0 \\le p_i, c_i \\le 1000$) \u2014 the number of plays and the number of clears of the level at the $i$-th moment of time.\n\nNote that the stats are given in chronological order.\n\n\n-----Output-----\n\nFor each test case print a single line.\n\nIf there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print \"YES\".\n\nOtherwise, print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Example-----\nInput\n6\n3\n0 0\n1 1\n1 2\n2\n1 0\n1000 3\n4\n10 1\n15 2\n10 2\n15 2\n1\n765 432\n2\n4 4\n4 3\n5\n0 0\n1 0\n1 0\n1 0\n1 0\n\nOutput\nNO\nYES\nNO\nYES\nNO\nYES\n\n\n\n-----Note-----\n\nIn the first test case at the third moment of time the number of clears increased but the number of plays did not, that couldn't have happened.\n\nThe second test case is a nice example of a Super Expert level.\n\nIn the third test case the number of plays decreased, which is impossible.\n\nThe fourth test case is probably an auto level with a single jump over the spike.\n\nIn the fifth test case the number of clears decreased, which is also impossible.\n\nNobody wanted to play the sixth test case; Polycarp's mom attempted it to make him feel better, however, she couldn't clear it."
  ],
  "solutions": [
    "[\"n=int(input())\\nr=n%7\\nd=n//7\\nprint(2*d+max(0,r-5),2*d+min(r,2))\\n\", \"minday = maxday = 0\\n\\nfor i in range(int(input())) :\\n    k = i % 7\\n    if k == 0 or k == 1 : maxday += 1\\n    if k == 5 or k == 6 : minday += 1\\n\\nprint(minday, maxday)\", \"__author__ = 'Andrey'\\nn = int(input())\\nk = n // 7\\nc = n % 7\\nprint(2 * k + max(0, c - 5), 2 * k + min(c, 2))\", \"n = int(input())\\nk = 0\\nif n % 7 == 6:\\n    k = 1\\nprint(2*(n // 7) + k, 2*(n // 7) + min(n % 7, 2))\\n\", \"a = int(input())\\nb=int(a/7)\\nc=a%7\\nif c==0:\\n    print(b*2,b*2)\\nelif c==1:\\n    print(b*2,b*2+1)\\nelif c==6:\\n    print(b*2+1,b*2+2)\\nelse:\\n    print(b*2,b*2+2)\", \"def __starting_point():\\n    #n, m = list(map(int, input().split()))\\n    n = int(input())\\n    print(n // 7 * 2 + (1 if n % 7 > 5 else 0), n // 7 * 2 + (2 if n % 7 >= 2 else n % 7))\\n    \\n\\n__starting_point()\", \"n=int(input())\\nif n%7==0:\\n    print((n//7)*2,(n//7)*2)\\nelif n%7==1:\\n    print((n//7)*2,(n//7)*2+1)\\nelif n%7==6:\\n    print((n//7)*2+1,(n//7)*2+2)\\nelse:\\n    print((n//7)*2,(n//7)*2+2)\", \"# coding: utf-8\\n\\n\\n\\n\\n\\nimport math\\nimport string\\nimport itertools\\nimport fractions\\nimport heapq\\nimport collections\\nimport re\\nimport array\\nimport bisect\\n\\nn = int(input())\\n\\nw = n // 7\\nd = n % 7\\nmin_off = w * 2\\nmax_off = w * 2\\nif d <= 2:\\n    max_off += d\\nelif 2 < d and d <= 5:\\n    max_off += 2\\nelse:                           # d==6\\n    max_off += 2\\n    min_off += 1\\nprint(\\\"{} {}\\\".format(min_off, max_off))\\n\", \"n = int(input())\\nd = n // 7\\nr = n % 7\\nu, v = d + d, d + d\\nif r == 6:\\n    u += 1\\nif r == 1:\\n    v += 1\\nif r > 1:\\n    v += 2\\nprint(u, v)\\n    \\n\", \"#!/usr/bin/env python3\\n\\ndef f(n):\\n    return n // 7 + (n + 1) // 7\\n\\ntry:\\n    while True:\\n        n = int(input())\\n        if n == 1:\\n            print(\\\"0 1\\\")\\n        else:\\n            print(f(n), 2 + f(n - 2))\\n\\nexcept EOFError:\\n    pass\\n\", \"n = int(input())\\ns = 2\\no = 0\\nif n%7 == 0:\\n\\ts = 0\\nif n%7 == 1:\\n\\ts = 1\\nif n%7 == 6:\\n\\to = 1\\nprint((n//7)*2+o, (n//7)*2 + s)\\n\", \"import math\\nn = int(input())\\ncel = math.floor(n / 7)\\nost = n % 7\\nif ost <= 2:\\n    max_weekend = cel * 2 + ost\\nelse:\\n    max_weekend = cel * 2 + 2\\nif ost < 6:\\n    min_weekend = cel * 2\\nelse:\\n    min_weekend = cel * 2 + 7 - ost\\nprint(min_weekend, max_weekend)\\n\", \"a = int(input())\\nb, c = a // 7 * 2, a // 7 * 2\\nb += [0, 1][a % 7 == 6]\\nc += [a % 7, 2][a % 7 > 2]\\nprint(\\\"%d %d\\\" % (b, c))\\n\", \"n=int(input())\\n\\ns=2*(n//7)\\np=s\\nif(n%7>2):\\n    s+=2\\nelse:\\n    s+=n%7\\nif(n%7>5):\\n    p+=7-n%7\\nprint(p,s)\", \"n = int(input())\\nx = n // 7 * 2\\nprint(x + (n % 7 == 6), x + min(n % 7, 2))\", \"n = int(input())\\nm = n // 7\\nn %= 7\\nma = m * 2 + min(n, 2)\\nmi = m * 2\\nif (n > 5):\\n    mi += n - 5\\nprint(mi, ma)\", \"import sys\\n#sys.stdin = open(\\\"apples.in\\\",\\\"r\\\")\\n#sys.stdout = open(\\\"apples.out\\\",\\\"w\\\")\\n\\nn = int(input())\\nk = n // 7 \\nif (n % 7 == 0):\\n    print(k*2, end = ' ')\\nelif (n % 7 == 6):\\n    print(max(k*2+1, 0), end = ' ')\\nelse:\\n    print(max(k*2, 0), end = ' ')\\n\\n\\nif (n % 7 == 0):\\n    print(k*2)\\nelif (n % 7 == 1):\\n    print(k*2+1)\\nelse:\\n    print(k*2+2)\\n\\n        \\n#sys.stdin.close()\\n#sys.stdout.close()\\n\", \"def solve():\\n    N = int(input())\\n\\n    n7 = N // 7\\n    m7 = N % 7\\n    ma = n7 * 2 + min(m7, 2)\\n    mi = n7 * 2\\n    if m7 == 6:\\n        mi += 1\\n\\n    print(mi, ma)\\n\\n\\ndef __starting_point():\\n    solve()\\n\\n__starting_point()\", \"n=int(input())\\na=n//7*2\\nprint(a+max(0,(n%7-5)),a+min(2,n%7))\\n\", \"def solve(n):\\n    res = (n // 7) * 2\\n    d = n % 7\\n    if (d == 6):\\n        minn = res + 1\\n        maxx = res + 2\\n    elif (d == 1):\\n        minn = res\\n        maxx = res + 1      \\n    elif (d == 0):\\n        minn = res\\n        maxx = res\\n    else:\\n        minn = res\\n        maxx = res + 2\\n    return [minn, maxx]\\n    \\nn = int(input())\\nsol = solve(n)\\nprint(str(sol[0])+\\\" \\\"+str(sol[1]))\", \"n = int(input())\\nc1 = (n//7)*2\\nc2 = c1\\nk1 = n%7\\nk2 = k1-5\\nif k1 >= 2:\\n    c1 += 2\\nelse:\\n    c1 +=k1\\nif k2 >= 0:\\n    c2 += k2\\nprint(c2,c1)\\n\", \"n = int(input())\\n\\na = n // 7 * 2\\nb = a + min(n % 7, 2)\\nif n % 7 == 6:\\n    a += 1\\n\\nprint('{} {}'.format(a, b))\\n\", \"n = int(input())\\nif n == 1:\\n    print('0 1')\\nelif n == 2:\\n    print('0 2')\\nelse:\\n    d = n - 5\\n    minDay = ((d // 7) * 2) + (2 if d % 7 >= 2 else d % 7)\\n    maxDay = ((n // 7) * 2) + (2 if n % 7 >= 2 else n % 7)\\n    print('%d %d' % (minDay, maxDay))\\n\"]",
    "[\"from fractions import gcd\\ndef lcm(a, b):\\n    return a*b//gcd(a, b)\\nn, a, b, p, q = list(map(int, input().split(' ')))\\nred = n//a\\nblue = n//b\\nif (p<q):\\n    red -= n//lcm(a, b)\\nelse:\\n    blue -= n//lcm(a, b)\\n\\nprint(p*red+q*blue)\\n\", \"3\\n# Copyright (C) 2016 Sayutin Dmitry.\\n#\\n# This program is free software; you can redistribute it and/or\\n# modify it under the terms of the GNU General Public License as\\n# published by the Free Software Foundation; version 3\\n#\\n# This program is distributed in the hope that it will be useful,\\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n# GNU General Public License for more details.\\n#\\n# You should have received a copy of the GNU General Public License\\n# along with this program; If not, see <http://www.gnu.org/licenses/>.\\n\\ndef gcd(a, b):\\n    while b != 0:\\n        a, b = b, a % b\\n    return a\\n\\nn, a, b, p, q = list(map(int, input().split()))\\n\\ns = (n // a) * p + (n // b) * q\\ns -= (n // (a * b // gcd(a, b))) * min(p, q)\\nprint(s)\\n\", \"def gcd(a, b):\\n    while a:\\n        a, b = b % a, a\\n    return b\\n\\nn, a, b, p, q = map(int, input().split())\\nox = n // (a * b // gcd(a, b))\\nax = n // a - ox\\nbx = n // b - ox\\nprint(ax * p + bx * q + ox * max(p, q))\", \"from fractions import gcd\\nn,a,b,p,q=list(map(int,input().split()))\\nx=n//(a*b//gcd(a,b))\\nprint((n//a-x)*p+(n//b-x)*q+x*max(p, q))\\n\", \"def gcd(a, b):\\n    while b:\\n        a, b = b, a % b\\n    return a\\n\\ndef lcm(a, b):\\n    return (a * b) // gcd(a, b)\\n\\ndef main():\\n    n, a, b, p, q = list(map(int, input().split()))\\n    if a == b:\\n        print((n // a) * max(p, q))\\n    else:\\n        print((n // a) * p + (n // b) * q - (n // lcm(a, b)) * min(p, q))\\n\\nmain()\\n\", \"#!/usr/bin/env python3\\n\\nfrom fractions import gcd\\n\\ntry:\\n    while True:\\n        n, a, b, p, q = list(map(int, input().split()))\\n        print(n // a * p + n // b * q - n // (a // gcd(a, b) * b) * min(p, q))\\n\\nexcept EOFError:\\n    pass\\n\", \"import math\\n\\nn,a,b,p,q = [int(x) for x in input().split(' ')]\\n\\ng = int(a * b / math.gcd(a,b))\\n\\nif p > q: l = q\\nelse: l = p\\nprint((n//a)*p + (n//b)*q - (n//g)* l)\", \"from fractions import gcd\\ndef lcm(x, y):\\n    return x * y // gcd(x, y)\\n\\nn, a, b, p, q = list(map(int, input().split()))\\n\\nans = p * (n // a)\\nans += q * (n // b)\\nans -= min(p, q) * (n // lcm(a, b))\\nprint(ans)\\n\", \"def lcm(a, b):\\n    x = a * b\\n    while b != 0:\\n        (a, b) = (b, a % b)\\n    return x // a\\n\\n\\nn, a, b, p, q = map(int, input().split())\\nprint(n // a * p + n // b * q - n // lcm(a, b) * min(p, q))\", \"def gcd(a, b):\\n    while (a % b != 0):\\n        c = a % b\\n        a = b\\n        b = c\\n    return b\\n\\nn, a, b, p, q = map(int, input().split())\\nif (p > q):\\n    c1 = p\\n    p = q\\n    q = c1\\n    c = a\\n    a = b\\n    b = c\\nt = (a // gcd(a, b)) * b\\nprint(int((n // a) * p + (n // b) * q - (n // t) * p))\", \"n, a, b, p, q = list(map(int, input().split()))\\nfrom fractions import gcd\\nans = (n // a) * p + (n // b) * q\\nl = (a * b) // gcd(a, b)\\nans -= (n // l) * (min(p, q))\\nprint(ans)\\n\", \"def gcd(a, b):\\n\\tif a == 0:\\n\\t\\treturn b\\n\\tif b == 0:\\n\\t\\treturn a\\n\\treturn gcd(b, a % b)\\n\\ndef get_nok(a, b):\\n\\treturn (a * b) // gcd(a, b)\\n\\nn, a, b, p, q = list(map(int, input().split()))\\n\\nif p < q:\\n\\ta, b = b, a\\n\\tp, q = q, p\\n\\n\\nnok = get_nok(a, b)\\n\\nt = n // a\\nminus = n // nok\\nc = n // b\\nprint(t * p + q * (c - minus))\\n\\n\\n\", \"n,a,b,p,q = list(map(int,input().split()))\\na2 = a\\nb2 = b\\nwhile b2 != 0 :\\n    a2,b2 = b2,a2%b2\\n\\nprint(n // a * p + n // b * q - n // ((a*b) // a2) * (min(p,q)))\\n\", \"def gcd(a,b):\\n    while b != 0:\\n        a, b = b, a % b\\n    return a\\n\\nn, a, b, p, q = [int(i) for i in input().split()]\\nlcm = a * b // gcd(a,b)\\nonlyA = n//a - n//lcm\\nonlyB = n//b - n//lcm\\nprint(p * onlyA + q * onlyB + max(p,q) * (n // lcm))\\n\", \"#C\\ncin=lambda:map(int,input().split())\\nn,a,b,p,q=cin()\\n\\ndef lcm(a,b):\\n    m = a*b\\n    while a != 0 and b != 0:\\n        if a > b:\\n            a %= b\\n        else:\\n            b %= a\\n    return m // (a+b)\\n\\nif p>=q:\\n    res=(n//a)*p + (n//b-n//lcm(a,b))*q\\nelse:\\n    res=(n//b)*q + (n//a-n//lcm(a,b))*p\\nprint(res)\", \"n, a, b, p, q = map(int ,input().split())\\n\\nred_max = n // a\\nblue_max = n // b\\n\\nimport fractions\\n\\ngcd = (a*b) // fractions.math.gcd(a, b)\\ncommons = n // gcd\\n\\nif p > q:\\n    print(red_max*p + (blue_max-commons)*q)\\nelse:\\n    print((red_max-commons)*p + blue_max*q)\", \"from fractions import gcd\\nn, a, b, p, q = map(int, input().split())\\nk = (a*b)//gcd(a, b)\\ndivisors_a = n//a\\ndivisors_b = n//b\\ndivisors_k = n//k\\nprint(max((divisors_a - divisors_k)*p + divisors_b*q, (divisors_b - divisors_k)*q + divisors_a*p))\", \"def gcd(a, b):\\n    if b < 1:\\n        return a\\n    if b > a:\\n        return gcd(b, a)\\n    return gcd(b, a % b)\\n\\nn, a, b, p, q = list(map(int, input().split()))\\nl = [n // a, n // b, n // (a * b // gcd(a, b))]\\nprint((l[0] - l[2]) * p + (l[1] - l[2]) * q + l[2] * max(p, q))\\n#print(l[0], l[1], l[2])\\n#print(gcd(a, b))\\n\", \"from fractions import gcd\\nn,a,b,p,q = list(map(int,input().split()))\\nnum1 = n//a\\nnum2 = n//b\\nt = a*b//gcd(a,b)\\nnum3 = n//t\\nprint((num1-num3)*p + (num2-num3)*q + num3*max(p,q))\\n\", \"from math import gcd\\n\\nn, a, b, p, q = map(int, input().split())\\nif p > q:\\n    p, q = q, p\\n    a, b = b, a\\nres = n // b * q\\nres += (n // a - n * gcd(a, b) // a // b) * p\\nprint(res)\", \"n, a, b, p, q = tuple(map(int, input().split()))\\n\\ns = (n // a) * p\\ns += (n // b) * q\\n\\ndef gcd(p, q):\\n    if p < q:\\n        return gcd(q, p)\\n    if q == 0:\\n        return p\\n    return gcd(q, p % q)\\n\\nc = n // ((a *b ) //gcd(a, b))\\nif p < q:\\n    s -= c * p\\nelse:\\n    s -= c * q\\n\\nprint(s)\", \"def gcd(a, b):\\n    if b == 0:\\n        return a\\n    return gcd(b, a % b)\\n\\ndef lcm(a, b):\\n    return a * b // gcd(a, b)\\n\\nn, a, b, p, q = map(int, input().split())\\ns = n // a * p + n // b * q - n // lcm(a, b) * min(p, q)\\nprint(s)\", \"def nod(a,b):\\n    if a*b>0:\\n        return nod(b,a%b)\\n    else:\\n        return a+b\\n\\n\\n\\nn,a,b,p,q = (int(i) for i in input().split())\\nprint(n//a*p+n//b*q-n//(a*b//nod(a,b))*min(p,q))\\n\"]",
    "[\"n = int(input())\\nA = input()\\nx = A.count('G')\\nnum_1 = 0\\nnum_2 = 0\\nmax_num = 0\\nflag = 0\\nfor i in range(n):\\n    if A[i] == 'G' and flag == 0:\\n        num_1 += 1\\n    elif A[i] == 'G' and flag == 1:\\n        num_2 += 1\\n    elif A[i] == 'S' and flag == 0:\\n        flag = 1\\n    else:\\n        if num_1 + num_2 + 1 <= x:\\n            if num_1 + num_2 + 1 > max_num:\\n                max_num = num_1 + num_2 + 1\\n            num_1 = num_2\\n            num_2 = 0\\n            flag = 1\\n        else:\\n            if num_2 + num_1 > max_num:\\n                max_num = num_1 + num_2\\n            num_1 = num_2\\n            num_2 = 0\\n            flag = 1\\nif num_1 + num_2 + 1 <= x:\\n    if num_1 + num_2 + 1 > max_num:\\n        max_num = num_1 + num_2 + 1\\nelse:\\n    if num_2 + num_1 > max_num:\\n        max_num = num_1 + num_2\\nprint(max_num)\\n\", \"n = int(input())\\ns = input()\\n\\n\\nmax_ans = len([x for x in s if x == 'G'])\\nright = 0\\ncnt = 0\\nans = 0\\nfor i in range(n):\\n\\tassigned = False\\n\\tfor j in range(right, n, 1):\\n\\t\\tif s[j] == 'S':\\n\\t\\t\\tcnt += 1\\n\\t\\tif cnt > 1:\\n\\t\\t\\tright = j\\n\\t\\t\\tcnt -= 1\\n\\t\\t\\tassigned = True\\n\\t\\t\\tbreak\\n\\tif not assigned:\\n\\t\\tright = n\\n\\t# print(i, right)\\n\\tans = max(ans, right - i)\\n\\tif s[i] == 'S':\\n\\t\\tcnt -= 1\\nans = min(ans, max_ans)\\nprint(ans)\", \"input()\\nres = 0\\ncur = 1\\ncur_p = 0\\ns = input()\\nfor c in s:\\n\\tif c == \\\"G\\\":\\n\\t\\tcur += 1\\n\\t\\tcur_p += 1\\n\\t\\tres = max(res, cur)\\n\\telse:\\n\\t\\tcur = cur_p + 1\\n\\t\\tcur_p = 0\\nprint(min(res, s.count(\\\"G\\\")))\\n\", \"n=int(input())\\nt=input()\\nL=[-1]\\ns=0\\nfor i in range(n):\\n    if t[i]=='S':\\n        L.append(i)\\n        s+=1\\nL.append(n)\\nm = L[1]-L[0]-1\\nfor i in range(len(L)-2):\\n    if L[i+2]-L[i]-1 > m:\\n        m=L[i+2]-L[i]-1\\nprint(min(m,n-s))\\n\", \"n = int(input())\\nks  =input().strip()\\n\\nprev_g_seq_len = 0\\ncur__g_seq_len = 0\\nprev_is_s = True\\n\\nres = 0\\nfor j in ks:\\n    if j == 'S':\\n        prev_g_seq_len = cur__g_seq_len\\n        cur__g_seq_len = 0\\n        # prev_is_s = True\\n    else:\\n        cur__g_seq_len += 1\\n        # prev_is_s = False\\n    res = max (res, prev_g_seq_len + cur__g_seq_len + 1)\\n\\nmmm = ks.count('G')\\nres = min(mmm, res)\\n\\n\\n\\n\\nprint(res)\\n\\n\\n\", \"n = int(input())\\ns = input()\\ng1 = 0\\ng2 = 0\\nans = 0\\nnum2 = s.count(\\\"G\\\")\\nfor  i in range(n):\\n    if s[i] == \\\"G\\\":\\n        g1 += 1\\n    else:\\n        g2 = g1\\n        g1 = 0\\n        \\n    num = g1  + g2\\n    if num2 != num:\\n        num+=1\\n    ans = max(ans,num)\\nprint(min(n,ans))\", \"def ii():\\n    return int(input())\\ndef mi():\\n    return list(map(int, input().split()))\\ndef li():\\n    return list(mi())\\n\\nn = ii()\\ns = input().strip()\\n\\ng = []\\ni = 0\\nlng = 0\\nwhile i < n:\\n    if s[i] == 'S':\\n        i += 1\\n        continue\\n    j = i + 1\\n    while j < n and s[j] == 'G':\\n        j += 1\\n    g.append((i, j))\\n    lng = max(lng, j - i)\\n    i = j + 1\\n\\nif not g:\\n    ans = 0\\nelif len(g) == 1:\\n    ans = lng\\nelse:\\n    extra = len(g) > 2\\n    ans = lng + 1\\n    for i in range(len(g) - 1):\\n        s, e = g[i]\\n        s2, e2 = g[i + 1]\\n        if s2 != e + 1:\\n            continue\\n        ans = max(ans, e - s + e2 - s2 + extra)\\nprint(ans)\\n\", \"n = int(input())\\ns = input()\\n\\ngolden_sub = s.split('S')\\nnG = 0\\nfor c in s:\\n\\tif c == 'G':\\n\\t\\tnG += 1\\n\\nt = len(golden_sub)\\nif t == 1:\\n\\tprint(len(golden_sub[0]))\\nelse:\\n\\tans = 0\\n\\tfor i in range(t - 1):\\n\\t\\tl1 = len(golden_sub[i])\\n\\t\\tl2 = len(golden_sub[i + 1])\\n\\t\\tif l1 + l2 < nG:\\n\\t\\t\\tans = max(ans, l1 + l2 + 1)\\n\\t\\telse:\\n\\t\\t\\tans = max(ans, l1 + l2)\\n\\tprint(ans)\\n\", \"from itertools import groupby as gb\\nn = int(input())\\ns = input()\\ng = gb(s)\\ngl = []\\nfor k,v in g:\\n    gl.append([k,len(list(v))])\\nl = len(gl)\\n\\nif s[0]=='S':\\n    if l==1:\\n        print(0)\\n        return\\n    elif l<=3:\\n        print(gl[1][1])\\n        return\\nif s[0]=='G':\\n    if l<=2:\\n        print(gl[0][1])\\n        return\\n\\nres = 0\\n# 1\\nfor i,[k,v] in enumerate(gl):\\n    if (k,v) == ('S',1) and i not in (0,l-1):\\n        if s[0]=='S' and l<=5:\\n            res = max(res, gl[i-1][1]+gl[i+1][1])\\n        elif s[0]=='G' and l<=4:\\n            res = max(res, gl[i-1][1]+gl[i+1][1])\\n        else:\\n            res = max(res, gl[i-1][1]+gl[i+1][1] + 1)\\n# 2\\nfor i,[k,v] in enumerate(gl):\\n    if (k) == ('S') and v > 1:\\n        if i != 0:\\n            res = max(res, gl[i-1][1] + 1)\\n        if i != l-1:\\n            res = max(res, gl[i+1][1] + 1)\\nprint(res)\\n\", \"n=int(input())\\ns=str(input())\\nlast_seq=0\\ncurr_seq=0\\nans=0\\ngcount=0\\ni=0\\nwhile i<n-1:\\n    if s[i]=='G':\\n        gcount+=1\\n        curr_seq+=1\\n        i+=1\\n    else:\\n        if curr_seq+last_seq>ans:\\n            ans=curr_seq+last_seq\\n        if s[i+1]=='G':\\n            #gcount+=1\\n            last_seq=curr_seq\\n            curr_seq=0\\n            i+=1\\n        else:\\n            if curr_seq>ans:\\n                ans=curr_seq\\n            curr_seq=0\\n            last_seq=0\\n            i+=2\\nif s[-1]=='G':\\n    gcount+=1\\n    curr_seq+=1\\nif curr_seq+last_seq>ans:\\n    ans=curr_seq+last_seq\\n#print(gcount,ans)\\nif gcount>ans:\\n    print(ans+1)\\nelse:\\n    print(ans)\\n\", \"n = int(input())\\nseq = input().replace(' ', '')\\nnGTotal = seq.count('G')\\nnGCur = 0\\nright = -1\\nresult = 0\\nfor left in range(n):\\n    if right < left:\\n        right = left - 1\\n        nGCur = 0\\n    while right + 1 < n and ((seq[right + 1] == 'G' and (right - left + 1 - nGCur == 0 or nGCur + 2 <= nGTotal)) or (seq[right + 1] == 'S' and right + 1 - left + 1 - nGCur <= 1 and nGCur + 1 <= nGTotal)):\\n        right += 1\\n        if seq[right] == 'G':\\n            nGCur += 1\\n    result = max(right - left + 1, result)\\n    if seq[left] == 'G':\\n        assert right >= left\\n        nGCur -= 1\\nprint(result)\\n\", \"n=int(input())\\ns=input()\\na=[]\\nk=1\\nfor i in range(n-1):\\n    if s[i]=='G' and s[i+1]=='G':\\n        k+=1\\n    elif s[i]=='G' and s[i+1]=='S':\\n        a.append([i,k])\\n        k=1\\nif s[-1]=='G':\\n    a.append([n-1,k])\\nif len(a)==0:\\n    print(0)\\nelif len(a)==1:\\n    print(a[0][1])\\nelif len(a)==2:\\n    ma=0\\n    for i in a:\\n        ma=max(i[1],ma)\\n    ka=0\\n    for i in range(len(a)-1):\\n        if (a[i+1][0]-a[i+1][1]+1)-a[i][0]==2:\\n            ka=max(a[i][1]+a[i+1][1],ka)\\n    if ka>ma+1:\\n        print(ka)\\n    else:\\n        print(ma+1)\\nelse:\\n    ma=0\\n    for i in a:\\n        ma=max(i[1],ma)\\n    ka=0\\n    for i in range(len(a)-1):\\n        if (a[i+1][0]-a[i+1][1]+1)-a[i][0]==2:\\n            ka=max(a[i][1]+a[i+1][1],ka)\\n    print(max(ka,ma)+1)\\n\", \"x = int(input())\\ns = input()\\n\\ncnts = s.count('S')\\ncntg = s.count('G')\\ncnt=0\\nmx2 = -55\\nfor i in range(len(s)-1):\\n\\tif(s[i]=='G' and s[i+1]=='G'):\\n\\t\\tcnt+=1\\n\\telse:\\n\\t\\tcnt=0\\n\\tmx2 = max(cnt, mx2)\\n\\nmx2+=1\\n\\nls=[]\\ns+=\\\"0\\\"\\ns='0'+s\\nfor i in range(1, len(s)):\\n\\tif(s[i-1]=='G' and s[i]=='S' and s[i+1]=='G'):\\n\\t\\tls.append(i)\\n\\n\\ncnt = 0\\nmx=-55\\nfor i in range(len(ls)):\\n\\tc = ls[i]-1\\n\\twhile(s[c]=='G'):\\n\\t\\tcnt+=1\\n\\t\\tc-=1\\n\\tc = ls[i]+1\\n\\twhile(s[c]=='G'):\\n\\t\\tcnt+=1\\n\\t\\tc+=1\\n\\tmx = max(cnt, mx)\\n\\tcnt=0\\n\\nmaxx = max(mx, mx2)\\nif(cntg==0):\\n\\tprint(0)\\nelif(cntg>maxx and cnts>0):\\n\\tprint(maxx+1)\\nelse:\\n\\tprint(maxx)\", \"n = int(input())\\ns = input()\\nmax = 0\\nl = 0\\nhas_s = False\\ngs = 0\\nfor r in range(n):\\n    if s[r] == 'G':\\n        gs += 1\\n    else:\\n        if not has_s:\\n            has_s = True\\n        else:\\n            while s[l] == 'G':\\n                l += 1\\n            l += 1\\n    if r-l+1 > max:\\n        max = r-l+1\\nans = max\\nif gs < max:\\n    ans -= 1\\n\\nprint(ans)\", \"n = int( input() )\\ns = input() + 'SS'\\n\\nd = []\\nsilv = 0\\ngold = 0\\nl = []\\nfor c in s:\\n    if c == 'G':\\n        gold += 1\\n        silv = 0\\n    else:\\n        silv += 1\\n        if silv > 1 and len( l ) > 0:\\n            d.append(l)\\n            l = []\\n        if gold > 0:\\n            l.append( gold )\\n        gold = 0\\n\\n\\n\\nif len( d ) == 0:\\n    print( 0 )\\nelif len( d ) == 1:\\n    l = d[ 0 ]\\n    if len( l ) == 1 :\\n        print( l[ 0 ] )\\n    elif len( l ) == 2:\\n        print( sum( l ) )\\n    else:\\n        m = 0\\n        last = 0\\n        for i in l:\\n            m = max(m, last + i + 1 )\\n            last = i\\n        print( m )\\nelse:\\n    m = 0\\n    for l in d:\\n        last = 0\\n        for i in l:\\n            m = max(m, last + i + 1 )\\n            last = i\\n    print( m )\\n\", \"import sys\\nfrom math import ceil, sqrt\\n\\ninput = sys.stdin.readline\\n\\nn = int(input())\\ns = input().strip()\\n\\nlast = \\\"S\\\"\\nans = []\\ncount = 0\\nfreq = {'S': 0, 'G': 0}\\n\\nfor i in range(n):\\n    freq[s[i]] += 1\\n    if s[i] != last:\\n        ans.append((count, last))\\n        last = s[i]\\n        count = 1\\n    else:\\n        count += 1\\nans.append((count, last))\\nans.pop(0)\\n\\nif freq['G'] == 0:\\n    print(0)\\n    return\\n\\nfinal = max([x[0] for x in ans if x[1] == 'G'])\\nif freq['G'] > final:\\n    final += 1\\n\\nfor i in range(len(ans) - 2):\\n    if ans[i][1] == 'G' and ans[i+1][1] == 'S' and ans[i+1][0] == 1 and ans[i+2][1] == 'G':\\n        if freq['G'] > ans[i][0] + ans[i+2][0]:\\n            final = max(final, ans[i][0] + ans[i+2][0] + 1)\\n        else:\\n            final = max(final, ans[i][0] + ans[i+2][0])\\nprint(final)\", \"n=int(input())\\ns=input()\\na=[0]*100005\\nans,maxn=0,0\\n\\nfor i in range(0,n):\\n    if(s[i]=='G'):\\n        if i==0:\\n            a[0]=1\\n        else:\\n            a[i]=a[i-1]+1\\n        maxn=max(maxn,a[i])\\n        ans+=1\\nfor i in range(n-2,-1,-1):\\n    if (s[i] == 'G'):\\n        a[i]=max(a[i],a[i+1])\\nfor i in range(0,n):\\n    if(i>0 and i <n-1 and s[i]=='S' and s[i-1]=='G'and s[i+1]=='G'and a[i-1]+a[i+1]!=ans):\\n        maxn=max(maxn,a[i-1]+a[i+1]+1)\\n        continue\\n    if (i > 0 and i < n - 1 and s[i] == 'S' and s[i - 1] == 'G' and s[i + 1] == 'G'):\\n        maxn = max(maxn, a[i - 1] + a[i + 1])\\n        continue\\n    if(s[i]=='G' and a[i]!=ans):\\n        maxn=max(maxn,a[i]+1)\\nprint(maxn)\", \"3.5\\n\\nN = int(input())\\nA = input()\\n\\nL = []\\ncpt = 1\\nret = 0\\n\\nfor i in range(1, len(A)):\\n    if A[i] == A[i-1]:\\n        cpt += 1\\n    else:\\n        L.append(cpt)\\n        if A[i] == \\\"S\\\":\\n            ret = max(ret, cpt)\\n            \\n        cpt = 1\\n\\nL.append(cpt)\\nif A[-1] == \\\"G\\\":\\n    ret = max(ret, cpt)\\n\\nif ret == 0:\\n    print(\\\"0\\\")\\n    return\\n\\nif A[0] == \\\"G\\\":\\n    cur = True\\nelse:\\n    cur = False\\n\\nfor i in range(0, len(L)):\\n    if not cur:\\n        if L[i] == 1 and (i+3 < len(L) or i-3 >= 0):\\n            new = 1\\n            if i > 0:\\n                new += L[i-1]\\n            if i < len(L)-1:\\n                new += L[i+1]\\n\\n            ret = max(ret, new)\\n\\n        if L[i] == 1 and i > 0 and i < len(L)-1:\\n            ret = max(ret, L[i-1] + L[i+1])\\n                \\n        if i > 0 and i+1 < len(L):\\n            ret = max(ret, L[i-1]+1)\\n\\n        if i < len(L)-1 and i-1 >= 0:\\n            ret = max(ret, L[i+1]+1)\\n    \\n    cur = not cur\\n\\nprint(ret)\\n\", \"def solve():\\n    n = int(input())\\n    s = input()\\n    l = []\\n    g_seg, s_seg = 0, 0\\n    g_count = 0\\n    for i in range(n):\\n        if s[i] == 'S':\\n            if g_seg:\\n                g_count += 1\\n                l.append((\\\"G\\\", g_seg))\\n                g_seg = 0\\n            s_seg += 1\\n        else:\\n            if s_seg:\\n                l.append((\\\"S\\\", s_seg))\\n                s_seg = 0\\n            g_seg += 1\\n    if g_seg:\\n        l.append((\\\"G\\\", g_seg))\\n        g_count += 1\\n    # print(l)\\n    if not g_count:\\n        return 0\\n    if len(l) == 1:\\n        return l[0][1]\\n    elif len(l) == 2:\\n        return l[1][1]\\n    if g_count == 2:\\n        ans = 0\\n        for i in range(len(l) - 2):\\n            if l[i][0] == 'G':\\n                if l[i + 1][1] == 1:\\n                    ans = max(ans, l[i][1] + l[i + 2][1])\\n                else:\\n                    ans = max(ans, l[i][1] + 1, l[i + 2][1] + 1)\\n        return ans\\n    else:\\n        ans = 0\\n        for i in range(len(l) - 2):\\n            if l[i][0] == 'G':\\n                if l[i + 1][1] == 1:\\n                    ans = max(ans, l[i][1] + 1 + l[i + 2][1])\\n                else:\\n                    ans = max(ans, l[i][1] + 1, l[i + 2][1] + 1)\\n        return ans\\n\\n\\nprint(solve())\", \"n=int(input())\\ns=input()\\nans=0\\nsc,gc,pi,ci=0,0,-1,-1\\nfor i in range(1,n+1):\\n\\tif s[i-1]=='G':\\n\\t\\tgc+=1\\n\\telse:\\n\\t\\tsc+=1\\n\\t\\tif pi==-1:\\n\\t\\t\\tans=max(ans,i-1)\\n\\t\\telse:\\n\\t\\t\\tans=max(ans,i-1-pi)\\n\\t\\tpi=ci\\n\\t\\tci=i\\n\\t#print(ans)\\n#print(gc,sc)\\nif sc==1:\\n\\tprint(n-1)\\n\\treturn\\nif sc==2 and (s[0]=='S' or s[n-1]=='S'):\\n\\tprint(n-2)\\n\\treturn\\n\\nif pi==-1:\\n\\tans=max(ans,n)\\nelse:\\n\\tans = max(ans,n-pi)\\n\\nprint(min(ans,gc))\\n\", \"#!/usr/bin/env python\\n# coding: utf-8\\n\\n# In[ ]:\\n\\n\\n\\nimport math\\n\\n\\n# In[5]:\\n\\n\\nn=int(input())\\ndata= list(input())\\n\\n\\n# In[21]:\\n\\n\\nfirstsilver=-1\\nsecondsilver=-1\\nmdiff=[-1,-1,-1]\\n\\nfor i in range(0,n):\\n    if data[i]=='S' and secondsilver==-1:\\n        secondsilver=i\\n    elif data[i]==\\\"S\\\":\\n        firstsilver=secondsilver\\n        secondsilver=i\\n    diff=i-firstsilver\\n    if diff>mdiff[0]:\\n        mdiff=[diff,firstsilver,i,secondsilver]\\n\\n#print(mdiff)        \\n        \\n\\n\\n# In[22]:\\n\\nif mdiff[1]==mdiff[3]:\\n    penalty=0\\nelse:\\n    penalty=1\\n    \\nfor i in range(0,n):\\n    if i not in list(range(mdiff[1]+1,mdiff[2]+1)):\\n        if data[i]=='G':\\n            penalty=0\\n\\n\\n# In[23]:\\n\\n\\nprint(mdiff[0]-penalty)\\n\\n\\n# In[ ]:\\n\", \"def longestSubSeg(a, n):\\n    cnt0 = 0\\n    l = 0\\n    max_len = 0;\\n    ctG=0\\n    # i decides current ending point\\n    for i in range(0, n):\\n        if a[i] == 'S':\\n            cnt0 += 1\\n        if a[i] =='G':\\n            ctG+=1\\n        while (cnt0 > 1):\\n            if a[l] == 'S':\\n                cnt0 -= 1\\n            l += 1\\n\\n        max_len = max(max_len, i - l + 1);\\n    if max_len>ctG:\\n        return max_len-1\\n    return max_len\\nn=int(input())\\na=list(input())\\nprint(longestSubSeg(a,n))\", \"def mi():\\n\\treturn list(map(int, input().split()))\\n'''\\n10\\nGGGSGGGSGG\\n'''\\nn = int(input())\\ns = list(input())\\nfor i in range(n):\\n\\tif s[i]=='G':\\n\\t\\ts[i] = 1\\n\\telse:\\n\\t\\ts[i] = 0\\na = []\\ni = 0\\nwhile i<n:\\n\\tif s[i]==1:\\n\\t\\tc = 0\\n\\t\\tzc = 0\\n\\t\\tpz = -1\\n\\t\\twhile i<n and zc <=1:\\n\\t\\t\\tif s[i]==1:\\n\\t\\t\\t\\tc+=1\\n\\t\\t\\telse:\\n\\t\\t\\t\\tzc+=1\\n\\t\\t\\t\\tif zc==1:\\n\\t\\t\\t\\t\\tpz = i\\n\\t\\t\\ti+=1\\n\\t\\ta.append(c)\\n\\t\\tif pz!=-1:\\n\\t\\t\\ti = pz\\n\\telse:\\n\\t\\ti+=1\\nif len(a)>1:\\n\\tans = max(a)+1\\n\\tif ans>s.count(1):\\n\\t\\tprint(s.count(1))\\n\\telse:\\n\\t\\tprint(max(a)+1)\\nelif len(a)==1:\\n\\tprint(a[0])\\nelse:\\n\\tprint(0)\\n\", \"n =int(input())\\ncups = input()\\n\\ndef maxlength(cups):\\n    length = 0\\n    for i in cups:\\n        if i == 'G':\\n            length =  length + 1\\n    return length\\n  \\nll = cups.split('S')\\nthemax = maxlength(cups)\\nmaxl = 0\\nlength =0\\nfor i in range(len(ll)):\\n    if len(ll[i])>0 and length > 0:\\n        length = len(ll[i]) + length\\n        if length >maxl :\\n            maxl = length\\n        length = len(ll[i])\\n    if length == 0 or len(ll[i]) ==0:\\n        length = len(ll[i])\\n    if length> maxl and length<=themax:\\n        maxl = length\\nif maxl < themax:\\n    maxl  = maxl + 1\\nprint(maxl)\"]",
    "[\"#This code is dedicated to Vlada S.\\n\\nclass Course:\\n\\tdef __init__(self, reqs, number):\\n\\t\\tself.reqs = list(map(int, reqs.split()[1:]))\\n\\t\\tself.available = False\\n\\t\\tself.in_stack = False\\n\\t\\tself.number = number\\n\\nn, k = list(map(int, input().split()))\\nrequirements = list(map(int, input().split()))\\ncourses = {}\\n\\nanswer = \\\"\\\"\\n\\nfor i in range(n):\\n\\tcourses[i + 1]= Course(input(), i + 1)\\n\\nfor i in range(len(requirements)):\\n\\trequirements[i] = courses[requirements[i]]\\n\\nwhile requirements:\\n\\tdata = {}\\n\\n\\tcourse = requirements.pop()\\n\\n\\tif not course.available:\\n\\t\\trequirements.append(course)\\n\\n\\t\\tdone = True\\n\\n\\t\\tfor c in course.reqs:\\n\\t\\t\\tc = courses[c]\\n\\n\\t\\t\\tif not c.available:\\n\\t\\t\\t\\trequirements.append(c)\\n\\t\\t\\t\\tdone = False\\n\\n\\t\\tif done:\\n\\t\\t\\tanswer += \\\" \\\" + str(course.number)\\n\\t\\t\\tcourse.available = True\\n\\t\\telse:\\n\\t\\t\\tif course.in_stack:\\n\\t\\t\\t\\tprint(-1)\\n\\t\\t\\t\\tbreak\\n\\n\\t\\t\\tcourse.in_stack = True\\nelse:\\n\\tprint(answer.count(\\\" \\\"))\\n\\tprint(answer[1:])\", \"import sys\\n\\ndef main():\\n\\n    n,k = map(int,sys.stdin.readline().split())\\n    courses = list(map(int,sys.stdin.readline().split()))\\n    courses = [x-1 for x in courses] \\n\\n    visited = [False]*n\\n    used = [False]*n\\n\\n    ans = []\\n    t = []\\n\\n    for i in range(n):\\n        temp = list(map(int,sys.stdin.readline().split()))\\n        temp = [x-1 for x in temp] \\n        t.append(temp[1:])\\n        \\n    for i in range(k):\\n        c = courses[i]\\n        if used[c]:\\n            continue\\n        \\n        q = [c]        \\n        visited[c]=True\\n        while len(q)>0:\\n            cur = q[-1]\\n            if len(t[cur])!=0:\\n                s = t[cur].pop()\\n                if visited[s] and not used[s]:                    \\n                    print(-1)\\n                    return\\n                if used[s]:\\n                    continue                \\n                q.append(s)\\n                visited[s]=True\\n            else:\\n                ans.append(cur)\\n                q.pop()\\n                used[cur] = True\\n\\n    ans = [str(x+1) for x in ans] \\n    print(len(ans))\\n    print(\\\" \\\".join(ans))\\n\\nmain()\", \"import collections as col\\nimport itertools as its\\nimport sys\\nimport operator\\nfrom copy import copy, deepcopy\\n\\n\\nclass Solver:\\n    def __init__(self):\\n        pass\\n    \\n    def solve(self):\\n        n, k = list(map(int, input().split()))\\n        q = list([int(x) - 1 for x in input().split()])\\n        used = [False] * n\\n        for e in q:\\n            used[e] = True\\n        edges = [[] for _ in range(n)]\\n        redges = [[] for _ in range(n)]\\n        for i in range(n):\\n            l = list([int(x) - 1 for x in input().split()])[1:]\\n            edges[i] = l\\n            for e in l:\\n                redges[e].append(i)\\n        degs = [len(edges[i]) for i in range(n)]\\n        d = 0\\n        while d < len(q):\\n            v = q[d]\\n            d += 1\\n            for e in edges[v]:\\n                if not used[e]:\\n                    used[e] = True\\n                    q.append(e)\\n        q = q[::-1]\\n        nq = []\\n        for v in q:\\n            if degs[v] == 0:\\n                nq.append(v)\\n        d = 0\\n        while d < len(nq):\\n            v = nq[d]\\n            d += 1\\n            for e in redges[v]:\\n                if not used[e]:\\n                    continue\\n                degs[e] -= 1\\n                if degs[e] == 0:\\n                    nq.append(e)\\n        #print(nq)\\n        if len(q) != len(nq):\\n            print(-1)\\n            return\\n        print(len(nq))\\n        print(' '.join([str(x + 1) for x in nq]))\\n        \\n\\n\\ndef __starting_point():\\n    s = Solver()\\n    s.solve()\\n\\n__starting_point()\", \"\\nline1 = input().split(\\\" \\\")\\nn = int(line1[0])\\nk = int(line1[1])\\n\\nmain = list(map(int, input().split(\\\" \\\")))\\n\\nreqs = [None] * (n + 1) # [course_number : [dependency1, dependecy2, ...]]\\n\\nfor i in range(n):\\n    line = input().split(\\\" \\\")\\n    if int(line[0]) == 0:\\n        reqs[1 + i] = []\\n    else:\\n        curr_reqs = []\\n        for req in line[1:]:\\n            curr_reqs += [int(req)]\\n        reqs[1 + i] = curr_reqs\\n\\nres = []\\n\\n# print(reqs)\\nto_exit = False  # \\u0447\\u0442\\u043e\\u0431\\u044b \\u043f\\u043e \\u0444\\u0430\\u0441\\u0442\\u0443 \\u0432\\u044b\\u0445\\u043e\\u0434\\u0438\\u0442\\u044c \\u0438\\u0437 \\u0446\\u0438\\u043a\\u043b\\u043e\\u0432\\n\\ndef traverse(main_courses): # \\u0441\\u044e\\u0434\\u0430 \\u043f\\u0435\\u0440\\u0435\\u0434\\u0430\\u0435\\u0442\\u0441\\u044f \\u0441\\u0440\\u0430\\u0437\\u0443 \\u043c\\u0430\\u0441\\u0441\\u0438\\u0432\\n    nonlocal res,to_exit\\n    roots =[False] * (n+1)\\n    while main_courses and not to_exit: # \\u043f\\u043e\\u043a\\u0430 \\u043c\\u044d\\u0438\\u043d \\u043d\\u0435 \\u043f\\u0443\\u0441\\u0442\\u043e\\u0439 \\u0438 \\u043d\\u0435 \\u043d\\u0443\\u0436\\u043d\\u043e \\u043b\\u0438\\u0432\\u0430\\u0442\\u044c \\u0438\\u0437 \\u0446\\u0438\\u043a\\u043b\\u0430\\n        main_to_trav = main_courses.pop()\\n        if reqs[main_to_trav] == None:\\n            continue\\n        stack = [main_to_trav] # \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u044f\\u0435\\u043c \\u043a\\u043e\\u0440\\u0435\\u043d\\u044c \\u0434\\u0435\\u0440\\u0435\\u0432\\u0430 \\u0432 \\u0441\\u0442\\u044d\\u043a\\n        while len(stack) > 0 and not to_exit:\\n            to_traverse = stack.pop() # \\u0434\\u043e\\u0441\\u0442\\u0430\\u0435\\u043c \\u0438\\u0437 \\u0441\\u0442\\u044d\\u043a\\u0430 \\u0432\\u0435\\u0440\\u0448\\u0438\\u043d\\u0443 \\u043a\\u043e\\u0442\\u043e\\u0440\\u0443\\u044e \\u0445\\u043e\\u0442\\u0438\\u043c \\u043e\\u0431\\u043e\\u0439\\u0442\\u0438\\n            if reqs[to_traverse] is not None: # \\u0435\\u0441\\u043b\\u0438 \\u0435\\u0435 \\u0435\\u0449\\u0435 \\u043d\\u0435 \\u043e\\u0431\\u043e\\u0448\\u043b\\u0438\\n                childs = reqs[to_traverse]  # \\u0431\\u0435\\u0440\\u0435\\u043c \\u0434\\u0435\\u0442\\u0435\\u0439\\n                if len(childs) == 0: # \\u0435\\u0441\\u043b\\u0438 \\u0434\\u0435\\u0442\\u0435\\u0439 \\u043d\\u0435\\u0442 - \\u043e\\u0431\\u0445\\u043e\\u0434\\u0438\\u043c \\u0432\\u0435\\u0440\\u0448\\u0438\\u043d\\u0443\\n                    roots[to_traverse] = False\\n                    res.append(to_traverse)\\n                    reqs[to_traverse] = None # \\u043f\\u043e\\u043c\\u0435\\u0447\\u0430\\u0435\\u043c \\u0447\\u0442\\u043e \\u043f\\u0440\\u043e\\u0448\\u043b\\u0438 \\u0432\\u0435\\u0440\\u0448\\u0438\\u043d\\u0443\\n                else:\\n                    roots[to_traverse] = True\\n                    # print (roots)\\n                    stack.append(to_traverse) # \\u0435\\u0441\\u043b\\u0438 \\u0434\\u0435\\u0442\\u0438 \\u0435\\u0441\\u0442\\u044c - \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u044f\\u0435\\u043c \\u0441\\u043d\\u0430\\u0447\\u0430\\u043b\\u0430 \\u0441\\u0435\\u0431\\u044f \\u0432 \\u0441\\u0442\\u044d\\u043a(\\u0447\\u0442\\u043e\\u0431\\u044b \\u043e\\u0431\\u043e\\u0439\\u0442\\u0438 \\u043f\\u043e\\u0442\\u043e\\u043c), \\u043f\\u043e\\u0442\\u043e\\u043c \\u0434\\u0435\\u0442\\u0435\\u0439\\n\\n                    for child in childs:\\n                        if roots[child] == True:\\n                            print(-1)\\n                            to_exit = True\\n                            break\\n\\n                    stack += childs\\n                    reqs[to_traverse] = [] # \\u043f\\u043e\\u0441\\u043b\\u0435 \\u0442\\u043e\\u0433\\u043e \\u043a\\u0430\\u043a \\u0434\\u043e\\u0431\\u0430\\u0432\\u0438\\u043b\\u0438 \\u0434\\u0435\\u0442\\u0435\\u0439 - \\u043e\\u0431\\u043d\\u0443\\u043b\\u044f\\u0435\\u043c \\u0438\\u0445, \\u0447\\u0442\\u043e\\u0431\\u044b \\u0431\\u043e\\u043b\\u044c\\u0448\\u0435 \\u043d\\u0435 \\u0434\\u043e\\u0431\\u0430\\u0432\\u043b\\u044f\\u0442\\u044c\\n\\ntraverse(main)\\n\\nif not to_exit:\\n    print(len(res))\\n    print(' '.join(map(str, res)))\", \"def dfs(start_node, edges, colors, result):\\n    stack = [start_node]\\n    while stack:\\n        current_node = stack[-1]\\n        if colors[current_node] == 2:\\n            stack.pop()\\n            continue\\n        colors[current_node] = 1\\n        children = edges[current_node]\\n        if not children:\\n            colors[current_node] = 2\\n            result.append(stack.pop())\\n        else:\\n            child = children.pop()\\n            if colors[child] == 1:\\n                return False\\n            stack.append(child)\\n    return True\\n\\n\\ndef find_courses_sequence(member_of_node, find_nodes, edges):\\n    colors = [0] * member_of_node\\n    result = []\\n    for node in find_nodes:\\n        if not dfs(node, edges, colors, result):\\n            return []\\n    return result\\n\\n\\ndef __starting_point():\\n    n, k = map(int, input().split())\\n    main_courses = [int(c)-1 for c in input().split()]\\n    courses = dict()\\n    for index in range(n):\\n        courses[index] = [int(d)-1 for d in input().split()[1:]]\\n\\n    result = find_courses_sequence(n, main_courses, courses)\\n\\n    if result:\\n        print(len(result))\\n        for v in result:\\n            print(v+1, end=\\\" \\\")\\n    else:\\n        print(-1)\\n\\n__starting_point()\", \"f = lambda: map(int, input().split())\\ng = lambda: [[] for x in range(n)]\\nn, k = f()\\nn += 1\\n\\ns, p = [], list(f())\\nc, d = [0] * n, [0] * n\\nu, v = g(), g()\\n\\nfor x in range(1, n):\\n    t = list(f())\\n    m = t.pop(0)\\n    if m:\\n        c[x] = m\\n        v[x] = t\\n        for y in t: u[y].append(x)\\n    else:\\n        s.append(x)\\n        d[x] = 1\\nwhile s:\\n    x = s.pop()\\n    for y in u[x]:\\n        c[y] -= 1\\n        d[y] = max(d[y], d[x] + 1)\\n        if c[y] == 0: s.append(y)\\n\\nif any(c[x] for x in p):\\n    print(-1)\\n    return\\n\\nq = [0] * n\\nwhile p:\\n    x = p.pop()\\n    if q[x] == 0:\\n        p += v[x]\\n        q[x] = 1\\n\\np = sorted((d[x], x) for x in range(n) if q[x])\\nprint(len(p))\\nfor d, x in p: print(x)\", \"#This code is dedicated to Vlada S.\\n\\nclass Course:\\n\\tdef __init__(self, reqs, number):\\n\\t\\tself.reqs = list(map(int, reqs.split()[1:]))\\n\\t\\tself.available = False\\n\\t\\tself.in_stack = False\\n\\t\\tself.number = number\\n\\nn, k = list(map(int, input().split()))\\nrequirements = list(map(int, input().split()))\\ncourses = {}\\n\\nanswer = \\\"\\\"\\n\\nfor i in range(n):\\n\\tcourses[i + 1]= Course(input(), i + 1)\\n\\nfor i in range(len(requirements)):\\n\\trequirements[i] = courses[requirements[i]]\\n\\nwhile requirements:\\n\\tdata = {}\\n\\n\\tcourse = requirements.pop()\\n\\n\\tif not course.available:\\n\\t\\trequirements.append(course)\\n\\n\\t\\tdone = True\\n\\n\\t\\tfor c in course.reqs:\\n\\t\\t\\tc = courses[c]\\n\\n\\t\\t\\tif not c.available:\\n\\t\\t\\t\\trequirements.append(c)\\n\\t\\t\\t\\tdone = False\\n\\n\\t\\tif done:\\n\\t\\t\\tanswer += \\\" \\\" + str(course.number)\\n\\t\\t\\tcourse.available = True\\n\\t\\telse:\\n\\t\\t\\tif course.in_stack:\\n\\t\\t\\t\\tprint(-1)\\n\\t\\t\\t\\tbreak\\n\\n\\t\\t\\tcourse.in_stack = True\\nelse:\\n\\tprint(answer.count(\\\" \\\"))\\n\\tprint(answer[1:])\\n\\n\\n\\n# Made By Mostafa_Khaled\\n\", \"import sys\\nflag=True\\nsys.setrecursionlimit(2000000000)\\nc=[];st=[];\\ncur_adj=[]\\ndef topo(s):#Traversing the array and storing the vertices\\n    nonlocal c,st,flag;\\n    stack = [s]\\n    while(stack):\\n        s = stack[-1]\\n        c[s]=1; #Being Visited\\n        if(cur_adj[s] < len(adjli[s])):\\n            cur = adjli[s][cur_adj[s]]\\n            if(c[cur]==0):\\n                stack.append(cur)\\n            if(c[cur]==1):\\n                flag=False# If Back Edge , Then Not Possible\\n            cur_adj[s]+=1\\n        else:\\n            c[s]=2\\n            st.append(str(s))\\n            del stack[-1]\\n\\ntry:\\n    n,k=map(int,input().split(' '))\\n    main=list(map(int,input().split(' ')))\\n    depen=[]\\n    for i in range(n):\\n    \\tdepen.append(list(map(int,input().split(' ')))[1:]);c.append(0)\\n    \\tcur_adj.append(0)\\n    c.append(0)\\n    cur_adj.append(0)\\n    adjli=[]\\n    adjli.append(main)#Assuming Main Course at index 0 with dependencies as Main Dependency(main)\\n    for i in range(len(depen)):\\n        adjli.append(depen[i])#Appending Other Dependencies\\n    topo(0)#TopoLogical Sort Order\\n    st.pop(-1)#popping the assumed Main Couse\\n    if flag:# IF possible then print\\n        print(len(st))\\n        print(' '.join(st))\\n    else:\\n        print(-1)\\nexcept Exception as e:\\n    print(e,\\\"error\\\")\", \"'''import sys\\nflag=True\\nsys.setrecursionlimit(2000000)\\nc=[];st=[];\\ndef topo(s):#Traversing the array and storing the vertices\\n\\tnonlocal c,st,flag;\\n\\tc[s]=1; #Being Visited\\n\\tfor i in adjli[s]:#visiting neighbors\\n\\t\\tif c[i]==0:\\n\\t\\t\\ttopo(i)\\n\\t\\tif c[i]==1:\\n\\t\\t\\tflag=False# If Back Edge , Then Not Possible\\n\\tst.append(str(s))\\n\\tc[s]=2 # Visited\\n\\ntry:\\n\\tn,k=map(int,input().split(' '))#Number Of Courses,Dependencies\\n\\tmain=list(map(int,input().split(' ')))#Main Dependencies\\n\\tdepen=[]#Dependencies List\\n\\tfor i in range(n):\\n\\t\\tdepen.append(list(map(int,input().split(' ')))[1:]);c.append(0)#Append Input To Dependencies List, Marking Visited as 0(False)\\n\\tc.append(0)\\n\\tadjli=[]\\n\\tadjli.append(main)#Assuming Main Course at index 0 with dependencies as Main Dependency(main)\\n\\tfor i in range(len(depen)):\\n\\t\\tadjli.append(depen[i])#Appending Other Dependencies\\n\\ttopo(0)#TopoLogical Sort Order\\n\\tst.pop(-1)#popping the assumed Main Couse\\n\\tif flag:# IF possible then print\\n\\t\\tprint(len(st))\\n\\t\\tprint(' '.join(st))\\n\\telse:\\n\\t\\tprint(-1)\\nexcept Exception as e:\\n\\tprint(e,\\\"error\\\")'''\\n\\nimport sys\\nflag=True\\nsys.setrecursionlimit(2000000000)\\nc=[];st=[];\\ncur_adj=[]\\ndef topo(s):#Traversing the array and storing the vertices\\n    nonlocal c,st,flag;\\n    stack = [s]\\n    while(stack):\\n        s = stack[-1]\\n        c[s]=1; #Being Visited\\n        if(cur_adj[s] < len(adjli[s])):\\n            cur = adjli[s][cur_adj[s]]\\n            if(c[cur]==0):\\n                stack.append(cur)\\n            if(c[cur]==1):\\n                flag=False# If Back Edge , Then Not Possible\\n            cur_adj[s]+=1\\n        else:\\n            c[s]=2\\n            st.append(str(s))\\n            del stack[-1]\\n\\ntry:\\n    n,k=map(int,input().split(' '))\\n    main=list(map(int,input().split(' ')))\\n    depen=[]\\n    for i in range(n):\\n        depen.append(list(map(int,input().split(' ')))[1:]);c.append(0)\\n        cur_adj.append(0)\\n    c.append(0)\\n    cur_adj.append(0)\\n    adjli=[]\\n    adjli.append(main)#Assuming Main Course at index 0 with dependencies as Main Dependency(main)\\n    for i in range(len(depen)):\\n        adjli.append(depen[i])#Appending Other Dependencies\\n    topo(0)#TopoLogical Sort Order\\n    st.pop(-1)#popping the assumed Main Couse\\n    if flag:# IF possible then print\\n        print(len(st))\\n        print(' '.join(st))\\n    else:\\n        print(-1)\\nexcept Exception as e:\\n    print(e,\\\"error\\\")\", \"# https://codeforces.com/problemset/problem/770/C\\nn, k = list(map(int, input().split()))\\nK    = set(list(map(int, input().split())))\\ng    = {}\\nrg   = {}\\ndeg  = {}\\n\\ndef push_d(deg, u, val):\\n    if u not in deg:\\n        deg[u] = 0\\n    deg[u] += val\\n\\ndef push_g(g, u, v):\\n    if u not in g:\\n        g[u] = []\\n    g[u].append(v)\\n    \\nfor u in range(1, n+1):\\n    list_v = list(map(int, input().split()))[1:]\\n    deg[u] = 0\\n    \\n    for v in list_v:\\n        push_d(deg, u, 1)\\n        push_g(g,  v, u)\\n        push_g(rg, u, v)\\n        \\nS    = [x for x in K]\\nused = [0] * (n+1) \\ni = 0\\nwhile i<len(S):\\n    u = S[i]\\n    if u in rg:\\n        for v in rg[u]:\\n            if used[v] == 0:\\n                used[v] = 1\\n                S.append(v)\\n    i+=1\\n    \\nS    = {x:1 for x in S}    \\ndeg0 = [x for x in S if deg[x]==0]\\nans  = []\\n\\ndef process(g, deg, deg0, u):\\n    if u in g:\\n        for v in g[u]:\\n            if v in S:\\n                push_d(deg, v, -1)\\n        \\n                if deg[v] == 0:\\n                    deg0.append(v)\\n    \\nwhile len(deg0) > 0 and len(K) > 0:\\n    u = deg0.pop()\\n    ans.append(u)\\n    \\n    if u in K:\\n        K.remove(u)\\n        \\n    process(g, deg, deg0, u)    \\n    \\nif len(K) > 0:\\n    print(-1)\\nelse:\\n    print(len(ans))\\n    print(' '.join([str(x) for x in ans])) \\n    \\n#6 2\\n#5 6\\n#0\\n#1 1\\n#1 4 5\\n#2 2 1\\n#1 4\\n#2 5 3    \\n\", \"n,k=list(map(lambda x: int(x), input().split()))\\nm=list(map(lambda x: int(x), input().split()))\\nfrom types import GeneratorType\\ndef bootstrap(f, stack=[]):\\n    def wrappedfunc(*args, **kwargs):\\n        if stack:\\n            return f(*args, **kwargs)\\n        else:\\n            to = f(*args, **kwargs)\\n            while True:\\n                if type(to) is GeneratorType:\\n                    stack.append(to)\\n                    to = next(to)\\n                else:\\n                    stack.pop()\\n                    if not stack:\\n                        break\\n                    to = stack[-1].send(to)\\n            return to\\n\\n    return wrappedfunc\\nclass Graph:\\n\\n    def __init__(self, V):\\n        self.V = V\\n        self.adj = [[] for i in range(V)]\\n    @bootstrap\\n    def DFSUtil(self, temp, v, visited):\\n\\n        visited[v] = True\\n\\n\\n\\n        for i in self.adj[v]:\\n            if visited[i] == False:\\n                yield self.DFSUtil(temp, i, visited)\\n\\n        temp.append(v)\\n        yield temp\\n\\n    def addEdge(self, v, w):\\n        self.adj[v].append(w)\\n        # self.adj[w].append(v)\\n    @bootstrap\\n    def isCyclicUtil(self, v, visited, recStack):\\n\\n        # Mark current node as visited and\\n        # adds to recursion stack\\n        visited[v] = True\\n        recStack[v] = True\\n\\n        # Recur for all neighbours\\n        # if any neighbour is visited and in\\n        # recStack then graph is cyclic\\n        for neighbour in self.adj[v]:\\n            if visited[neighbour] == False:\\n                ans =yield self.isCyclicUtil(neighbour, visited, recStack)\\n                if  ans == True:\\n                    yield True\\n            elif recStack[neighbour] == True:\\n                yield True\\n\\n        # The node needs to be poped from\\n        # recursion stack before function ends\\n        recStack[v] = False\\n        yield False\\n\\n    # Returns true if graph is cyclic else false\\n    def isCyclic(self,nodes):\\n        visited = [False] * self.V\\n        recStack = [False] * self.V\\n        for node in nodes:\\n            if visited[node] == False:\\n                if self.isCyclicUtil(node, visited, recStack) == True:\\n                    return True\\n        return False\\n\\n\\nG=Graph(n)\\n\\nfor i in range(0,n):\\n\\n    x=list(map(lambda x: int(x), input().split()))\\n    if x[0]==0:\\n        continue\\n    else:\\n        for k in range(1,x[0]+1):\\n            G.addEdge(i,x[k]-1)\\nvisited=[False for _ in range(n)]\\n\\npath=[]\\n# print(G.adj)\\nfor subj in m:\\n    temp = []\\n    if visited[subj-1]==False:\\n\\n        G.DFSUtil(temp,subj-1,visited)\\n\\n        path.extend(temp)\\nif G.isCyclic([x-1 for x in m]):\\n    print(-1)\\nelse:\\n    print(len(path))\\n    for p in path:\\n        print(p+1,end=\\\" \\\")\\n    print()\"]",
    "[\"import sys\\n\\n#f = open('input', 'r')\\nf = sys.stdin\\nn,k = list(map(int, f.readline().split()))\\na = list(map(int, f.readline().split()))\\naset = set(a)\\nst = []\\nfailed = False\\nai = 0\\napp = []\\nfor p in range(1, n+1):\\n  if p in aset:\\n    while ai < k and (len(st)==0 or st[-1]!=p):\\n      st.append(a[ai])\\n      ai += 1\\n    if len(st) == 0 or st[-1] != p:\\n      failed = True\\n      break\\n    st.pop(-1)\\n    a += app[::-1]\\n    app = []\\n  else:\\n    if ai != k:\\n      st += a[ai:k]\\n      ai = k\\n    app.append(p)\\n\\nif failed:\\n  print(-1)\\nelse:\\n  print(' '.join(map(str, a + app[::-1])))\\n\", \"import sys\\nn,k = [int(x) for x in input().split()]\\na = list(reversed([int(x)-1 for x in input().split()]))\\ns = []\\nb = []\\ngoal = 0\\n\\nused = [False]*(n)\\nfor node in a:\\n    used[node]=True\\n\\nsearch_from = -1\\nbig = n-1 \\nres = []\\nwhile goal!=n:\\n    while a:\\n        res.append(a[-1])\\n        s.append(a.pop())\\n        search_from = s[-1]-1\\n        if (len(s)>1 and s[-1]>s[-2]):\\n            print(-1)\\n            return\\n        while s and s[-1]==goal:\\n            goal += 1\\n            s.pop()\\n            if s:\\n                search_from = s[-1]-1\\n    if goal==n:\\n        break\\n    if len(s)==0:\\n        while big>=0 and used[big]:\\n            big-=1\\n        if big==-1:\\n            print(-1)\\n            return\\n        used[big]=True\\n        a.append(big)\\n    else:\\n        while search_from>=0 and used[search_from]:\\n            search_from-=1\\n        if search_from==-1:\\n            print(-1)\\n            return\\n        used[search_from]=True\\n        a.append(search_from)\\n        \\nprint(*[x+1 for x in res])\\n\", \"import sys\\n\\n\\ndef print_list(list):\\n    for i in list:\\n        print(i, end=\\\" \\\")\\n    print()\\n\\n\\nn, k = [int(i) for i in input().split(\\\" \\\")]\\nmy_list = [int(i) for i in input().split(\\\" \\\")]\\n\\nstack = list()\\n\\nnext_pop = 1\\n\\nfor num in my_list:\\n    if stack and stack[-1] < num:\\n        print(\\\"-1\\\")\\n        return\\n\\n    stack.append(num)\\n\\n    while stack and stack[-1] == next_pop:\\n        stack.pop()\\n        next_pop += 1\\n\\nwhile stack:\\n    for i in range(stack[-1] - 1, next_pop - 1, -1):\\n        my_list.append(i)\\n    next_pop = stack.pop() + 1\\n\\nif next_pop > n:\\n    print_list(my_list)\\nelse:\\n    for j in range(n, next_pop - 1, -1):\\n        my_list.append(j)\\n    print_list(my_list)\\n\", \"import math,string,itertools,fractions,heapq,collections,re,array,bisect,sys,random,time,copy,functools\\n\\nsys.setrecursionlimit(10**7)\\ninf = 10**20\\neps = 1.0 / 10**15\\nmod = 10**9+7\\n\\ndef LI(): return [int(x) for x in sys.stdin.readline().split()]\\ndef LI_(): return [int(x)-1 for x in sys.stdin.readline().split()]\\ndef LF(): return [float(x) for x in sys.stdin.readline().split()]\\ndef LS(): return sys.stdin.readline().split()\\ndef I(): return int(sys.stdin.readline())\\ndef F(): return float(sys.stdin.readline())\\ndef S(): return input()\\ndef pf(s): return print(s, flush=True)\\n\\n\\ndef main():\\n    n,k = LI()\\n    a = LI()\\n    r = a[:]\\n    s = []\\n    m = 1\\n    for c in a:\\n        if c == m:\\n            m += 1\\n            t = len(s)\\n            for i in range(t-1,-1,-1):\\n                if s[i] == m:\\n                    m += 1\\n                    t = i\\n                else:\\n                    break\\n            if t != len(s):\\n                s = s[:t]\\n        else:\\n            s.append(c)\\n    for i in range(len(s)-1):\\n        if s[i] < s[i+1]:\\n            return -1\\n\\n    for i in range(len(s)-1,-1,-1):\\n        c = s[i]\\n        r += list(range(c-1,m-1,-1))\\n        m = c+1\\n    r += list(range(n,m-1,-1))\\n\\n    return ' '.join(map(str,r))\\n\\nprint(main())\\n\\n\\n\", \"n, k = map(int, input().split(' '))\\np = list(map(int, input().split(' ')))\\n\\ni = 0\\ns = []\\ncur = 1\\nsolution = list(p)\\nwhile True:\\n    if len(s) > 0 and s[-1] == cur:\\n        cur += 1\\n        s.pop()\\n    elif i < len(p):\\n        if len(s) > 0 and p[i] > s[-1]:\\n            solution = [-1]\\n            break\\n        s.append(p[i])\\n        i += 1\\n    else:\\n        break\\n\\nif solution[0] != -1:\\n    while cur <= n:\\n        top = s.pop() if len(s) > 0 else n + 1\\n        solution.extend(reversed(range(cur, top)))\\n        cur = top + 1\\n        \\nprint(' '.join(str(x) for x in solution))\", \"import sys\\nf=sys.stdin\\nn,k=map(int,f.readline().split())\\ns,t=[n+1],1\\na=list(map(int,f.readline().split()))\\nfor i in range(n):\\n\\tif i>=k:\\n\\t\\ta+=[s[-1]-1]\\n\\ts+=[a[i]]\\n\\twhile (len(s)!=0) and (s[-1]==t):\\n\\t\\ts.pop()\\n\\t\\tt+=1\\nif len(s):\\n\\tprint('-1')\\nelse:\\n\\tprint(' '.join(str(x) for x in a))\", \"import sys\\nf=sys.stdin\\nn,k=map(int,f.readline().split())\\ns,t=[n+1],1\\na=list(map(int,f.readline().split()))\\nfor i in range(n):\\n\\tif i>=k:\\n\\t\\ta+=[s[-1]-1]\\n\\ts+=[a[i]]\\n\\twhile (len(s)!=0) and (s[-1]==t):\\n\\t\\ts.pop()\\n\\t\\tt+=1\\nif len(s):\\n\\tprint('-1')\\nelse:\\n\\tprint(' '.join(str(x) for x in a))\", \"import sys\\nf=sys.stdin\\nn,k=map(int,f.readline().split())\\ns,t=[n+1],1\\na=list(map(int,f.readline().split()))\\nfor i in range(n):\\n\\tif i>=k:\\n\\t\\ta+=[s[-1]-1]\\n\\ts+=[a[i]]\\n\\twhile (len(s)!=0) and (s[-1]==t):\\n\\t\\ts.pop()\\n\\t\\tt+=1\\nif len(s):\\n\\tprint('-1')\\nelse:\\n\\tprint(' '.join(str(x) for x in a))\", \"# https://codeforces.com/problemset/problem/911/E\\n\\nn, k = map(int, input().split())\\np    = list(map(int, input().split()))\\nd    = {x:1 for x in p}\\n\\ndef solve(p, d, n):\\n    add  = []\\n    s    = []\\n    \\n    for x in range(1, n+1):\\n        if x not in d:\\n            while len(p) > 0:\\n                s.append(p.pop(0))\\n                \\n                if len(s) >= 2 and s[-1] > s[-2]:\\n                    return False, None\\n                \\n            # len(p)=0\\n            if len(s) == 0 or s[-1] != x:\\n                up = n if len(s) == 0 else s[-1]-1\\n            \\n                for y in range(up, x-1, -1):\\n                    add.append(y)\\n                    s.append(y)\\n                    d[y]=1\\n            s.pop()\\n        else:\\n            if len(s) == 0 or s[-1] != x:\\n                while len(p) > 0:\\n                    s.append(p.pop(0))\\n                \\n                    if len(s) >= 2 and s[-1] > s[-2]:\\n                        return False, None\\n                \\n                    if s[-1] == x:\\n                        break\\n            s.pop()\\n    return True, add\\n\\nans =  [x for x in p]\\nflg, add = solve(p, d, n)\\nif flg==False:\\n    print(-1)\\nelse:\\n    print(' '.join([str(x) for x in ans+add]))\", \"import sys\\n \\nn,k = map(int,input().split())\\na = list(map(int,input().split()))\\nsetofa = set(a)\\ns = []\\nf= False\\nai = 0\\nans = []\\nfor i in range(1, n+1):\\n  if i in setofa:\\n    while ai < k and (len(s)==0 or s[-1]!=i):\\n      s.append(a[ai])\\n      ai += 1\\n    if len(s) == 0 or s[-1] != i:\\n      f = True\\n      break\\n    s.pop(-1)\\n    a += ans[::-1]\\n    ans = []\\n  else:\\n    if ai != k:\\n      s += a[ai:k]\\n      ai = k\\n    ans.append(i)\\n \\nif f:\\n  print(-1)\\nelse:\\n  print(' '.join(map(str, a + ans[::-1])))\"]",
    "[\"import sys\\na,b,c=map(int,input().split())\\nif c==0:\\n    if a==b:\\n        print('YES')\\n    else:\\n        print('NO')\\n    return\\nif (b-a)%c==0 and (b-a)//c>=0:\\n    print('YES')\\nelse:\\n    print('NO')\", \"a, b, c = list(map(int, input().split()))\\nif c != 0:\\n    if c * (b - a) >= 0 and (b - a) % c == 0:\\n        print('YES')\\n    else:\\n        print('NO')\\nelse:\\n    if b == a:\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"a, b, c = list(map(int, input().split()))\\n\\nif c != 0:\\n    n = (b - a) // c\\nelse:\\n    n = 0\\nprint([\\\"NO\\\", \\\"YES\\\"][(a + n * c == b) and (n >= 0)])\\n\", \"# You lost the game.\\na,b,c = list(map(int, input().split()))\\nif (c == 0 and b == a):\\n    print(\\\"YES\\\")\\nelif (c == 0):\\n    print(\\\"NO\\\")\\nelif (b-a) % c == 0 and ((c >= 0 and b >= a) or (c <= 0 and b <= a)):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"a, b, c = list(map(int, input().split()))\\nif c == 0:\\n    if b == a:\\n        print('YES')\\n    else:\\n        print('NO')\\nelse:\\n    if (b - a) % c == 0 and (b - a) // c >= 0:\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"a,b,c = map(int, input().split())\\n\\nif c == 0 :\\n    ans = (a == b)\\nelse :\\n    k = (b - a)//c\\n    ans = (k >= 0 and a + c*k == b)\\n\\nif ans :\\n    print(\\\"YES\\\")\\nelse :\\n    print(\\\"NO\\\")\", \"a, b, c= [int(i) for i in input().split()]\\nif (a < b and c<=0) or (a > b and c>=0):\\n\\tprint(\\\"NO\\\")\\nelse:\\n\\tif a == b:\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tif c == 0:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\telse:\\n\\t\\t\\tif (b-a)%c == 0:\\n\\t\\t\\t\\tprint(\\\"YES\\\")\\n\\t\\t\\telse:\\n\\t\\t\\t\\tprint(\\\"NO\\\")\\n\", \"#!/usr/bin/env python3\\nimport math\\na, b ,c = list(map(int, input().split()))\\nif (b > a and c <= 0) or (b < a and c >= 0): print('NO')\\nelif b == a: print('YES')\\nelse :\\n    print('YES' if abs(b - a) % abs(c) == 0 else 'NO')\\n\", \"a,b,c=map(int,input().split())\\nif c==0: \\n    print('YES' if b==a else 'NO')\\nelse:\\n     if (b-a)%c==0 and (b-a)//c>=0: print('YES')\\n     else: print('NO')\", \"a,b,c=[int(x) for x in input().split()]\\nif c==0:\\n    if b!=a:\\n        print(\\\"NO\\\")\\n    else:\\n        print(\\\"YES\\\")\\nelse:\\n    if c<0:\\n        c=-c\\n        d=a\\n        a=b\\n        b=d\\n    if b>=a and (b-a)%c==0:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\", \"a, b, c = map(int, input().split())\\nif c == 0 and b == a or c != 0 and (b - a) % c == 0 and (b - a) // c >= 0:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"a, b, c = list(map(int, input().split()))\\nif c > 0:\\n  if b >= a and a % c == b % c:\\n    print('YES')\\n  else:\\n    print('NO')\\nelif c == 0:\\n  if b == a:\\n    print('YES')\\n  else:\\n    print('NO')\\nelse:\\n  if b <= a and a % c == b % c:\\n    print('YES')\\n  else:\\n    print('NO')\\n\", \"a,b,c = list(map(int, input().split()))\\n \\nif b - a > 0 and c > 0:\\n    if (b - a) % c == 0:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nelif b - a < 0 and c < 0:\\n    if (b - a) % c == 0:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\nelif a - b == 0:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"a, b, c = list(map(int, input().split()))\\n\\nif((c == 0 and a == b) or (c > 0 and a % c == b % c and b >= a) or (c < 0 and\\n    a%c == b%c and b <= a)):\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\\n\", \"a, b, c = map(int, input().split())\\nif c == 0:\\n\\tif a == b:\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tprint(\\\"NO\\\")\\nelse:\\n\\td, r = divmod(b - a, c)\\n\\tif a == b:\\n\\t\\tprint(\\\"YES\\\")\\n\\telse:\\n\\t\\tif d < 1 or r != 0:\\n\\t\\t\\tprint(\\\"NO\\\")\\n\\t\\telse:\\n\\t\\t\\tprint(\\\"YES\\\")\", \"a,b,c = input().split()\\na = int(a)\\nb = int(b)\\nc = int(c)\\nif (a == b) or ((c > 0 and a < b or c < 0 and a > b) and a % c == b % c):\\n    print('YES')\\nelse:\\n    print('NO')\\n\", \"a,b,c=list(map(int,input().split()))\\n\\nif c==0:\\n    if a==b:\\n        print('YES')\\n    else:\\n        print('NO')\\nelse:\\n    k=(b-a)/c\\n    if int(k)-k==0.0 and k>=0:\\n        print(\\\"YES\\\")\\n    else:\\n        print('NO')\\n\", \"a, b, c = list(map(int, input().split()))\\nif c == 0:\\n    print(\\\"YES\\\" if a == b else \\\"NO\\\")\\nelse:\\n    print(\\\"YES\\\" if (b - a + c) % c == 0 and (b - a + c) // c > 0 else \\\"NO\\\")\\n\", \"#!/usr/bin/env python3\\n\\ndef main():\\n    a, b, c = [int(x) for x in input().split()]\\n    if a == b:\\n        print('YES')\\n    elif c == 0:\\n        print('YES' if (b == a) else 'NO')\\n    else:\\n        n = (b - a) // abs(c)\\n        x = (b - a) % abs(c)\\n        print('YES' if x == 0 and n * c > 0 else 'NO')\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\", \"#!/usr/bin/env python3\\n\\ntry:\\n    while True:\\n        a, b, c = list(map(int, input().split()))\\n        if c == 0:\\n            print(\\\"YES\\\" if a == b else \\\"NO\\\")\\n        elif c > 0:\\n            print(\\\"YES\\\" if b in range(a, int(1e10), c) else \\\"NO\\\")\\n        else:\\n            print(\\\"YES\\\" if b in range(a, int(-1e10), c) else \\\"NO\\\")\\n\\nexcept EOFError:\\n    pass\\n\", \"a,b,c = list(map(int,input().split()))\\nif c == 0:\\n    if b == a:\\n        print('YES')\\n    else:\\n        print('NO')\\nelif c > 0:\\n    if b < a:\\n        print('NO')\\n    else:\\n        if a%c == b%c:\\n            print('YES')\\n        else:\\n            print('NO')\\nelse:\\n    if b > a:\\n        print('NO')\\n    else:\\n        if a%c == b%c:\\n            print('YES')\\n        else:\\n            print('NO')\\n\", \"a,b,c=map(int,input().split())\\nif c == 0:\\n    print(\\\"YES\\\" if b-a == c else \\\"NO\\\")\\nelif (b-a) % c == 0 and (b-a) / c >= 0:\\n    print(\\\"YES\\\")\\nelse:\\n    print(\\\"NO\\\")\", \"a, b, c = map(int, input().split())\\nif (c and not (a - b) % c and max(a + c, b) - min(b, a + c) < max(a, b) - min(a, b)) or (a == b):\\n    print('YES')\\nelse:\\n    print('NO')\", \"read = lambda: list(map(int, input().split()))\\na, b, c = read()\\nif c == 0 and (b == a): ans = 'YES'\\nelif c != 0 and (b - a) % c == 0:\\n    if c > 0 and b >= a: ans = 'YES'\\n    elif c < 0 and b <= a: ans = 'YES'\\n    else: ans = 'NO'\\nelse: ans = 'NO'\\nprint(ans)\\n\"]",
    "[\"cnt1 = int(input())\\ncnt2 = int(input())\\ncnt3 = int(input())\\ncnt4 = int(input())\\nif cnt1 != cnt4:\\n\\tprint(0)\\n\\treturn\\n\\nif (cnt3 != 0 and cnt1 == 0):\\n\\tprint(0)\\n\\treturn\\n\\nprint(1)\", \"cnt = [int(input()) for _ in range(4)]\\n\\nif cnt[0] != cnt[3]:\\n\\tprint(0)\\nelif cnt[2] > 0 and cnt[0] == 0:\\n\\tprint(0)\\nelse:\\n\\tprint(1)\\n\", \"a = int(input())\\ninput()\\nc = int(input())\\nb = int(input())\\nif c :\\n  print(int(a == b and a > 0))\\nelse:\\n  print(int(a == b))\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\n\\nf = True\\nk = 2 * a\\nif c:\\n    if k < 1:\\n        print(0)\\n    else:\\n        if k == 2 * d:\\n            print(1)\\n        else:\\n            print(0)\\nelse:\\n    if k == 2 * d:\\n        print(1)\\n    else:\\n        print(0)\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4:\\n    print(0)\\nelif c1 == 0 and c3 > 0:\\n    print(0)\\nelse:\\n    print(1)\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\n\\nres = 1\\nif c1 != c4:\\n    res = 0\\nelif c3 > 0 and c1 == 0:\\n    res = 0\\n\\nprint(res)\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nif a == d and (a > 0 and c > 0 or c == 0):\\n    print(1)\\nelse:\\n    print(0)\\n\", \"mi = lambda: [int(i) for i in input().split()]\\nc1, c2, c3, c4 = int(input()), int(input()), int(input()), int(input())\\n\\nif c1 != c4:\\n    print(0)\\n    return\\n\\nif c3 != 0 and c1 == 0:\\n    print(0)\\n    return\\n\\nprint(1)\\n\", \"def main():\\n    a, b, c, d = (int(input()) for i in range(4))\\n    if (a == d == 0):\\n        if (c == 0):\\n            print(1)\\n        else:\\n            print(0)\\n    elif (a == d):\\n        print(1)\\n    else:\\n        print(0)\\n \\n \\nmain()\\n\", \"cnt1=int(input())\\ncnt2=int(input())\\ncnt3=int(input())\\ncnt4=int(input())\\n\\nif cnt1 == cnt4 and cnt1 > 0:\\n    print(1)\\n    return\\nif cnt1 == cnt4 and cnt3 == 0:\\n    print(1)\\n    return\\nprint(0)\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4:\\n    print(0)\\n    return\\nif c3 != 0 and c1 == 0:\\n    print(0)\\nelse:\\n    print(1)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nfl, cnt = 0, 0\\nif a == d and (a != 0 or c == 0):\\n    print(1)\\nelse:\\n    print(0)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nif a==d and (a>0 or c==0):\\n    print(1)\\nelse:\\n    print(0)\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 == c4:\\n    if c3 > 0 and c1 == 0:\\n        print(0)\\n    else:\\n        print(1)\\nelse:\\n    print(0)\\n\", \"#      \\nimport collections, atexit, math, sys, bisect \\n\\nsys.setrecursionlimit(1000000)\\n\\nisdebug = False\\ntry :\\n    #raise ModuleNotFoundError\\n    import pylint\\n    import numpy\\n    def dprint(*args, **kwargs):\\n        #print(*args, **kwargs, file=sys.stderr)\\n        # in python 3.4 **kwargs is invalid???\\n        print(*args,  file=sys.stderr)\\n    dprint('debug mode')\\n    isdebug = True\\nexcept Exception:\\n    def dprint(*args, **kwargs):\\n        pass\\n\\n\\ndef red_inout():\\n    inId = 0\\n    outId = 0\\n    if not isdebug:\\n        inId = 0\\n        outId = 0\\n    if inId>0:\\n        dprint('use input', inId)\\n        try:\\n            f = open('input'+ str(inId) + '.txt', 'r')\\n            sys.stdin = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid input file')\\n    if outId>0:\\n        dprint('use output', outId)\\n        try:\\n            f = open('stdout'+ str(outId) + '.txt', 'w')\\n            sys.stdout = f #\\u6807\\u51c6\\u8f93\\u51fa\\u91cd\\u5b9a\\u5411\\u81f3\\u6587\\u4ef6\\n        except Exception:\\n            dprint('invalid output file')\\n            \\n        atexit.register(lambda :sys.stdout.close())     #idle \\u4e2d\\u4e0d\\u4f1a\\u6267\\u884c atexit\\n\\nif isdebug and len(sys.argv) == 1:\\n    red_inout()\\n\\ndef getIntList():\\n    return list(map(int, input().split()))            \\n\\ndef solve(): \\n    pass\\n    \\nT_ = 1    \\n#T_, = getIntList()\\n\\nfor iii_ in range(T_):\\n    #solve()\\n    a,  = getIntList()\\n    b,  = getIntList()\\n    c,  = getIntList()\\n    d,  = getIntList()\\n    if a!=d:\\n        print(0)\\n        continue\\n    if c>0 and a==0:\\n        print(0)\\n        continue\\n    print(1)\\n    \\n\\n\\n\\n\\n\\n\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4 or (c3 != 0 and c1 == 0):\\n    print(0)\\nelse:\\n    print(1)\\n\", \"def A():\\n    cnt1 = int(input())\\n    cnt2 = int(input())\\n    cnt3 = int(input())\\n    cnt4 = int(input())\\n\\n    if(cnt4!=cnt1):\\n        print(0)\\n        return\\n    if(cnt3>0 and cnt1==cnt4==0):\\n        print(0)\\n        return\\n    print(1)\\nA()\\n\", \"from collections import defaultdict as dd\\nimport math\\ndef nn():\\n\\treturn int(input())\\n\\ndef li():\\n\\treturn list(input())\\n\\ndef mi():\\n\\treturn list(map(int, input().split()))\\n\\ndef lm():\\n\\treturn list(map(int, input().split()))\\n\\n\\nc1=nn()\\nc2=nn()\\nc3=nn()\\nc4=nn()\\n\\nif not c1==c4:\\n\\tprint(0)\\nelif c1==0 and not c3==0:\\n\\tprint(0)\\nelse:\\n\\tprint(1)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\n\\nif a==0 and d==0:\\n    if c==0:\\n        print(1)\\n    else:\\n        print(0)\\nelse:\\n    if a==d:\\n        print(1)\\n    else:\\n        print(0)\", \"a = int(input())\\nint(input())\\nc = int(input())\\nd = int(input())\\nprint(1 - int(a != d or (a == 0 and not (a == c == d))))\\n\", \"c1 = int(input())\\nc2 = int(input())\\nc3 = int(input())\\nc4 = int(input())\\nif c1 != c4:\\n    print(0)\\nelif c1 == 0 and c3 > 0:\\n    print(0)\\nelse:\\n    print(1)\\n\", \"a = int(input())\\nb = int(input())\\nc = int(input())\\nd = int(input())\\nprint(1 if a == d and (c == 0 or (a > 0 and d > 0)) else 0)\\n\", \"import sys\\nfrom math import *\\n\\ndef minp():\\n\\treturn sys.stdin.readline().strip()\\n\\ndef mint():\\n\\treturn int(minp())\\n\\ndef mints():\\n\\treturn list(map(int, minp().split()))\\n\\na = [0]*4\\nfor i in range(4):\\n\\ta[i] = mint()\\nif a[0]-a[3] != 0 or a[0] == 0 and a[2] > 0:\\n\\tprint(0)\\nelse:\\n\\tprint(1)\\n\", \"a=int(input())\\nb=int(input())\\nc=int(input())\\nd=int(input())\\nif(c==0):\\n\\tif(a!=d):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tprint(1)\\nelse:\\n\\tif(a==0 or d==0):\\n\\t\\tprint(0)\\n\\telse:\\n\\t\\tif(a!=d):\\n\\t\\t\\tprint(0)\\n\\t\\telse:\\n\\t\\t\\tprint(1)\\n\", \"def solve(c1, c2, c3, c4):\\n    if c1 != c4:\\n        return 0\\n    if c3 != 0 and c1 == 0:\\n        return 0\\n    return 1\\n\\n\\ndef main() -> None:\\n    c1 = int(input())\\n    c2 = int(input())\\n    c3 = int(input())\\n    c4 = int(input())\\n    print(solve(c1, c2, c3, c4))\\n\\n\\ndef __starting_point():\\n    main()\\n\\n__starting_point()\"]",
    "[\"def read_ints():\\n\\treturn [int(i) for i in input().split()]\\n\\nn, k, t = read_ints()\\nif t <= k:\\n\\tprint(t)\\nelif t > n:\\n\\tprint(k + n - t)\\nelse:\\n\\tprint(k)\", \"def list_input():\\n    return list(map(int,input().split()))\\ndef map_input():\\n    return map(int,input().split())\\ndef map_string():\\n    return input().split()\\n    \\nn,k,t = map_input()\\nif t <= k:\\n  print(t)\\nelif t <= n:\\n  print(k)\\nelse:\\n  print(k+n-t)\", \"n,k,t = map(int,input().split())\\nif(t <= k):\\n\\tprint(t)\\nelif(t >= n+1):\\n\\tprint(n+k-t)\\nelse:\\n\\tprint(k)\", \"n, k, t = list(map(int, input().split()))\\nif t <= k:\\n\\tprint(t)\\nelif k < t <= n:\\n\\tprint(k)\\nelse:\\n\\tprint(k - t + n)\", \"n, k, t = map(int, input().split())\\nif t <= n:\\n    print(min(t, k))\\nelse:\\n    print(k - t + n)\", \"n,k,t = [int(i) for i in input().split()]\\nif t < k:\\n    print(t)\\nelif t > n:\\n    print(k-t+n)\\nelse:\\n    print(k)\", \"n, k, t = map(int, input().split())\\nif t < k:\\n    print(t)\\nelse:\\n    print(k - max(t - n, 0))\", \"n,k,t = map(int, input().split())\\nif t >= k and t <= n:\\n    print(k)\\nelif t < k:\\n    print(t)\\nelse:\\n    print(k - (t - n))\", \"from sys import stdin, stdout\\n\\nn,k,t = list(map(int,stdin.readline().rstrip().split()))\\n\\nprint(max([min([n,t])-max([0,t-k]),0]))\\n\", \"import sys\\n\\nn, k, t = [int(d) for d in sys.stdin.readline().split()]\\nif t < k:\\n    print(t)\\nelif t > n:\\n    print(n+k-t)\\nelse:\\n    print(k)\\n\", \"n, k, t = [int(i) for i in input().split()]\\nif t < k:\\n    print(t)\\n    return\\nif n + 1 <= t:\\n    print(n + k - t)\\n    return\\nprint(k)\", \"n, k, t = map(int, input().split())\\n\\nif t <= k:\\n\\tprint(t)\\nelif t >= n:\\n\\tprint(n+k-t)\\nelse:\\n\\tprint(k)\", \"N, K, T = list(map(int, input().split()))\\n\\nif T < K:\\n    print(T)\\nelif N < T:\\n    print(N+K-T)\\nelse:\\n    print(K)\\n\", \"n,k,t=list(map(int,input().split()))\\nif (t<=k):\\n    print(t)\\nelse:\\n    if (t <=n):\\n        print(k)\\n    else:\\n        print(n+k-t)\\n\", \"n,k,t=list(map(int,input().split()))\\nif t>=k and t<=n:\\n    print(k)\\nelse:\\n    if t<k:\\n        print(t)\\n    else:\\n        print(k-(t-n))\\n\", \"n, k, t = list(map(int, input().split()))\\n\\nif t < k:\\n    print(t)\\nelif t >= k and t <= n:\\n    print(k)\\nelse:\\n    print(k - t + n)\\n\", \"n, k, t = map(int, input().split())\\nif t <= k:\\n    print(t)\\nelif t <= n:\\n    print(k)\\nelse:\\n    print(k - (t - n))\", \"n,k,t = map(int,input().split())\\nif t <= k:\\n  res = t\\nelif t <= n:\\n  res = k\\nelse:\\n  res = (n+k) - t\\nprint(res)\", \"n,k,t=map(int, input().split())\\nif(t<k):\\n  print(t)\\nelif(t<=n and t>=k):\\n  print(k)\\nelse:\\n  print(k-(t-n))\", \"n, k, t = list(map(int, input().split(' ')))\\n\\ndef main():\\n    if t < k:\\n        return t\\n    elif k <= t <= n:\\n        return k\\n    else:\\n        return n + k - t\\n\\nprint(main())\\n\", \"n, k, t = map(int, input().split())\\nif t <= k :\\n    print(t)\\nelif t > n:\\n    print(k - t + n)\\nelse:\\n    print(k)\", \"n,k,t = list(map(int, input().split()))\\nif t < k:\\n  print(t)\\nelif t > n:\\n  print(max(0, k-t+n))\\nelse:\\n  print(k)\\n\\n\", \"n, k, t = map(int, input().split())\\n\\nif t < k:\\n    print(t)\\nelif t > n:\\n    print(max(0, k - (t - n)))\\nelse:\\n    print(k)\", \"n, k, t = list(map(int, input().split()))\\nif t<=k:\\n    print(t)\\nelif t<=n:\\n    print(k)\\nelse:\\n    print(k - (t - n))\\n\", \"n,t,k = map(int,input().split())\\n\\nif(t>k):\\n    print(k)\\nelif(k>n):\\n    print(t-(k-n))\\nelse:\\n    print(t)\"]",
    "[\"from collections import deque\\nS = input()\\nmn = [ 300 for i in range( len( S ) ) ]\\nfor i in range( len( S ) - 1, -1, -1 ):\\n  if i == len( S ) - 1:\\n    mn[ i ] = ord( S[ i ] )\\n  else:\\n    mn[ i ] = min( mn[ i + 1 ], ord( S[ i ] ) )\\nans = \\\"\\\"\\ndq = deque()\\nfor i in range( len( S ) ):\\n  dq.append( ord( S[ i ] ) )\\n  while len( dq ) and ( i + 1 == len( S ) or dq[ len( dq ) - 1 ] <= mn[ i + 1 ] ):\\n    ans += chr( dq[ len( dq ) - 1 ] )\\n    dq.pop()\\nprint( ans )\\n\", \"from collections import defaultdict\\n\\ns = input()\\ns = [x for x in s]\\n\\nt, u = [], []\\n\\nds = defaultdict(int)\\n\\nfor c in s:\\n    ds[c] += 1\\n\\ncurr_letter_index = ord('a')\\ncurr_poz_in_s = 0\\n\\nwhile curr_letter_index <= ord('z'):\\n    curr_letter = chr(curr_letter_index)\\n\\n    if len(t) > 0 and ord(t[-1]) <= ord(curr_letter):\\n        letter = t.pop()\\n        u.append(letter)\\n    else:\\n        if ds[curr_letter] > 0:\\n            letter = s[curr_poz_in_s]\\n            curr_poz_in_s += 1\\n            t.append(letter)\\n            ds[letter] -= 1\\n        else:\\n            curr_letter_index += 1\\n\\nt.reverse()\\nprint(\\\"\\\".join(u + t))\\n\", \"s = input()\\nm = ['z' for i in range(len(s))]\\nm[-1] = s[-1]\\nc = s[-1]\\nfor i in range(len(s) - 2, -1, -1):\\n    if s[i] < c:\\n        c = s[i]\\n    m[i] = c\\nind = m.index(min(m))\\nl = []\\nres = ''\\nfor i in range(len(s)):\\n    while l and l[-1] <= m[i]:\\n        res += l.pop()\\n    l.append(s[i])\\nprint(res + ''.join(map(str, (l[::-1]))))\\n\", \"from queue import deque\\n\\ndp = {}\\n\\ndef sol_1():\\n    idx = 0\\n    while True:\\n        min_idx = get_min_char_idx(s, idx)\\n        if min_idx == -1:\\n            break\\n        if len(t) > 0 and ord(t[-1]) <= ord(s[min_idx]):\\n            # we need to take t\\n            u.append(t.pop())\\n        else:\\n            # take up to min_idx\\n            t.extend(s[idx:min_idx+1])\\n            idx = min_idx+1\\n\\ndef efficient_sol():\\n    nonlocal u, t, s\\n    import string\\n    indices = {char: [] for char in string.ascii_lowercase}  # will hold indices for each char\\n\\n    # fill indices\\n    for idx, char in enumerate(s):\\n        indices[char].append(idx)\\n\\n    curr_idx = 0\\n    for char in string.ascii_lowercase:\\n        if curr_idx == len(s):\\n            break\\n        if len(t) > 0 and ord(char) >= ord(t[-1]):\\n            # We've started searching for bigger characters, so we need to empty the smaller ones first\\n            while len(t) > 0 and ord(char) >= ord(t[-1]):\\n                u.append(t.pop())\\n\\n        for idx in sorted(indices[char]):\\n            if curr_idx == len(s):\\n                return\\n            min_idx = idx\\n            if min_idx < curr_idx:\\n                # we've passed this character\\n                continue\\n            elif min_idx == curr_idx:\\n                if len(t) > 0 and ord(char) > ord(t[-1]):\\n                    raise Exception()\\n                # we are at that character, so just add it\\n                u.append(char)\\n                curr_idx += 1\\n                continue\\n            # mid_idx is bigger, so we put everything up until this character in T\\n            # then, add the character himself\\n            t.extend(s[curr_idx:min_idx])\\n            u.append(char)\\n            curr_idx = min_idx + 1\\n    while curr_idx < len(s):\\n        pass\\n\\ndef get_min_char_idx(s: str, start_idx: int):\\n    nonlocal dp\\n    if start_idx >= len(s):\\n        return -1\\n    if start_idx in dp:\\n        return dp[start_idx]\\n    min_char = s[start_idx]\\n    min_idx = start_idx\\n    while start_idx < len(s):\\n        if ord(s[start_idx]) < ord(min_char):\\n            min_char = s[start_idx]\\n            min_idx = start_idx\\n        start_idx += 1\\n    dp[start_idx] = min_idx\\n    return min_idx\\n\\n# aaaczbgjs\\nimport string\\ns = input()\\n# s = 'abcadc'\\n# s = string.ascii_lowercase + string.ascii_lowercase\\n\\nu = []\\nt = []\\n\\n# if len(s) >= 10**3:\\nefficient_sol()\\n# else:\\n#     sol_1()\\n\\n# abaaabababacba\\n# print(t)\\nprint(''.join(u + list(reversed(t))))\\n\", \"s = input()\\nm = ['z' for i in range(len(s))]\\nm[-1] = s[-1]\\nc = s[-1]\\nfor i in range(len(s) - 2, -1, -1):\\n    if s[i] < c:\\n        c = s[i]\\n    m[i] = c\\nind = m.index(min(m))\\nl = []\\nres = ''\\nfor i in range(len(s)):\\n    while l and l[-1] <= m[i]:\\n        res += l.pop()\\n    l.append(s[i])\\nprint(res + ''.join(map(str, (l[::-1]))))\\n\", \"#! /bin/python\\n\\ns = input()\\nresultBase = \\\"\\\"\\nresultRest = \\\"\\\"\\nbest = len(s) - 1\\nmini = [0] * len(s)\\n\\nfor i in range(len(s) - 1, -1, -1):\\n    mini[i] = best\\n    if s[best] >= s[i]:\\n        best = i\\n\\nfor i in range(len(s)):\\n    resultRest += s[i]\\n    while len(resultRest) > 0 and resultRest[-1] <= s[mini[i]]:\\n        resultBase += resultRest[-1]\\n        resultRest = resultRest[:-1]\\n    \\n    #  print(resultRest[-1] if len(resultRest) > 0 else '-', s[mini[i]])\\n    #  print(resultRest)\\n    #  print(resultBase)\\n    #  print()\\n    \\n\\nprint(resultBase + resultRest[::-1])\\n\", \"'''input\\ncab\\n'''\\ns = input()\\nm = [\\\"z\\\"] * len(s)\\nm[-1] = s[-1]\\nc = s[-1]\\nfor x in range(len(s) - 2, -1, -1):\\n\\tc = min(c, s[x])\\n\\tm[x] = c\\ni = m.index(min(m))\\nt = []\\ny = \\\"\\\"\\nfor x in range(len(s)):\\n\\twhile t and t[-1] <= m[x]:\\n\\t\\ty += t.pop()\\n\\tt.append(s[x])\\nprint(y, end=\\\"\\\")\\nfor x in t[::-1]:\\n\\tprint(x, end=\\\"\\\")\\n# s1 = sorted(s)\\n# t, u = [], []\\n# for l in s1:\\n# \\tif l in s:\\n# \\t\\ti = s.index(l)\\n# \\t\\tt += s[:i]\\n# \\t\\tdel s[:i+1]\\n# \\t\\tu.append(l)\\n# print(\\\"\\\".join(u + t[::-1]))\\n\", \"import sys\\nimport collections\\n\\nclass Stack:\\n    def __init__(self):\\n        self.stack = []\\n\\n    def push(self, item):\\n        self.stack.append(item)\\n\\n    def pop(self):\\n        del self.stack[len(self.stack)-1]\\n\\n    def top(self):\\n        return self.stack[len(self.stack)-1]\\n\\n    def empty(self):\\n        return len(self.stack) == 0\\n\\ndef main():\\n    s = list(sys.stdin.readline().split()[0])\\n\\n    hist = [0 for i in range(256)]\\n\\n    for c in s:\\n        hist[ord(c)]+=1\\n\\n    cur = 0\\n    u = []\\n    t = []\\n\\n    minn = ord('a')\\n    for i in range(minn, ord('z')+1):\\n        if(hist[i]):\\n            minn = i\\n            break\\n    aux = []\\n    while cur < len(s):\\n        aux.append(s[cur])\\n        hist[ord(s[cur])] -= 1\\n\\n        if(s[cur] == chr(minn)):\\n            u += aux\\n            aux = []\\n            minn = ord('z')\\n            for i in range(ord('a'), ord('z')+1):\\n                if(hist[i]):\\n                    minn = i\\n                    break\\n\\n            while(len(u) and ord(u[-1]) <= minn):\\n                t.append(u[-1])\\n                del u[-1]\\n        cur += 1\\n\\n\\n    print(\\\"\\\".join(t))\\n\\n\\n\\n\\n\\nmain()\\n\\n# argc, argv\\n# wait_pid\\n# sig_alarm\\n\", \"import sys\\nimport collections\\n\\nclass Stack:\\n    def __init__(self):\\n        self.stack = []\\n\\n    def push(self, item):\\n        self.stack.append(item)\\n\\n    def pop(self):\\n        del self.stack[len(self.stack)-1]\\n\\n    def top(self):\\n        return self.stack[len(self.stack)-1]\\n\\n    def empty(self):\\n        return len(self.stack) == 0\\n\\ndef main():\\n    s = list(sys.stdin.readline().split()[0])\\n\\n    hist = [0 for i in range(256)]\\n\\n    for c in s:\\n        hist[ord(c)]+=1\\n\\n    cur = 0\\n    u = []\\n    t = []\\n\\n    minn = ord('a')\\n    for i in range(minn, ord('z')+1):\\n        if(hist[i]):\\n            minn = i\\n            break\\n    aux = []\\n    while cur < len(s):\\n        aux.append(s[cur])\\n        hist[ord(s[cur])] -= 1\\n\\n        if(s[cur] == chr(minn)):\\n            u += aux\\n            aux = []\\n            minn = ord('z')\\n            for i in range(ord('a'), ord('z')+1):\\n                if(hist[i]):\\n                    minn = i\\n                    break\\n\\n            while(len(u) and ord(u[-1]) <= minn):\\n                t.append(u[-1])\\n                del u[-1]\\n        cur += 1\\n\\n\\n    print(\\\"\\\".join(t))\\n\\nmain()\\n\", \"import sys\\nimport collections\\n\\ndef main():\\n    s = list(sys.stdin.readline().split()[0])\\n\\n    hist = [0 for i in range(256)]\\n\\n    for c in s:\\n        hist[ord(c)]+=1\\n\\n    cur = 0\\n    u = []\\n    t = []\\n\\n    minn = ord('a')\\n    for i in range(minn, ord('z')+1):\\n        if(hist[i]):\\n            minn = i\\n            break\\n    aux = []\\n    while cur < len(s):\\n        aux.append(s[cur])\\n        hist[ord(s[cur])] -= 1\\n\\n        if(s[cur] == chr(minn)):\\n            u += aux\\n            aux = []\\n            minn = ord('z')\\n            for i in range(ord('a'), ord('z')+1):\\n                if(hist[i]):\\n                    minn = i\\n                    break\\n\\n            while(len(u) and ord(u[-1]) <= minn):\\n                t.append(u[-1])\\n                del u[-1]\\n        cur += 1\\n\\n\\n    print(\\\"\\\".join(t))\\n\\nmain()\\n\", \"from itertools import takewhile\\n\\ndef f(s):\\n    t = []\\n    u = []\\n    chars = 'abcdefghijklmnopqrstuvwxyz'\\n\\n    for c in chars:\\n        stack = list(takewhile(lambda x: x <= c, reversed(t)))\\n        count = len(stack)\\n        if count > 0:\\n            u += stack\\n            t = t[:-count]\\n\\n        count = s.count(c)\\n        if count > 0:\\n            rindex = s.rindex(c)\\n            u += c * count\\n            t += [x for x in s[:rindex] if x != c]\\n            s = s[rindex + 1:]\\n\\n    u += reversed(t)\\n    return ''.join(u)\\n\\nprint(f(input()))\\n\", \"#! /bin/python\\n\\ns = input()\\nresultBase = \\\"\\\"\\nresultRest = \\\"\\\"\\nbest = len(s) - 1\\nmini = [0] * len(s)\\n\\nfor i in range(len(s) - 1, -1, -1):\\n    mini[i] = best\\n    if s[best] >= s[i]:\\n        best = i\\n\\nfor i in range(len(s)):\\n    resultRest += s[i]\\n    while len(resultRest) > 0 and resultRest[-1] <= s[mini[i]]:\\n        resultBase += resultRest[-1]\\n        resultRest = resultRest[:-1]\\n    \\nprint(resultBase + resultRest[::-1])\\n\", \"s = input()\\niterate = 0\\ne = [(True) for i in range(len(s))]\\nans = ['' for i in range(len(s))]\\nidx = 0\\n\\nlastOccur = [-1 for i in range(26)]\\n\\nfor i in range (len(s)):\\n\\tlastOccur[ord(s[i])-ord('a')] = i\\n\\ni = 0\\nwhile(i < 26 and iterate < len(s)):\\n\\tj = iterate-1\\n\\twhile(j >= 0 and ord(s[j]) - ord('a') <= i):\\n\\t\\tif(e[j]):\\n\\t\\t\\tans[idx] = s[j]\\n\\t\\t\\te[j] = False\\n\\t\\t\\tidx += 1\\n\\t\\tj -= 1\\n\\n\\tj = iterate\\n\\twhile(j < lastOccur[i]+1):\\n\\t\\tif(e[j] and ord(s[j])-ord('a') == i):\\n\\t\\t\\tans[idx] = s[j]\\n\\t\\t\\te[j] = False\\n\\t\\t\\tidx += 1\\n\\t\\tj += 1\\n\\titerate = j\\n\\ti += 1\\n\\nif(iterate >= len(s)):\\n\\tfor j in range(len(s)-1, -1, -1):\\n\\t\\tif(e[j]):\\n\\t\\t\\tans[idx] = s[j]\\n\\t\\t\\tidx += 1\\n\\n\\n#print(ans)\\nstr1 = ''.join(ans)\\nprint(str1)\", \"s=input()\\ns+=('{')\\nans=\\\"\\\"\\ntmp=[]\\nm = ['z' for i in range(len(s)+1)]\\nfor i in range(len(s)-1,-1,-1):\\n    m[i]=min(m[i+1],s[i])\\n#print(m)\\nfor i in range(len(s)-1):\\n    tmp.append(s[i])\\n    while len(tmp) and tmp[-1]<=m[i+1]:\\n            ans += tmp.pop()\\nprint(ans)\", \"\\ndef s_has_smaller(s_cnt_local, c):\\n    for i in range(ord('a'), ord(c)):\\n        if s_cnt_local[i] > 0:\\n            return True\\n    return False\\n\\n\\ns = list(input())\\ns.reverse()\\n\\n\\nt = []\\nu = []\\n\\ns_cnt = [0] * (ord('z')+1)\\nfor x in s:\\n    s_cnt[ord(x)] += 1\\n\\n\\nwhile s or t:\\n    # print('+'*10)\\n    # print(s)\\n    # print(t)\\n    # print(u)\\n    # print(s_cnt)\\n    # print(t_cnt)\\n    if not s:\\n        while t:\\n            u.append(t.pop())\\n    elif not t:\\n        x = s.pop()\\n        s_cnt[ord(x)] -= 1\\n        t.append(x)\\n    else:\\n        if s_has_smaller(s_cnt, t[-1]):\\n            x = s.pop()\\n            s_cnt[ord(x)] -= 1\\n            t.append(x)\\n        else:\\n            x = t.pop()\\n            u.append(x)\\n\\nprint(\\\"\\\".join(u))\\n\", \"\\nptr = ord('a')\\n\\n\\ndef s_has_smaller(s_cnt_local, c):\\n    nonlocal ptr\\n    for i in range(ptr, ord(c)):\\n        ptr = i\\n        if s_cnt_local[i] > 0:\\n            return True\\n    return False\\n\\n\\ns = list(input())\\ns.reverse()\\n\\n\\nt = []\\nu = []\\n\\ns_cnt = [0] * (ord('z')+1)\\nfor x in s:\\n    s_cnt[ord(x)] += 1\\n\\n\\nwhile s or t:\\n    # print('+'*10)\\n    # print(s)\\n    # print(t)\\n    # print(u)\\n    # print(s_cnt)\\n    # print(t_cnt)\\n    if not s:\\n        while t:\\n            u.append(t.pop())\\n    elif not t:\\n        x = s.pop()\\n        s_cnt[ord(x)] -= 1\\n        t.append(x)\\n    else:\\n        if s_has_smaller(s_cnt, t[-1]):\\n            x = s.pop()\\n            s_cnt[ord(x)] -= 1\\n            t.append(x)\\n        else:\\n            x = t.pop()\\n            u.append(x)\\n\\nprint(\\\"\\\".join(u))\\n\", \"def letters():\\n    return (chr(i) for i in range(ord('a'), ord('z') + 1))\\n\\n\\ns = input()\\n\\nls = {lt: 0 for lt in letters()}\\n\\nfor lt in s:\\n    ls[lt] += 1\\n\\ns = [ch for ch in reversed(s)]\\nstack = []\\nres = []\\n\\nfor curr in letters():\\n    while stack and stack[-1] <= curr:\\n        res.append(stack.pop(-1))\\n    while ls[curr] > 0:\\n        if s[-1] != curr:\\n            c = s.pop(-1)\\n            ls[c] -= 1\\n            stack.append(c)\\n        else:\\n            ls[curr] -= 1\\n            res.append(s.pop(-1))\\nres += reversed(stack)\\nprint(''.join(res))\\n\", \"s=input()\\nn=len(s)\\ncur=('z',n)\\nmi=[cur for _ in range(n)]\\nns=mi[:]\\nfor i in range(n-1,-1,-1):\\n    if (s[i],i)<cur:\\n        cur=(s[i],i)\\n    mi[i]=cur\\n    ns[i]=(s[i],i)\\npos=0\\ncache=list()\\nres=''\\n\\nwhile len(res)<n:\\n    c,i=mi[pos]\\n    res+=c\\n    cache+=ns[pos:i]\\n    pos=i\\n    if  cache:\\n        val, _ =cache[-1]\\n        mi[pos]=(val,pos)\\n        ns[pos]=(val,pos)\\n        if pos<n-1:\\n            mi[pos]=min(mi[pos],mi[pos+1])\\n        cache.pop()\\n    else:\\n        pos+=1\\n        \\n        \\nprint( res   ) \\n\", \"s=input()\\nn=len(s)\\ncur=('z',n)\\nmi=[cur for _ in range(n)]\\nns=['z']*n\\nfor i in range(n-1,-1,-1):\\n    if (s[i],i)<cur:\\n        cur=(s[i],i)\\n    mi[i]=cur\\n    ns[i]=s[i]\\npos=0\\ncache=list()\\nres=''\\n\\nwhile len(res)<n:\\n    c,i=mi[pos]\\n    res+=c\\n    cache+=ns[pos:i]\\n    pos=i\\n    if  cache:\\n        val =cache[-1]\\n        mi[pos]=(val,pos)\\n        ns[pos]=val\\n        if pos<n-1:\\n            mi[pos]=min(mi[pos],mi[pos+1])\\n        cache.pop()\\n    else:\\n        pos+=1\\n        \\n        \\nprint( res   ) \\n\", \"s = input()\\nprefmin = ['{'] * (len(s) + 1)\\nst = []\\n\\nfor i in range(len(s) - 1, -1, -1):\\n    prefmin[i] = min(s[i], prefmin[i + 1])\\n\\nfor i in range(len(s)):\\n    while len(st) and st[-1] <= prefmin[i]:\\n        print(st.pop(), end='')\\n    if prefmin[i] == s[i]:\\n        print(s[i], end='')\\n    else:\\n        st.append(s[i])\\n\\nfor i in range(len(st) - 1, -1, -1):\\n    print(st[i], end='')\\n\\n\", \"def main():\\n    s = list(input())\\n\\n    suffix = []\\n    for x in reversed(s):\\n        if suffix:\\n            suffix.append(min(suffix[-1], x))\\n        else:\\n            suffix.append(x)\\n\\n    suffix = suffix[::-1]\\n\\n    u = []\\n    t = []\\n    i = 0\\n\\n    while True:\\n        m = suffix[i]\\n\\n        while t and t[-1] <= m:\\n            u.append(t[-1])\\n            t.pop()\\n\\n        while s[i] != m:\\n            t.append(s[i])\\n            i += 1\\n\\n        u.append(s[i])\\n\\n        i += 1\\n        if i == len(s):\\n            break\\n\\n    u += t[::-1]\\n\\n    print(''.join(u))\\n\\n\\nmain()\\n\", \"def main():\\n    s = list(input())\\n\\n    suffix = []\\n    for x in reversed(s):\\n        if suffix:\\n            suffix.append(min(suffix[-1], x))\\n        else:\\n            suffix.append(x)\\n\\n    suffix = suffix[::-1]\\n\\n    u = []\\n    t = []\\n    i = 0\\n\\n    while True:\\n        m = suffix[i]\\n\\n        while t and t[-1] <= m:\\n            u.append(t[-1])\\n            t.pop()\\n\\n        while s[i] != m:\\n            t.append(s[i])\\n            i += 1\\n\\n        u.append(s[i])\\n\\n        i += 1\\n        if i == len(s):\\n            break\\n\\n    u += t[::-1]\\n\\n    print(''.join(u))\\n\\n\\nmain()\\n\", \"#!/usr/bin/pypy3\\n\\n# s[0] -> t[-1] or t[-1]->u[-1]\\n# \\\"cab\\\" ->(\\\"cab\\\",\\\"\\\",\\\"\\\")->(\\\"ab\\\",\\\"c\\\",\\\"\\\")->(\\\"b\\\",\\\"ca\\\",\\\"\\\")->(\\\"b\\\",\\\"c\\\",\\\"a\\\")\\n# 1) stack s->t until min(s).\\n# 2) passthrough min(s)->u\\n# min(s,t[-1]) -> u. Repeat.\\n# need to know the smallest item in s (quickly)\\n# think it's: split into two subsequences, merge s1(reverse)+s2. minimum.\\n# \\\"cab\\\" -> s1=\\\"cb\\\",s2=\\\"a\\\" -> bc\\n# \\\"dcab\\\" -> \\\"b\\\",\\\"dca\\\"\\nfrom sys import stdin,stderr\\n\\ndef readInts(): return map(int,stdin.readline().strip().split())\\ndef print_err(*args,**kwargs): print(*args,file=stderr,**kwargs)\\n    \\ndef solve(s):\\n    s = list(s)\\n    sn = len(s)\\n    pq = sorted(zip(list(s),range(sn)))\\n    ix_left = 0\\n    u,v = [],[]\\n    for c,ix in pq:\\n        if ix < ix_left: continue\\n        while u and c >= u[-1]: v.append(u.pop())\\n        for cix in range(ix_left,ix+1): u.append(s[cix])\\n        ix_left = ix+1\\n    while u: v.append(u.pop())\\n    return v    \\n\\ndef run():\\n    s = input().strip()\\n    print(\\\"\\\".join(solve(s)))\\n        \\nrun()\\n\", \"s=input()\\nc=[0]*26\\nfor i in s:\\n    c[ord(i)-97]+=1\\nt=[]\\nu=[]\\nfor i in s:\\n    t.append(i)\\n    c[ord(i)-97]-=1\\n    while t and sum(c[:(ord(t[-1])-97)])==0:\\n        u.append(t.pop())\\n        \\nprint(''.join(u))      \"]",
    "[\"import sys\\ninput = sys.stdin.readline\\n\\nT = int(input())\\nfor _ in range(T):\\n    n = int(input())\\n    lastP = 0\\n    lastC = 0\\n    works = True\\n    for _ in range(n):\\n        p, c = list(map(int, input().split()))\\n        pDiff = p-lastP\\n        cDiff = c-lastC\\n        if 0 <= cDiff <= pDiff:\\n            pass\\n        else:\\n            works = False\\n        lastP = p\\n        lastC = c\\n    if works:\\n        print('YES')\\n    else:\\n        print('NO')\\n\", \"import sys\\nfrom math import gcd\\nfrom collections import defaultdict\\nfrom copy import copy\\n\\nR = lambda t = int: t(input())\\nRL = lambda t = int: [t(x) for x in input().split()]\\nRLL = lambda n, t = int: [RL(t) for _ in range(n)]\\n\\ndef solve():\\n  n = R()\\n  S = RLL(n)\\n  lp = lc = 0\\n  for p, c in S:\\n    if lp > p or lc > c or c - lc > p - lp:\\n      print('NO')\\n      return\\n    lp = p\\n    lc = c\\n  print('YES')\\n      \\n\\nT = R()\\nfor _ in range(T):\\n  solve()\\n\", \"for tc in range(int(input())):\\n    n = int(input())\\n    am,bm = 0,0\\n    res = 'YES'\\n    for i in range(n):\\n        a,b = list(map(int, input().split()))\\n        if a<am or b<bm or (a-b)<(am-bm):\\n            res='NO'\\n        am, bm = a,b\\n    print(res)\\n\", \"from math import *\\n\\nfor zz in range(int(input())):\\n    n = int(input())\\n    p1, c1 = list(map(int, input().split()))\\n    ha = True\\n    if p1 < c1:\\n        ha = False\\n\\n    for i in range(n - 1):\\n        p, c = list(map(int, input().split()))\\n        if (p - p1 < c - c1) or p < p1 or c < c1:\\n            ha = False\\n        p1 = p\\n        c1 = c\\n    \\n    if ha:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\", \"t=int(input())\\nfor _ in range(t):\\n    n=int(input())\\n    c,d=0,0\\n    bo=0\\n    for i in range(n):\\n        a,b=list(map(int,input().split()))\\n        if(a<c or b<d):\\n            bo=1\\n        elif(a-c<b-d):\\n            bo=1\\n        c,d=a,b\\n    if(bo):\\n        print(\\\"NO\\\")\\n    else:\\n        print(\\\"YES\\\")\\n\", \"from collections import *\\nimport sys\\ntry: inp = raw_input\\nexcept: inp = input\\ndef err(s):\\n    sys.stderr.write('{}\\\\n'.format(s))\\n\\ndef ni():\\n    return int(inp())\\n\\ndef nl():\\n    return [int(_) for _ in inp().split()]\\n\\nT = ni()\\nfor _ in range(T):\\n    N = ni()\\n    lp, lc = 0, 0\\n    fail = False\\n    for _ in range(N):\\n        p, c = nl()\\n        dp = p - lp\\n        dc = c - lc\\n        lp, lc = p, c\\n        if dp < dc or dc < 0:\\n            fail = True\\n    if fail:\\n        print('NO')\\n    else:\\n        print('YES')\\n    \\n\\n\", \"for _ in range(int(input())):\\n    p1 = 0\\n    c1 = 0\\n    flag = True\\n    for _ in range(int(input())):\\n        p2, c2 = list(map(int, input().split()))\\n        if not flag:\\n            continue\\n        if p2 < p1 or c2 < c1:\\n            flag = False\\n        if p2-p1 < c2-c1:\\n            flag = False\\n        p1 = p2\\n        c1 = c2\\n    if flag:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\", \"def main():\\n    n = int(input())\\n    pl, cl = 0, 0\\n    correct = True\\n    for i in range(n):\\n        p, c = list(map(int, input().split()))\\n        if c - cl > p - pl:\\n            correct = False\\n        if c < cl:\\n            correct = False\\n        if p < pl:\\n            correct = False\\n        pl, cl = p, c\\n\\n    if correct:\\n        print(\\\"YES\\\")\\n    else:\\n        print(\\\"NO\\\")\\n\\n\\nt = int(input())\\nfor _ in range(t):\\n    main()\\n\", \"for ahfiuyh in range(int(input())):\\n    n = int(input())\\n    a = [list(map(int,input().split())) for i in range(n)]\\n    cc = [0,0]\\n    f = True\\n    for i in a:\\n        if i[1] > i[0]:\\n            print(\\\"NO\\\")\\n            f = False\\n            break\\n        elif i[0] < cc[0]:\\n            print(\\\"NO\\\")\\n            f = False\\n            break\\n        elif i[1] < cc[1]:\\n            print(\\\"NO\\\")\\n            f = False\\n            break\\n        elif i[1] - cc[1] > i[0] - cc[0]:\\n            print(\\\"NO\\\")\\n            f = False\\n            break\\n        cc = i\\n    if f:\\n        print(\\\"YES\\\")\\n        \\n\"]"
  ],
  "input_output": [
    "{\n  \"inputs\": [\n    \"14\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"7\\n\",\n    \"8\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"11\\n\",\n    \"12\\n\",\n    \"13\\n\",\n    \"1000000\\n\",\n    \"16\\n\",\n    \"17\\n\",\n    \"18\\n\",\n    \"19\\n\",\n    \"20\\n\",\n    \"21\\n\",\n    \"22\\n\",\n    \"23\\n\",\n    \"24\\n\",\n    \"25\\n\",\n    \"26\\n\",\n    \"27\\n\",\n    \"28\\n\",\n    \"29\\n\",\n    \"30\\n\",\n    \"100\\n\",\n    \"99\\n\",\n    \"98\\n\",\n    \"97\\n\",\n    \"96\\n\",\n    \"95\\n\",\n    \"94\\n\",\n    \"93\\n\",\n    \"92\\n\",\n    \"91\\n\",\n    \"90\\n\",\n    \"89\\n\",\n    \"88\\n\",\n    \"87\\n\",\n    \"86\\n\",\n    \"85\\n\",\n    \"84\\n\",\n    \"83\\n\",\n    \"82\\n\",\n    \"81\\n\",\n    \"80\\n\",\n    \"1000\\n\",\n    \"999\\n\",\n    \"998\\n\",\n    \"997\\n\",\n    \"996\\n\",\n    \"995\\n\",\n    \"994\\n\",\n    \"993\\n\",\n    \"992\\n\",\n    \"991\\n\",\n    \"990\\n\",\n    \"989\\n\",\n    \"988\\n\",\n    \"987\\n\",\n    \"986\\n\",\n    \"985\\n\",\n    \"984\\n\",\n    \"983\\n\",\n    \"982\\n\",\n    \"981\\n\",\n    \"980\\n\",\n    \"10000\\n\",\n    \"9999\\n\",\n    \"9998\\n\",\n    \"9997\\n\",\n    \"9996\\n\",\n    \"9995\\n\",\n    \"9994\\n\",\n    \"9993\\n\",\n    \"9992\\n\",\n    \"9991\\n\",\n    \"9990\\n\",\n    \"9989\\n\",\n    \"9988\\n\",\n    \"9987\\n\",\n    \"9986\\n\",\n    \"9985\\n\",\n    \"9984\\n\",\n    \"9983\\n\",\n    \"9982\\n\",\n    \"9981\\n\",\n    \"9980\\n\",\n    \"100000\\n\",\n    \"99999\\n\",\n    \"99998\\n\",\n    \"99997\\n\",\n    \"99996\\n\",\n    \"99995\\n\",\n    \"99994\\n\",\n    \"99993\\n\",\n    \"99992\\n\",\n    \"99991\\n\",\n    \"99990\\n\",\n    \"99989\\n\",\n    \"99988\\n\",\n    \"99987\\n\",\n    \"99986\\n\",\n    \"99985\\n\",\n    \"99984\\n\",\n    \"99983\\n\",\n    \"99982\\n\",\n    \"99981\\n\",\n    \"99980\\n\",\n    \"999999\\n\",\n    \"999998\\n\",\n    \"999997\\n\",\n    \"999996\\n\",\n    \"999995\\n\",\n    \"999994\\n\",\n    \"999993\\n\",\n    \"999992\\n\",\n    \"999991\\n\",\n    \"999990\\n\",\n    \"999989\\n\",\n    \"999988\\n\",\n    \"999987\\n\",\n    \"999986\\n\",\n    \"999985\\n\",\n    \"999984\\n\",\n    \"999983\\n\",\n    \"999982\\n\",\n    \"999981\\n\",\n    \"999980\\n\",\n    \"234123\\n\",\n    \"234122\\n\",\n    \"234121\\n\",\n    \"234120\\n\",\n    \"234119\\n\",\n    \"234118\\n\",\n    \"234117\\n\",\n    \"234116\\n\",\n    \"234115\\n\",\n    \"234114\\n\",\n    \"234113\\n\",\n    \"234112\\n\",\n    \"234111\\n\",\n    \"234110\\n\",\n    \"234109\\n\",\n    \"234108\\n\",\n    \"234107\\n\",\n    \"234106\\n\",\n    \"234105\\n\",\n    \"234104\\n\",\n    \"234103\\n\",\n    \"868531\\n\",\n    \"868530\\n\",\n    \"868529\\n\",\n    \"868528\\n\",\n    \"868527\\n\",\n    \"868526\\n\",\n    \"868525\\n\",\n    \"868524\\n\",\n    \"868523\\n\",\n    \"868522\\n\",\n    \"868521\\n\",\n    \"868520\\n\",\n    \"868519\\n\",\n    \"868518\\n\",\n    \"868517\\n\",\n    \"868516\\n\",\n    \"868515\\n\",\n    \"868514\\n\",\n    \"868513\\n\",\n    \"868512\\n\",\n    \"868511\\n\",\n    \"123413\\n\",\n    \"123412\\n\",\n    \"123411\\n\",\n    \"123410\\n\",\n    \"123409\\n\",\n    \"123408\\n\",\n    \"123407\\n\",\n    \"123406\\n\",\n    \"123405\\n\",\n    \"123404\\n\",\n    \"123403\\n\",\n    \"123402\\n\",\n    \"123401\\n\",\n    \"123400\\n\",\n    \"123399\\n\",\n    \"123398\\n\",\n    \"123397\\n\",\n    \"123396\\n\",\n    \"123395\\n\",\n    \"123394\\n\",\n    \"123393\\n\",\n    \"15\\n\"\n  ],\n  \"outputs\": [\n    \"4 4\\n\",\n    \"0 2\\n\",\n    \"0 1\\n\",\n    \"0 2\\n\",\n    \"0 2\\n\",\n    \"0 2\\n\",\n    \"1 2\\n\",\n    \"2 2\\n\",\n    \"2 3\\n\",\n    \"2 4\\n\",\n    \"2 4\\n\",\n    \"2 4\\n\",\n    \"2 4\\n\",\n    \"3 4\\n\",\n    \"285714 285715\\n\",\n    \"4 6\\n\",\n    \"4 6\\n\",\n    \"4 6\\n\",\n    \"4 6\\n\",\n    \"5 6\\n\",\n    \"6 6\\n\",\n    \"6 7\\n\",\n    \"6 8\\n\",\n    \"6 8\\n\",\n    \"6 8\\n\",\n    \"6 8\\n\",\n    \"7 8\\n\",\n    \"8 8\\n\",\n    \"8 9\\n\",\n    \"8 10\\n\",\n    \"28 30\\n\",\n    \"28 29\\n\",\n    \"28 28\\n\",\n    \"27 28\\n\",\n    \"26 28\\n\",\n    \"26 28\\n\",\n    \"26 28\\n\",\n    \"26 28\\n\",\n    \"26 27\\n\",\n    \"26 26\\n\",\n    \"25 26\\n\",\n    \"24 26\\n\",\n    \"24 26\\n\",\n    \"24 26\\n\",\n    \"24 26\\n\",\n    \"24 25\\n\",\n    \"24 24\\n\",\n    \"23 24\\n\",\n    \"22 24\\n\",\n    \"22 24\\n\",\n    \"22 24\\n\",\n    \"285 286\\n\",\n    \"284 286\\n\",\n    \"284 286\\n\",\n    \"284 286\\n\",\n    \"284 286\\n\",\n    \"284 285\\n\",\n    \"284 284\\n\",\n    \"283 284\\n\",\n    \"282 284\\n\",\n    \"282 284\\n\",\n    \"282 284\\n\",\n    \"282 284\\n\",\n    \"282 283\\n\",\n    \"282 282\\n\",\n    \"281 282\\n\",\n    \"280 282\\n\",\n    \"280 282\\n\",\n    \"280 282\\n\",\n    \"280 282\\n\",\n    \"280 281\\n\",\n    \"280 280\\n\",\n    \"2856 2858\\n\",\n    \"2856 2858\\n\",\n    \"2856 2858\\n\",\n    \"2856 2857\\n\",\n    \"2856 2856\\n\",\n    \"2855 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2856\\n\",\n    \"2854 2855\\n\",\n    \"2854 2854\\n\",\n    \"2853 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2854\\n\",\n    \"2852 2853\\n\",\n    \"2852 2852\\n\",\n    \"2851 2852\\n\",\n    \"2850 2852\\n\",\n    \"28570 28572\\n\",\n    \"28570 28572\\n\",\n    \"28570 28572\\n\",\n    \"28570 28572\\n\",\n    \"28570 28571\\n\",\n    \"28570 28570\\n\",\n    \"28569 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28570\\n\",\n    \"28568 28569\\n\",\n    \"28568 28568\\n\",\n    \"28567 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28568\\n\",\n    \"28566 28567\\n\",\n    \"28566 28566\\n\",\n    \"28565 28566\\n\",\n    \"285714 285714\\n\",\n    \"285713 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285714\\n\",\n    \"285712 285713\\n\",\n    \"285712 285712\\n\",\n    \"285711 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285712\\n\",\n    \"285710 285711\\n\",\n    \"285710 285710\\n\",\n    \"285709 285710\\n\",\n    \"285708 285710\\n\",\n    \"285708 285710\\n\",\n    \"285708 285710\\n\",\n    \"285708 285710\\n\",\n    \"66892 66893\\n\",\n    \"66892 66892\\n\",\n    \"66891 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66892\\n\",\n    \"66890 66891\\n\",\n    \"66890 66890\\n\",\n    \"66889 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66890\\n\",\n    \"66888 66889\\n\",\n    \"66888 66888\\n\",\n    \"66887 66888\\n\",\n    \"66886 66888\\n\",\n    \"66886 66888\\n\",\n    \"66886 66888\\n\",\n    \"66886 66888\\n\",\n    \"248151 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248152\\n\",\n    \"248150 248151\\n\",\n    \"248150 248150\\n\",\n    \"248149 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248150\\n\",\n    \"248148 248149\\n\",\n    \"248148 248148\\n\",\n    \"248147 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248148\\n\",\n    \"248146 248147\\n\",\n    \"248146 248146\\n\",\n    \"35260 35262\\n\",\n    \"35260 35262\\n\",\n    \"35260 35261\\n\",\n    \"35260 35260\\n\",\n    \"35259 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35260\\n\",\n    \"35258 35259\\n\",\n    \"35258 35258\\n\",\n    \"35257 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35258\\n\",\n    \"35256 35257\\n\",\n    \"35256 35256\\n\",\n    \"35255 35256\\n\",\n    \"35254 35256\\n\",\n    \"35254 35256\\n\",\n    \"4 5\\n\"\n  ]\n}",
    "{\n  \"inputs\": [\n    \"5 2 3 12 15\\n\",\n    \"20 2 3 3 5\\n\",\n    \"1 1 1 1 1\\n\",\n    \"1 2 2 2 2\\n\",\n    \"2 1 3 3 3\\n\",\n    \"3 1 1 3 3\\n\",\n    \"4 1 5 4 3\\n\",\n    \"8 8 1 1 1\\n\",\n    \"15 14 32 65 28\\n\",\n    \"894 197 325 232 902\\n\",\n    \"8581 6058 3019 2151 4140\\n\",\n    \"41764 97259 54586 18013 75415\\n\",\n    \"333625 453145 800800 907251 446081\\n\",\n    \"4394826 2233224 609367 3364334 898489\\n\",\n    \"13350712 76770926 61331309 8735000 9057368\\n\",\n    \"142098087 687355301 987788392 75187408 868856364\\n\",\n    \"1000000000 1 3 1000000000 999999999\\n\",\n    \"6 6 2 8 2\\n\",\n    \"500 8 4 4 5\\n\",\n    \"20 4 6 2 3\\n\",\n    \"10 3 9 1 2\\n\",\n    \"120 18 6 3 5\\n\",\n    \"30 4 6 2 2\\n\",\n    \"1000000000 7171 2727 191 272\\n\",\n    \"5 2 2 4 1\\n\",\n    \"1000000000 2 2 3 3\\n\",\n    \"24 4 6 5 7\\n\",\n    \"216 6 36 10 100\\n\",\n    \"100 12 6 1 10\\n\",\n    \"1000 4 8 3 5\\n\",\n    \"10 2 4 3 6\\n\",\n    \"1000000000 1000000000 1000000000 1000000000 1000000000\\n\",\n    \"10 5 10 2 3\\n\",\n    \"100000 3 9 1 2\\n\",\n    \"10 2 4 1 100\\n\",\n    \"20 6 4 2 3\\n\",\n    \"1200 4 16 2 3\\n\",\n    \"7 2 4 7 9\\n\",\n    \"24 6 4 15 10\\n\",\n    \"50 2 8 15 13\\n\",\n    \"100 4 6 12 15\\n\",\n    \"56756 9 18 56 78\\n\",\n    \"10000 4 6 10 12\\n\",\n    \"20 2 4 3 5\\n\",\n    \"24 4 6 10 100\\n\",\n    \"12 2 4 5 6\\n\",\n    \"100 2 4 1 100\\n\",\n    \"1000 4 6 50 50\\n\",\n    \"60 12 6 12 15\\n\",\n    \"1000 2 4 5 6\\n\",\n    \"1000000000 1 1 9999 5555\\n\",\n    \"50 2 2 4 5\\n\",\n    \"14 4 2 2 3\\n\",\n    \"100 3 9 1 2\\n\",\n    \"1000000000 4 6 1 1000000000\\n\",\n    \"12 3 3 45 4\\n\",\n    \"12 2 4 5 9\\n\",\n    \"1000000000 2 2 1000000000 1000000000\\n\",\n    \"50 4 8 5 6\\n\",\n    \"32 4 16 6 3\\n\",\n    \"10000 2 4 1 1\\n\",\n    \"8 2 4 100 1\\n\",\n    \"20 4 2 10 1\\n\",\n    \"5 2 2 12 15\\n\",\n    \"20 2 12 5 6\\n\",\n    \"10 2 4 1 2\\n\",\n    \"32 4 16 3 6\\n\",\n    \"50 2 8 13 15\\n\",\n    \"12 6 4 10 9\\n\",\n    \"1000000000 999999998 999999999 999999998 999999999\\n\",\n    \"20 2 4 10 20\\n\",\n    \"13 4 6 12 15\\n\",\n    \"30 3 6 5 7\\n\",\n    \"7 2 4 2 1\\n\",\n    \"100000 32 16 2 3\\n\",\n    \"6 2 6 1 1\\n\",\n    \"999999999 180 192 46642017 28801397\\n\",\n    \"12 4 6 1 1\\n\",\n    \"10 2 4 10 5\\n\",\n    \"1000000 4 6 12 14\\n\",\n    \"2000 20 30 3 5\\n\",\n    \"1000000000 1 2 1 1\\n\",\n    \"30 3 15 10 3\\n\",\n    \"1000 2 4 1 100\\n\",\n    \"6 3 3 12 15\\n\",\n    \"24 4 6 1 1\\n\",\n    \"20 2 12 4 5\\n\",\n    \"1000000000 9 15 10 10\\n\",\n    \"16 2 4 1 2\\n\",\n    \"100000 4 6 12 14\\n\",\n    \"24 6 4 1 1\\n\",\n    \"1000000 4 6 12 15\\n\",\n    \"100 2 4 5 6\\n\",\n    \"10 3 9 12 15\\n\",\n    \"1000000000 1 1 999999999 999999999\\n\",\n    \"6 2 4 2 3\\n\",\n    \"2 2 2 2 2\\n\",\n    \"6 6 2 1 1\\n\",\n    \"100 2 4 3 7\\n\",\n    \"1000000 32 16 2 5\\n\",\n    \"100 20 15 50 25\\n\",\n    \"1000000000 100000007 100000013 10 3\\n\",\n    \"1000000000 9999999 99999998 3 3\\n\",\n    \"10077696 24 36 10 100\\n\",\n    \"392852503 148746166 420198270 517065752 906699795\\n\",\n    \"536870912 60000 72000 271828 314159\\n\",\n    \"730114139 21550542 204644733 680083361 11353255\\n\",\n    \"538228881 766493289 791886544 468896052 600136703\\n\",\n    \"190 20 50 84 172\\n\",\n    \"1000 5 10 80 90\\n\",\n    \"99999999 999999998 1 271828 314159\\n\",\n    \"22 3 6 1243 1\\n\",\n    \"15 10 5 2 2\\n\",\n    \"1000000000 1000000000 1 1000000000 1000000000\\n\",\n    \"62 62 42 78 124\\n\",\n    \"2 2 2 2 1\\n\",\n    \"864351351 351 313 531 11\\n\",\n    \"26 3 6 1244 1\\n\",\n    \"1000 4 6 7 3\\n\",\n    \"134312 3 6 33333 1\\n\",\n    \"100 4 6 17 18\\n\",\n    \"6 2 4 5 6\\n\",\n    \"8 2 4 10 1\\n\",\n    \"10 2 4 3 3\\n\",\n    \"1000 1000 1000 1000 1000\\n\",\n    \"123123 3 6 34312 2\\n\",\n    \"1000000000 25 5 999 999\\n\",\n    \"100 4 2 5 12\\n\",\n    \"50 2 4 4 5\\n\",\n    \"24 4 6 100 333\\n\",\n    \"216 24 36 10 100\\n\",\n    \"50 6 4 3 8\\n\",\n    \"146 76 2 178 192\\n\",\n    \"55 8 6 11 20\\n\",\n    \"5 2 4 6 16\\n\",\n    \"54 2 52 50 188\\n\",\n    \"536870912 60000000 72000000 271828 314159\\n\",\n    \"1000000000 1000000000 1 1 100\\n\",\n    \"50 4 2 4 5\\n\",\n    \"198 56 56 122 118\\n\",\n    \"5 1000000000 1 12 15\\n\",\n    \"1000 6 12 5 6\\n\",\n    \"50 3 6 12 15\\n\",\n    \"333 300 300 300 300\\n\",\n    \"1 1000000000 1 1 2\\n\",\n    \"188 110 110 200 78\\n\",\n    \"100000 20 10 3 2\\n\",\n    \"100 2 4 1 10\\n\",\n    \"1000000000 2 1000000000 1 1000000\\n\",\n    \"20 3 6 5 7\\n\",\n    \"50 4 6 4 5\\n\",\n    \"96 46 4 174 156\\n\",\n    \"5 2 4 12 15\\n\",\n    \"12 3 6 100 1\\n\",\n    \"100 4 2 10 32\\n\",\n    \"1232 3 6 30000 3\\n\",\n    \"20 3 6 5 4\\n\",\n    \"100 6 15 11 29\\n\",\n    \"10000000 4 8 100 200\\n\",\n    \"1000000000 12 24 2 4\\n\",\n    \"123 3 6 3000 1\\n\",\n    \"401523968 1536 2664 271828 314159\\n\",\n    \"9 2 4 3 5\\n\",\n    \"999999999 724362018 772432019 46201854 20017479\\n\",\n    \"100 2 4 1 1000\\n\",\n    \"50 2 4 1 1000\\n\",\n    \"1000000000 2 1 2 1\\n\",\n    \"1000000000 2005034 2005046 15 12\\n\",\n    \"1000000000 999999999 1000000000 1 1\\n\",\n    \"999999999 500000000 1 100 1000\\n\",\n    \"50 8 6 3 4\\n\",\n    \"1000000000 1 1 1000000000 1000000000\\n\",\n    \"1000000000 999999862 999999818 15 12\\n\",\n    \"1000000000 10000019 10000019 21 17\\n\",\n    \"20 6 4 8 2\\n\",\n    \"1000000000 1000000000 1 1 1\\n\",\n    \"1000000000 12345678 123456789 1000000000 999999999\\n\",\n    \"1000000000 2 999999937 100000000 100000000\\n\",\n    \"1000000000 1 1 1000000000 999999999\\n\",\n    \"1000000000 50001 100003 10 10\\n\",\n    \"1000000000 1000000000 3 1 1\\n\",\n    \"10000 44 49 114 514\\n\",\n    \"30 5 15 2 1\\n\",\n    \"20 2 4 1 1\\n\",\n    \"100 8 12 5 6\\n\"\n  ],\n  \"outputs\": [\n    \"39\\n\",\n    \"51\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"6\\n\",\n    \"9\\n\",\n    \"16\\n\",\n    \"8\\n\",\n    \"65\\n\",\n    \"2732\\n\",\n    \"10431\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"9653757\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1000000000000000000\\n\",\n    \"12\\n\",\n    \"625\\n\",\n    \"17\\n\",\n    \"4\\n\",\n    \"100\\n\",\n    \"20\\n\",\n    \"125391842\\n\",\n    \"8\\n\",\n    \"1500000000\\n\",\n    \"48\\n\",\n    \"900\\n\",\n    \"160\\n\",\n    \"1000\\n\",\n    \"21\\n\",\n    \"1000000000\\n\",\n    \"5\\n\",\n    \"44444\\n\",\n    \"203\\n\",\n    \"19\\n\",\n    \"675\\n\",\n    \"23\\n\",\n    \"100\\n\",\n    \"375\\n\",\n    \"444\\n\",\n    \"422502\\n\",\n    \"36662\\n\",\n    \"40\\n\",\n    \"440\\n\",\n    \"33\\n\",\n    \"2525\\n\",\n    \"16650\\n\",\n    \"150\\n\",\n    \"2750\\n\",\n    \"9999000000000\\n\",\n    \"125\\n\",\n    \"21\\n\",\n    \"44\\n\",\n    \"166666666166666667\\n\",\n    \"180\\n\",\n    \"42\\n\",\n    \"500000000000000000\\n\",\n    \"66\\n\",\n    \"48\\n\",\n    \"5000\\n\",\n    \"400\\n\",\n    \"55\\n\",\n    \"30\\n\",\n    \"51\\n\",\n    \"7\\n\",\n    \"30\\n\",\n    \"337\\n\",\n    \"38\\n\",\n    \"1999999997\\n\",\n    \"150\\n\",\n    \"54\\n\",\n    \"60\\n\",\n    \"6\\n\",\n    \"18750\\n\",\n    \"3\\n\",\n    \"399129078526502\\n\",\n    \"4\\n\",\n    \"50\\n\",\n    \"4333328\\n\",\n    \"531\\n\",\n    \"1000000000\\n\",\n    \"100\\n\",\n    \"25250\\n\",\n    \"30\\n\",\n    \"8\\n\",\n    \"41\\n\",\n    \"1555555550\\n\",\n    \"12\\n\",\n    \"433328\\n\",\n    \"8\\n\",\n    \"4499994\\n\",\n    \"275\\n\",\n    \"39\\n\",\n    \"999999999000000000\\n\",\n    \"7\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"250\\n\",\n    \"312500\\n\",\n    \"375\\n\",\n    \"117\\n\",\n    \"330\\n\",\n    \"30792960\\n\",\n    \"1034131504\\n\",\n    \"4369119072\\n\",\n    \"22476810678\\n\",\n    \"0\\n\",\n    \"1188\\n\",\n    \"17000\\n\",\n    \"31415899685841\\n\",\n    \"8701\\n\",\n    \"6\\n\",\n    \"1000000000000000000\\n\",\n    \"202\\n\",\n    \"2\\n\",\n    \"1337898227\\n\",\n    \"9952\\n\",\n    \"1999\\n\",\n    \"1492318410\\n\",\n    \"577\\n\",\n    \"16\\n\",\n    \"40\\n\",\n    \"15\\n\",\n    \"1000\\n\",\n    \"1408198792\\n\",\n    \"199800000000\\n\",\n    \"600\\n\",\n    \"112\\n\",\n    \"1732\\n\",\n    \"660\\n\",\n    \"108\\n\",\n    \"14016\\n\",\n    \"224\\n\",\n    \"22\\n\",\n    \"1488\\n\",\n    \"4101909\\n\",\n    \"100000000000\\n\",\n    \"125\\n\",\n    \"366\\n\",\n    \"75\\n\",\n    \"913\\n\",\n    \"216\\n\",\n    \"300\\n\",\n    \"2\\n\",\n    \"200\\n\",\n    \"25000\\n\",\n    \"275\\n\",\n    \"500999999\\n\",\n    \"36\\n\",\n    \"72\\n\",\n    \"3936\\n\",\n    \"27\\n\",\n    \"400\\n\",\n    \"1600\\n\",\n    \"12300000\\n\",\n    \"30\\n\",\n    \"317\\n\",\n    \"375000000\\n\",\n    \"249999998\\n\",\n    \"123000\\n\",\n    \"117768531682\\n\",\n    \"16\\n\",\n    \"66219333\\n\",\n    \"25025\\n\",\n    \"12013\\n\",\n    \"1500000000\\n\",\n    \"13446\\n\",\n    \"2\\n\",\n    \"999999999000\\n\",\n    \"44\\n\",\n    \"1000000000000000000\\n\",\n    \"27\\n\",\n    \"2079\\n\",\n    \"32\\n\",\n    \"1000000000\\n\",\n    \"88999999992\\n\",\n    \"50000000100000000\\n\",\n    \"1000000000000000000\\n\",\n    \"299980\\n\",\n    \"333333334\\n\",\n    \"130278\\n\",\n    \"12\\n\",\n    \"10\\n\",\n    \"88\\n\"\n  ]\n}",
    "{\n  \"inputs\": [\n    \"10\\nGGGSGGGSGG\\n\",\n    \"4\\nGGGG\\n\",\n    \"3\\nSSS\\n\",\n    \"11\\nSGGGGSGGGGS\\n\",\n    \"300\\nSSGSGSSSGSGSSSSGGSGSSGGSGSGGSSSGSSGSGGSSGGSGSSGGSGGSSGSSSGSGSGSSGSGGSSSGSSGSSGGGGSSGSSGSSGSGGSSSSGGGGSSGSSSSSSSSGSSSSGSGSSSSSSSSGSGSSSSGSSGGSSGSGSSSSSSGSGSSSGGSSGSGSSGSSSSSSGGGSSSGSGSGSGGSGGGSSGSGSSSGSSGGSSGSSGGGGSGSSGSSSSGGSSSSGGSGSSSSSSGSSSGGGSGSGGSSGSSSSSSGGSSSGSSSSGGGSSGSSSGSGGGSSSSGSSSGSGSGGGGS\\n\",\n    \"2\\nSS\\n\",\n    \"2\\nSG\\n\",\n    \"2\\nGS\\n\",\n    \"2\\nGG\\n\",\n    \"6\\nGGSSGG\\n\",\n    \"5\\nGGSSG\\n\",\n    \"11\\nSGGGGGSSSSG\\n\",\n    \"7\\nGGGSSSG\\n\",\n    \"15\\nGGSSGGGGGGGSSGG\\n\",\n    \"6\\nGSSSGG\\n\",\n    \"4\\nGSSG\\n\",\n    \"10\\nGSSGGGGSSG\\n\",\n    \"8\\nGSSSGGGG\\n\",\n    \"8\\nSGGSGGGG\\n\",\n    \"12\\nGGGSSGGGGSSG\\n\",\n    \"4\\nGSGG\\n\",\n    \"7\\nGGGSSGG\\n\",\n    \"10\\nGGGSSGGGGG\\n\",\n    \"12\\nSSSGGSSSGGGG\\n\",\n    \"10\\nGGSSGGSSGG\\n\",\n    \"5\\nGSSSG\\n\",\n    \"10\\nGGGGGGGSSG\\n\",\n    \"6\\nGSSSSG\\n\",\n    \"10\\nGGGGSSSGGG\\n\",\n    \"6\\nGGGSGG\\n\",\n    \"6\\nGSSGSG\\n\",\n    \"9\\nGGGGSSGGG\\n\",\n    \"8\\nSGSSGGGG\\n\",\n    \"5\\nGSSGS\\n\",\n    \"6\\nGGGSSG\\n\",\n    \"94\\nGGSSGGSGGSSSSSGSSSGGSSSSSGSGGGGSGSGSGSGSGSSSSGGGSSGSSSSGSSSSSSSSSGSSSGGSSGGSGSSGSGGGGSGGGSSSSS\\n\",\n    \"20\\nSGSSGGGSSSSSSGGGGGSS\\n\",\n    \"10\\nGSSGSSSSSS\\n\",\n    \"10\\nGSGSGSGSGG\\n\",\n    \"16\\nGSGSSGSSGGGSSSGS\\n\",\n    \"8\\nSGSSGSSG\\n\",\n    \"26\\nGGSSSSGSSSSSSSGSSSSSSGSSGS\\n\",\n    \"10\\nSSGGSSGSSS\\n\",\n    \"20\\nGGGGSSGGGGSGGGSGGGGG\\n\",\n    \"8\\nGGGSSSGG\\n\",\n    \"15\\nGGSGGGSSGGGGGGG\\n\",\n    \"8\\nGSGSSGGG\\n\",\n    \"8\\nGSSGGGGG\\n\",\n    \"10\\nSSSSGGSGGG\\n\",\n    \"21\\nSSSGGGSGGGSSSGGGGGGGG\\n\",\n    \"10\\nGGGGSSGGSG\\n\",\n    \"5\\nGSSGG\\n\",\n    \"7\\nGGSSSSG\\n\",\n    \"7\\nGGGGSSG\\n\",\n    \"17\\nGSGSSGGGSSGGGGSGS\\n\",\n    \"10\\nGGSSGGSSSS\\n\",\n    \"8\\nGSGSGGGG\\n\",\n    \"7\\nGSSGSSG\\n\",\n    \"10\\nGGSSGSSSGG\\n\",\n    \"10\\nSSGGSSGGSS\\n\",\n    \"20\\nGSGGSSGGGSSSGGGGSSSS\\n\",\n    \"7\\nGSGGSGG\\n\",\n    \"9\\nGGGSSGGSG\\n\",\n    \"3\\nSGS\\n\",\n    \"10\\nSSGGGSSGGS\\n\",\n    \"4\\nGSSS\\n\",\n    \"7\\nGGSSGGG\\n\",\n    \"73\\nSGSGGGGSSGSGSGGGSSSSSGGSGGSSSGSGSGSSSSGSGGGSSSSGSSGSGSSSGSGGGSSGGGGGGGSSS\\n\",\n    \"9\\nGGGSSGGGG\\n\",\n    \"10\\nSGSGGSGGGG\\n\",\n    \"5\\nSSGSS\\n\",\n    \"5\\nGGSSS\\n\",\n    \"10\\nGGGGSSGGGG\\n\",\n    \"7\\nSGGSSGG\\n\",\n    \"5\\nSGSSG\\n\",\n    \"3\\nGSG\\n\",\n    \"7\\nGGSSGGS\\n\",\n    \"8\\nSSSGSSGG\\n\",\n    \"3\\nSSG\\n\",\n    \"8\\nGGGSSGGG\\n\",\n    \"11\\nSGSGSGGGSSS\\n\",\n    \"6\\nGGSSSG\\n\",\n    \"6\\nGSGSGG\\n\",\n    \"8\\nSSSGGSGG\\n\",\n    \"10\\nGSSSSGGGGG\\n\",\n    \"7\\nGSSGGSG\\n\",\n    \"10\\nGSSSSSSSGG\\n\",\n    \"5\\nSSGGG\\n\",\n    \"6\\nSSSSSS\\n\",\n    \"7\\nGGSGGSG\\n\",\n    \"20\\nSSSSSGGGGSGGGGGGGGGG\\n\",\n    \"6\\nGSSGGS\\n\",\n    \"8\\nGSSGSSGG\\n\",\n    \"6\\nGSSGGG\\n\",\n    \"5\\nSGSSS\\n\",\n    \"3\\nGGS\\n\",\n    \"10\\nSGGGSSGGSS\\n\",\n    \"3\\nGSS\\n\",\n    \"11\\nGSSSGGGGGGG\\n\",\n    \"10\\nSSSGGSGGGG\\n\",\n    \"6\\nSGGSSG\\n\",\n    \"6\\nSGSSGG\\n\",\n    \"20\\nSSGSSGGGGSGGGGGGGGGG\\n\",\n    \"8\\nSGGGSSSG\\n\",\n    \"9\\nGSGSSGGGS\\n\",\n    \"89\\nSGGSGSGGSSGGSGGSGGGGSSGSSSSSGGGGGGGGGGSSSSGGGGSSSSSGSSSSSGSGSGSGGGSSSGSGGGSSSGSGSGSSGSSGS\\n\",\n    \"9\\nGGGGGSSGG\\n\",\n    \"9\\nSGSSGSSGS\\n\",\n    \"10\\nGGGSSSGGGS\\n\",\n    \"20\\nSGSSSGGGGSGGGGGGGGGG\\n\",\n    \"7\\nGSSGGGG\\n\",\n    \"18\\nGSGSSSSGSSGGGSSSGG\\n\",\n    \"7\\nGSSSSGG\\n\",\n    \"9\\nGSSGGSGGG\\n\",\n    \"17\\nSSSSGSGSGSGSGSGGG\\n\",\n    \"9\\nGGSSGGGGS\\n\",\n    \"8\\nGSSGGSSG\\n\",\n    \"15\\nSGGSSGGSGGSGGGS\\n\",\n    \"7\\nGSSSGSG\\n\",\n    \"10\\nGSSSGSSSSG\\n\",\n    \"8\\nSGGSSGGS\\n\",\n    \"13\\nSSGGSSSSGSSSS\\n\",\n    \"19\\nGSGGGSSSGGGGGGGGGGG\\n\",\n    \"15\\nGSGGSGGSSGGGGGG\\n\",\n    \"6\\nSGSGSS\\n\",\n    \"46\\nGGGGGGGSSSSGGSGGGSSGSSGSSGGGSGSGGSSGSSSSGGSSSS\\n\",\n    \"6\\nGGSGGG\\n\",\n    \"40\\nGSSGGGGGGGSSSGSGSSGGGSSSSGSGSSSSGSSSGSSS\\n\",\n    \"8\\nGGSSSSSG\\n\",\n    \"32\\nGSGSSGGSGGSGGSGGSGGSGSGGSSSGGGGG\\n\",\n    \"8\\nGSGGSGGS\\n\",\n    \"8\\nGGSSSGGG\\n\",\n    \"10\\nSGGSGGSGGG\\n\",\n    \"10\\nSSSGGGSSSG\\n\",\n    \"7\\nSSGGSSG\\n\",\n    \"13\\nGSGSSSSSSGGGG\\n\",\n    \"12\\nGGSGGSSGGGGG\\n\",\n    \"9\\nSGGSGGSGG\\n\",\n    \"30\\nGGGGGGSSGGSSSGSSGSSGSSSGGSSSGG\\n\",\n    \"11\\nGSGSGSSSGGG\\n\",\n    \"10\\nSGGGGGGSSG\\n\",\n    \"9\\nSSSGGSSGS\\n\",\n    \"20\\nSGGGSSGGGGSSGSGGSSGS\\n\",\n    \"5\\nSGGSS\\n\",\n    \"4\\nGGGS\\n\",\n    \"90\\nSSGSGGSGSGGGSSSSSGSGSSSGGSSGSGSGSSGGGSGGSGGGSSSSSGSGGGSSSSSGSSSSGGSGGSSSSGGGSSSGSSSGGGSGGG\\n\",\n    \"30\\nSGGGGSSSGSGSSSSSSGGGGSSGGSSSGS\\n\",\n    \"11\\nGGSGSSGGGGG\\n\",\n    \"10\\nGGGSSGGSGG\\n\",\n    \"10\\nSGSGGGGSGG\\n\",\n    \"4\\nSSSS\\n\",\n    \"9\\nGGSGSSSGG\\n\",\n    \"14\\nGSGSSSSGGGSSGS\\n\",\n    \"3\\nSGG\\n\",\n    \"9\\nGGGSSGGSS\\n\",\n    \"8\\nGSSSGSGG\\n\",\n    \"9\\nSSSSGGSGG\\n\",\n    \"4\\nSSGG\\n\",\n    \"38\\nGSSSSSGGGSSGGGGSSSSSSGGGSSGSSGGGSSGGSS\\n\",\n    \"5\\nGGSGG\\n\",\n    \"4\\nSGGS\\n\",\n    \"10\\nSSGSSSGGGS\\n\",\n    \"5\\nGSGSG\\n\",\n    \"5\\nSSGSG\\n\",\n    \"5\\nGSGGG\\n\",\n    \"11\\nSSGSSGGGSSG\\n\",\n    \"9\\nSSGGGSGSS\\n\",\n    \"4\\nGGSG\\n\",\n    \"8\\nGGSSSGGS\\n\",\n    \"6\\nSGGSGG\\n\",\n    \"10\\nSSGGSSSSSS\\n\",\n    \"10\\nGGGSGGGGSS\\n\",\n    \"170\\nSGSGSGGGGGGSGSSGSGSGGSGGGGGGSSSGSGSGGSGGSGSGGGGSSSSSGSSGSSSSSGSGGGSGGSGSGSSGSSSGGSSGGGSGGGSSGGSGSGGSGGGGSGGGSSSGGGGSSSSSSGGSGSSSGSGGSSGGSGSGSGGGGSSSGGGGGGSGGSGGGGGGSGGGGS\\n\",\n    \"10\\nSGSGSSGGGG\\n\",\n    \"183\\nGSSSSGGSSGSGSSGGGGGSGSSGGGSSSSGGGSSSGSGSSSSGSGGSGSGSGGSGGGSSSGSGSGSSSGSGSGSGGSGSGGGGGSSGSGGGGSGGGGSSGGGSSSGSGGGSGGSSSGSGSSSSSSSSSSGSSGSGSSGGSGSSSGGGSGSGSGSGSSSSGGGSGSGGGGGSGSSSSSGGSSG\\n\",\n    \"123\\nGSSSSGGGSSSGSGGSGGSGGGGGGSGSGGSGSGGGGGGGSSGGSGGGGSGGSGSSSSSSGGGSGGGGGGGSGGGSSGSSSGGGGSGGGSSGSSGSSGSSGGSGGSGSSSSGSSGGGGGGSSS\\n\",\n    \"100\\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\\n\",\n    \"174\\nGGGGSSSGGGGSGGSSSGSSSGGGGGGGSSSSSSSSGGSGSSSSGGGSSGSGGSGSSSSSGGGSSGGGGSGSSGSSGSGSSSGGSGSGSGSSSGSGGSGGSSGGSSSSGSSGSSGGSSGSSGGGGSSGSSGGGGGSSSSGGGGSSGSGSGSGGGSGSGGGSGGGSGSGSGGGGG\\n\",\n    \"181\\nGGGGGGGGGGGSSGGGGGGGSSSGSSSSGSSGSSSGGSGGSGGSSGSSGSSGGSGGGSSGGGSGGGGGSGGGSGSGSGSSGSSGGSGGGGSSGGSGGSGSSSSGSSGGSGGSSSGSSGSSGGGSGSSGGGSGSSGGGSSSSSSGGSSSSGSGSSSSSGGSGSSSGGGGSSGGGSGGGSGSS\\n\",\n    \"169\\nGSGSGSGGSGSSSGSSGSGGGSGGGSSSGGSGSSSSSGGGGSSSSGGGSSGSGGSGGSGGSSGGGGSSGSSGSSSGSGGSSGGSSGGSSGSGSSGSSSSSSGSGSSGSSSGGSGSGGSSSSGSGGSGSSSSGSGGSSGGGSGGSGGSSSSGSSGSSSSSGGGGGGGSGS\\n\",\n    \"33\\nGGGGSSSGGSSSGGGGGGGSGGGGSGGGGGGGG\\n\",\n    \"134\\nGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGSGS\\n\"\n  ],\n  \"outputs\": [\n    \"7\\n\",\n    \"4\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"6\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"8\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"9\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"8\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"0\\n\",\n    \"5\\n\",\n    \"14\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"8\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"15\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"11\\n\",\n    \"6\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"15\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"12\\n\",\n    \"7\\n\",\n    \"2\\n\",\n    \"8\\n\",\n    \"5\\n\",\n    \"8\\n\",\n    \"3\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"6\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"4\\n\",\n    \"7\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"7\\n\",\n    \"5\\n\",\n    \"6\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"0\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"7\\n\",\n    \"11\\n\",\n    \"5\\n\",\n    \"9\\n\",\n    \"11\\n\",\n    \"0\\n\",\n    \"8\\n\",\n    \"12\\n\",\n    \"9\\n\",\n    \"13\\n\",\n    \"3\\n\"\n  ]\n}",
    "{\n  \"inputs\": [\n    \"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\\n\",\n    \"9 3\\n3 9 5\\n0\\n0\\n3 9 4 5\\n0\\n0\\n1 8\\n1 6\\n1 2\\n2 1 2\\n\",\n    \"3 3\\n1 2 3\\n1 2\\n1 3\\n1 1\\n\",\n    \"5 3\\n2 1 4\\n0\\n0\\n1 5\\n0\\n0\\n\",\n    \"5 2\\n4 1\\n0\\n1 4\\n1 5\\n0\\n2 1 2\\n\",\n    \"5 2\\n4 5\\n2 3 4\\n1 4\\n1 4\\n0\\n0\\n\",\n    \"6 6\\n5 4 3 2 6 1\\n1 4\\n0\\n2 2 6\\n2 3 6\\n3 3 4 6\\n0\\n\",\n    \"6 6\\n4 1 6 3 2 5\\n2 3 5\\n4 1 3 4 5\\n1 5\\n2 3 5\\n0\\n2 1 5\\n\",\n    \"6 5\\n2 4 1 3 5\\n0\\n0\\n0\\n1 1\\n0\\n1 3\\n\",\n    \"7 6\\n4 3 2 1 6 5\\n0\\n2 4 5\\n1 6\\n1 7\\n1 6\\n0\\n1 4\\n\",\n    \"7 2\\n1 5\\n5 2 3 4 5 6\\n2 1 7\\n0\\n3 1 2 7\\n0\\n2 5 7\\n0\\n\",\n    \"7 6\\n2 5 3 1 7 6\\n1 7\\n2 3 7\\n0\\n0\\n0\\n1 3\\n1 2\\n\",\n    \"3 3\\n1 3 2\\n0\\n1 3\\n1 1\\n\",\n    \"10 1\\n1\\n1 5\\n1 3\\n0\\n1 10\\n0\\n1 8\\n1 1\\n2 7 4\\n2 6 2\\n0\\n\",\n    \"1 1\\n1\\n0\\n\",\n    \"2 2\\n1 2\\n0\\n0\\n\",\n    \"2 2\\n2 1\\n0\\n0\\n\",\n    \"2 1\\n1\\n1 2\\n0\\n\",\n    \"2 1\\n1\\n0\\n0\\n\",\n    \"2 1\\n2\\n0\\n1 1\\n\",\n    \"2 1\\n2\\n0\\n0\\n\",\n    \"3 1\\n1\\n2 2 3\\n0\\n1 2\\n\",\n    \"3 3\\n2 1 3\\n0\\n2 1 3\\n1 2\\n\",\n    \"10 3\\n8 4 1\\n1 3\\n0\\n0\\n0\\n1 1\\n2 10 9\\n1 4\\n3 5 1 2\\n2 2 7\\n2 8 4\\n\",\n    \"6 6\\n1 2 3 4 5 6\\n2 2 6\\n1 3\\n2 4 5\\n0\\n1 4\\n1 2\\n\",\n    \"3 2\\n1 3\\n0\\n0\\n1 1\\n\",\n    \"3 1\\n1\\n2 2 3\\n0\\n0\\n\",\n    \"3 3\\n3 1 2\\n0\\n0\\n0\\n\",\n    \"3 3\\n1 2 3\\n0\\n0\\n0\\n\",\n    \"3 2\\n2 1\\n0\\n0\\n0\\n\",\n    \"3 3\\n3 2 1\\n0\\n0\\n0\\n\",\n    \"3 3\\n3 2 1\\n0\\n0\\n0\\n\",\n    \"3 3\\n3 1 2\\n0\\n0\\n0\\n\",\n    \"3 2\\n3 2\\n0\\n1 3\\n1 1\\n\",\n    \"3 3\\n2 1 3\\n0\\n1 1\\n0\\n\",\n    \"3 2\\n3 1\\n1 3\\n0\\n0\\n\",\n    \"3 1\\n3\\n0\\n0\\n1 2\\n\",\n    \"3 1\\n1\\n0\\n1 1\\n0\\n\",\n    \"3 2\\n3 2\\n0\\n1 1\\n1 2\\n\",\n    \"3 3\\n1 2 3\\n0\\n1 1\\n2 1 2\\n\",\n    \"4 2\\n2 3\\n2 3 4\\n1 1\\n0\\n0\\n\",\n    \"4 4\\n3 2 1 4\\n2 2 3\\n1 1\\n1 2\\n1 3\\n\",\n    \"4 2\\n4 3\\n0\\n0\\n0\\n0\\n\",\n    \"4 1\\n1\\n2 2 3\\n0\\n2 2 4\\n0\\n\",\n    \"4 1\\n2\\n0\\n0\\n2 1 4\\n2 1 2\\n\",\n    \"4 4\\n3 1 4 2\\n1 2\\n1 3\\n1 2\\n0\\n\",\n    \"4 4\\n1 3 2 4\\n1 3\\n1 3\\n0\\n1 2\\n\",\n    \"4 1\\n4\\n2 2 4\\n0\\n1 2\\n0\\n\",\n    \"4 2\\n3 1\\n0\\n0\\n0\\n0\\n\",\n    \"4 4\\n3 1 4 2\\n1 4\\n0\\n0\\n0\\n\",\n    \"4 1\\n1\\n1 4\\n2 1 3\\n1 4\\n1 3\\n\",\n    \"4 2\\n3 2\\n0\\n1 4\\n1 1\\n0\\n\",\n    \"4 4\\n2 3 1 4\\n0\\n2 1 3\\n2 1 4\\n0\\n\",\n    \"4 4\\n4 1 2 3\\n2 2 4\\n0\\n0\\n0\\n\",\n    \"4 1\\n1\\n0\\n1 1\\n0\\n0\\n\",\n    \"5 1\\n5\\n0\\n1 1\\n2 2 5\\n0\\n0\\n\",\n    \"5 5\\n1 2 4 3 5\\n0\\n0\\n2 1 2\\n1 5\\n0\\n\",\n    \"5 5\\n2 1 5 4 3\\n1 4\\n0\\n0\\n0\\n1 2\\n\",\n    \"5 2\\n2 4\\n1 2\\n0\\n1 2\\n1 2\\n0\\n\",\n    \"5 2\\n2 1\\n1 3\\n1 3\\n1 1\\n3 1 2 3\\n1 3\\n\",\n    \"5 4\\n5 2 1 3\\n2 3 5\\n1 3\\n0\\n0\\n2 2 4\\n\",\n    \"5 4\\n5 1 4 2\\n0\\n0\\n1 5\\n1 1\\n0\\n\",\n    \"5 2\\n1 3\\n0\\n2 4 5\\n0\\n1 2\\n2 1 2\\n\",\n    \"5 1\\n5\\n1 4\\n2 1 4\\n2 4 5\\n2 2 5\\n1 1\\n\",\n    \"5 4\\n3 2 1 4\\n1 2\\n0\\n0\\n0\\n0\\n\",\n    \"5 1\\n2\\n3 2 3 4\\n0\\n2 2 4\\n0\\n4 1 2 3 4\\n\",\n    \"5 3\\n5 2 4\\n1 4\\n0\\n0\\n0\\n0\\n\",\n    \"5 1\\n3\\n2 4 5\\n0\\n0\\n0\\n1 3\\n\",\n    \"5 3\\n2 5 1\\n1 2\\n0\\n0\\n1 5\\n0\\n\",\n    \"5 3\\n4 2 3\\n0\\n0\\n1 2\\n0\\n1 4\\n\",\n    \"6 4\\n2 1 4 3\\n3 3 4 5\\n1 4\\n0\\n1 3\\n4 2 3 4 6\\n1 3\\n\",\n    \"6 2\\n3 6\\n2 2 3\\n0\\n1 1\\n1 6\\n0\\n0\\n\",\n    \"6 1\\n2\\n0\\n0\\n1 6\\n0\\n1 2\\n0\\n\",\n    \"6 3\\n6 5 1\\n0\\n1 1\\n0\\n1 3\\n0\\n1 5\\n\",\n    \"6 6\\n1 3 6 5 4 2\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"6 5\\n3 4 1 6 5\\n2 2 6\\n2 4 5\\n1 1\\n0\\n1 4\\n0\\n\",\n    \"6 2\\n5 2\\n1 4\\n0\\n1 2\\n0\\n0\\n1 5\\n\",\n    \"6 6\\n4 5 1 6 3 2\\n0\\n1 6\\n1 1\\n2 1 3\\n1 1\\n2 1 3\\n\",\n    \"6 6\\n3 2 4 1 5 6\\n1 6\\n1 1\\n0\\n1 5\\n0\\n0\\n\",\n    \"6 1\\n3\\n2 4 6\\n2 4 6\\n2 1 2\\n1 2\\n1 2\\n1 5\\n\",\n    \"6 6\\n5 1 2 3 6 4\\n0\\n0\\n0\\n0\\n1 4\\n1 1\\n\",\n    \"6 5\\n3 6 2 4 1\\n1 4\\n1 3\\n0\\n0\\n0\\n2 1 5\\n\",\n    \"6 4\\n4 3 6 5\\n0\\n0\\n3 1 4 5\\n1 6\\n1 6\\n0\\n\",\n    \"6 1\\n1\\n0\\n0\\n1 5\\n0\\n0\\n1 5\\n\",\n    \"6 6\\n4 2 5 6 1 3\\n1 3\\n0\\n2 5 6\\n2 2 6\\n1 2\\n1 4\\n\",\n    \"7 7\\n1 7 6 2 5 4 3\\n0\\n2 5 6\\n1 5\\n1 2\\n0\\n1 1\\n1 1\\n\",\n    \"7 6\\n6 3 5 1 4 7\\n0\\n0\\n0\\n0\\n1 1\\n1 2\\n1 1\\n\",\n    \"7 2\\n2 3\\n0\\n0\\n0\\n0\\n0\\n1 4\\n0\\n\",\n    \"7 4\\n7 5 4 2\\n0\\n2 6 7\\n0\\n1 3\\n2 2 6\\n0\\n2 3 4\\n\",\n    \"7 6\\n5 4 2 1 6 7\\n2 2 7\\n1 5\\n0\\n0\\n1 3\\n1 2\\n0\\n\",\n    \"7 4\\n2 1 6 7\\n0\\n2 3 6\\n1 6\\n0\\n2 1 3\\n1 7\\n0\\n\",\n    \"7 2\\n5 1\\n4 2 5 6 7\\n1 5\\n5 1 2 5 6 7\\n1 2\\n0\\n0\\n4 2 4 5 6\\n\",\n    \"7 1\\n5\\n2 2 5\\n0\\n2 5 7\\n0\\n1 6\\n0\\n0\\n\",\n    \"7 6\\n5 7 2 4 3 6\\n2 5 7\\n0\\n3 2 5 7\\n2 2 6\\n0\\n0\\n2 2 5\\n\",\n    \"7 4\\n6 4 7 3\\n0\\n0\\n2 2 5\\n1 6\\n2 1 7\\n2 1 2\\n0\\n\",\n    \"7 5\\n1 5 4 7 2\\n1 4\\n4 1 4 6 7\\n2 1 4\\n1 6\\n3 3 4 7\\n0\\n0\\n\",\n    \"2 1\\n1\\n0\\n1 1\\n\",\n    \"2 1\\n1\\n1 2\\n1 1\\n\",\n    \"2 1\\n2\\n1 2\\n0\\n\",\n    \"2 1\\n2\\n1 2\\n1 1\\n\",\n    \"2 2\\n1 2\\n1 2\\n0\\n\",\n    \"2 2\\n2 1\\n0\\n1 1\\n\",\n    \"2 2\\n2 1\\n1 2\\n1 1\\n\",\n    \"7 1\\n4\\n0\\n6 1 3 4 5 6 7\\n4 1 4 6 7\\n2 1 7\\n4 1 3 6 7\\n2 3 4\\n0\\n\",\n    \"7 2\\n1 2\\n0\\n0\\n3 2 4 6\\n1 3\\n1 6\\n1 5\\n0\\n\",\n    \"7 4\\n1 7 6 2\\n1 7\\n0\\n0\\n0\\n1 1\\n0\\n0\\n\",\n    \"7 6\\n3 7 4 1 6 2\\n2 4 6\\n0\\n0\\n3 2 3 5\\n1 3\\n1 2\\n3 1 5 6\\n\",\n    \"8 5\\n7 1 2 8 3\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"8 3\\n4 8 7\\n0\\n1 3\\n0\\n1 2\\n0\\n0\\n1 1\\n0\\n\",\n    \"8 2\\n2 6\\n0\\n0\\n0\\n2 5 7\\n0\\n2 1 2\\n0\\n3 1 2 3\\n\",\n    \"8 6\\n8 3 6 4 7 5\\n0\\n1 4\\n1 4\\n1 8\\n1 7\\n1 4\\n0\\n0\\n\",\n    \"8 7\\n2 5 3 6 4 8 1\\n3 3 5 6\\n1 3\\n2 4 5\\n4 1 2 5 6\\n2 1 2\\n2 2 8\\n1 2\\n2 6 7\\n\",\n    \"8 5\\n2 5 8 3 1\\n3 2 5 6\\n1 5\\n1 4\\n5 1 5 6 7 8\\n0\\n2 2 8\\n4 1 3 5 6\\n1 2\\n\",\n    \"8 5\\n6 4 7 5 1\\n1 7\\n1 6\\n1 1\\n0\\n0\\n0\\n1 5\\n1 7\\n\",\n    \"8 3\\n3 1 8\\n0\\n3 4 6 7\\n2 6 7\\n2 3 6\\n2 4 6\\n1 1\\n1 1\\n1 3\\n\",\n    \"8 8\\n6 3 1 2 4 8 5 7\\n0\\n0\\n0\\n2 5 7\\n0\\n1 5\\n0\\n1 1\\n\",\n    \"8 5\\n2 1 5 7 6\\n1 8\\n3 3 4 6\\n0\\n0\\n1 6\\n0\\n0\\n0\\n\",\n    \"8 8\\n3 1 2 7 8 4 5 6\\n2 4 8\\n2 3 8\\n1 6\\n0\\n2 4 6\\n0\\n5 2 3 4 5 8\\n2 3 4\\n\",\n    \"8 3\\n4 3 1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"8 1\\n3\\n0\\n3 1 3 6\\n0\\n0\\n1 1\\n0\\n1 6\\n1 7\\n\",\n    \"8 8\\n5 8 7 2 1 3 4 6\\n1 3\\n3 1 3 4\\n0\\n0\\n1 1\\n1 5\\n0\\n2 4 6\\n\",\n    \"8 7\\n6 3 7 8 1 5 4\\n0\\n2 1 5\\n0\\n2 7 8\\n1 4\\n0\\n0\\n0\\n\",\n    \"9 9\\n6 3 1 4 2 9 5 7 8\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"9 3\\n5 7 3\\n3 3 4 5\\n4 4 6 7 9\\n2 1 2\\n2 3 5\\n1 3\\n4 4 5 7 8\\n3 1 4 5\\n3 1 3 4\\n7 1 2 4 5 6 7 8\\n\",\n    \"9 6\\n1 6 7 4 5 3\\n2 2 6\\n3 5 6 8\\n5 2 4 5 6 9\\n3 5 6 8\\n0\\n0\\n5 2 3 5 6 9\\n4 1 3 5 6\\n5 1 2 4 6 8\\n\",\n    \"9 8\\n4 2 9 1 8 3 7 6\\n0\\n2 1 8\\n0\\n0\\n1 1\\n2 1 8\\n2 6 8\\n3 4 5 9\\n5 1 2 5 7 8\\n\",\n    \"9 2\\n6 9\\n2 3 9\\n0\\n1 8\\n1 6\\n3 3 6 7\\n1 2\\n1 9\\n0\\n0\\n\",\n    \"9 6\\n5 4 3 2 6 7\\n3 4 5 9\\n1 6\\n4 1 5 8 9\\n3 3 5 6\\n0\\n0\\n2 3 8\\n1 3\\n0\\n\",\n    \"9 8\\n2 8 4 7 3 6 9 5\\n0\\n1 4\\n0\\n0\\n0\\n1 8\\n0\\n3 2 3 7\\n0\\n\",\n    \"9 6\\n6 7 1 5 9 2\\n0\\n0\\n0\\n0\\n1 4\\n0\\n0\\n2 1 3\\n1 6\\n\",\n    \"9 4\\n5 1 2 3\\n1 7\\n0\\n1 8\\n0\\n0\\n3 1 5 8\\n1 6\\n2 5 7\\n2 1 4\\n\",\n    \"9 8\\n4 8 6 9 5 7 2 3\\n0\\n1 4\\n0\\n3 2 6 8\\n1 6\\n1 7\\n0\\n0\\n2 3 6\\n\",\n    \"9 3\\n8 5 3\\n3 3 6 9\\n1 5\\n1 5\\n1 8\\n1 2\\n1 3\\n1 9\\n1 5\\n0\\n\",\n    \"9 6\\n7 3 1 6 4 2\\n1 3\\n0\\n1 7\\n1 8\\n1 4\\n1 7\\n1 8\\n0\\n2 1 7\\n\",\n    \"9 2\\n7 4\\n1 2\\n0\\n1 7\\n0\\n1 1\\n0\\n0\\n2 2 6\\n1 5\\n\",\n    \"9 5\\n3 8 2 5 1\\n1 5\\n3 1 6 7\\n3 4 6 8\\n3 2 6 9\\n2 7 9\\n2 5 7\\n1 2\\n2 4 5\\n2 1 6\\n\",\n    \"9 4\\n6 9 7 8\\n3 5 8 9\\n1 3\\n1 4\\n0\\n2 4 9\\n2 4 9\\n5 2 3 4 8 9\\n0\\n1 7\\n\",\n    \"10 1\\n7\\n2 4 10\\n1 8\\n2 4 8\\n0\\n1 3\\n1 2\\n2 3 5\\n1 7\\n0\\n1 1\\n\",\n    \"10 2\\n9 4\\n0\\n0\\n0\\n0\\n1 7\\n0\\n0\\n1 9\\n0\\n0\\n\",\n    \"10 3\\n7 5 3\\n3 3 4 5\\n1 10\\n1 7\\n3 2 6 7\\n1 7\\n0\\n0\\n3 1 4 6\\n3 2 3 5\\n1 6\\n\",\n    \"10 1\\n1\\n1 5\\n1 1\\n3 4 6 10\\n1 1\\n0\\n4 1 2 5 9\\n4 1 6 9 10\\n6 1 2 3 6 9 10\\n2 2 5\\n4 1 2 5 9\\n\",\n    \"10 1\\n4\\n0\\n0\\n0\\n0\\n1 10\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"10 10\\n6 2 4 5 8 1 9 3 10 7\\n4 2 7 8 9\\n2 7 9\\n5 1 6 8 9 10\\n2 7 9\\n6 1 4 6 7 8 9\\n1 8\\n0\\n2 4 9\\n0\\n4 2 4 7 9\\n\",\n    \"10 5\\n2 1 10 4 9\\n2 3 6\\n5 1 6 7 8 10\\n3 4 6 7\\n2 1 6\\n2 6 7\\n1 3\\n1 4\\n3 5 6 10\\n4 1 2 8 10\\n4 1 5 6 7\\n\",\n    \"10 5\\n4 8 3 1 6\\n0\\n1 10\\n0\\n0\\n1 3\\n2 3 5\\n1 3\\n1 10\\n2 1 6\\n0\\n\",\n    \"10 8\\n1 5 4 10 6 2 3 9\\n7 3 4 5 6 7 8 10\\n1 5\\n4 2 5 7 10\\n3 2 5 6\\n0\\n3 2 5 7\\n1 2\\n8 1 2 3 5 6 7 9 10\\n4 2 4 6 7\\n3 4 6 7\\n\",\n    \"10 5\\n6 9 8 5 2\\n2 7 9\\n4 4 5 6 7\\n2 6 7\\n2 5 8\\n2 6 9\\n1 9\\n2 2 6\\n3 1 2 7\\n3 3 5 6\\n6 1 2 5 6 8 9\\n\",\n    \"10 7\\n7 10 5 1 9 4 3\\n4 2 4 9 10\\n5 1 4 6 8 9\\n7 2 4 5 6 7 8 10\\n3 3 5 10\\n2 7 10\\n3 4 5 9\\n6 1 2 3 4 6 8\\n4 1 3 4 10\\n1 5\\n1 1\\n\",\n    \"10 9\\n5 1 3 6 10 8 2 9 7\\n0\\n0\\n2 1 6\\n1 3\\n1 4\\n2 5 7\\n1 6\\n0\\n1 8\\n0\\n\",\n    \"10 4\\n2 5 10 9\\n2 2 4\\n5 3 4 6 7 10\\n2 7 10\\n4 1 3 8 10\\n2 6 10\\n2 7 10\\n1 1\\n3 6 7 10\\n1 7\\n3 1 7 8\\n\",\n    \"10 8\\n6 8 2 1 7 10 3 4\\n0\\n2 1 4\\n2 6 7\\n0\\n3 1 8 9\\n3 1 8 9\\n0\\n0\\n1 6\\n1 8\\n\",\n    \"10 3\\n1 6 3\\n1 4\\n1 4\\n0\\n0\\n2 3 10\\n1 2\\n0\\n1 4\\n0\\n1 2\\n\",\n    \"11 2\\n10 7\\n5 2 3 6 10 11\\n0\\n1 8\\n5 1 3 6 9 10\\n4 1 2 3 6\\n1 5\\n5 2 6 9 10 11\\n5 2 3 4 7 11\\n3 3 6 8\\n6 2 4 5 6 8 9\\n3 2 3 5\\n\",\n    \"11 11\\n3 2 1 7 8 4 10 11 9 6 5\\n3 2 7 11\\n0\\n0\\n1 11\\n1 1\\n1 8\\n2 4 5\\n0\\n1 4\\n0\\n0\\n\",\n    \"11 7\\n11 2 1 7 9 8 6\\n0\\n7 3 4 5 6 8 10 11\\n3 1 5 8\\n1 11\\n3 1 7 8\\n7 1 3 4 5 7 8 10\\n3 4 6 8\\n1 5\\n2 8 10\\n4 1 4 5 7\\n5 1 4 6 8 10\\n\",\n    \"11 6\\n7 1 10 3 2 11\\n0\\n1 11\\n0\\n0\\n1 9\\n1 5\\n0\\n0\\n0\\n0\\n0\\n\",\n    \"11 7\\n6 9 7 3 4 10 11\\n4 3 6 8 11\\n3 3 5 9\\n2 6 7\\n1 6\\n1 4\\n0\\n0\\n2 7 9\\n0\\n2 4 11\\n3 6 7 9\\n\",\n    \"11 5\\n10 11 8 2 7\\n1 9\\n1 3\\n0\\n1 6\\n1 1\\n0\\n0\\n1 2\\n2 4 8\\n0\\n0\\n\",\n    \"11 6\\n6 3 11 1 9 4\\n6 2 3 6 7 8 9\\n4 5 6 8 10\\n4 1 2 6 8\\n7 1 3 5 6 7 9 11\\n4 3 6 7 8\\n1 8\\n2 3 9\\n0\\n0\\n5 1 5 7 8 9\\n5 1 2 3 7 8\\n\",\n    \"11 6\\n4 2 9 7 3 1\\n1 11\\n0\\n1 10\\n1 11\\n3 7 8 10\\n1 11\\n1 11\\n1 11\\n0\\n1 2\\n1 2\\n\",\n    \"11 5\\n3 2 5 7 6\\n4 3 5 7 9\\n2 7 9\\n3 7 9 11\\n5 5 6 7 9 10\\n3 7 9 11\\n6 2 3 5 7 10 11\\n0\\n2 7 10\\n0\\n2 2 11\\n2 7 9\\n\",\n    \"11 11\\n11 6 4 7 8 5 1 3 2 9 10\\n5 3 4 7 9 11\\n0\\n1 2\\n1 3\\n2 3 4\\n6 1 3 4 8 10 11\\n1 3\\n2 2 4\\n3 2 4 11\\n5 4 5 7 9 11\\n4 2 3 4 7\\n\",\n    \"11 6\\n7 1 6 4 3 8\\n0\\n0\\n1 2\\n1 1\\n0\\n0\\n1 8\\n0\\n0\\n1 1\\n0\\n\",\n    \"11 3\\n9 11 5\\n0\\n0\\n0\\n0\\n1 8\\n0\\n2 1 11\\n0\\n1 2\\n0\\n0\\n\",\n    \"11 11\\n5 4 2 1 6 10 3 7 11 8 9\\n0\\n1 3\\n0\\n0\\n0\\n2 9 11\\n1 9\\n0\\n0\\n0\\n0\\n\",\n    \"11 10\\n9 6 10 3 2 8 4 7 11 5\\n1 2\\n0\\n5 1 8 9 10 11\\n4 1 7 8 11\\n3 2 7 11\\n3 1 7 10\\n0\\n2 6 11\\n6 1 2 6 7 10 11\\n2 1 11\\n2 1 7\\n\",\n    \"11 10\\n5 8 7 6 1 4 9 3 2 11\\n3 3 8 10\\n2 4 8\\n1 5\\n2 1 11\\n1 4\\n3 4 8 9\\n2 3 11\\n1 5\\n3 1 5 8\\n2 3 5\\n0\\n\",\n    \"12 9\\n9 2 5 7 6 1 10 12 11\\n0\\n3 6 7 12\\n1 4\\n1 7\\n1 3\\n1 1\\n0\\n0\\n2 1 4\\n1 3\\n0\\n2 2 10\\n\",\n    \"12 10\\n2 6 1 5 7 9 10 8 12 3\\n1 10\\n1 9\\n1 11\\n0\\n1 10\\n0\\n1 3\\n1 7\\n1 6\\n1 11\\n0\\n0\\n\",\n    \"12 10\\n9 11 3 6 4 12 2 7 10 8\\n1 7\\n3 7 8 9\\n3 1 8 11\\n4 1 7 9 10\\n1 4\\n1 12\\n1 2\\n1 2\\n0\\n2 1 9\\n1 7\\n1 7\\n\",\n    \"12 3\\n8 10 11\\n4 2 5 6 7\\n5 4 7 8 10 11\\n6 2 4 5 6 8 10\\n2 6 8\\n0\\n3 5 7 8\\n0\\n2 3 7\\n8 2 4 5 6 8 10 11 12\\n2 4 7\\n6 2 3 5 6 7 12\\n5 1 3 6 7 8\\n\",\n    \"12 1\\n8\\n2 2 4\\n1 9\\n1 10\\n1 12\\n4 6 10 11 12\\n0\\n0\\n1 9\\n0\\n1 8\\n0\\n0\\n\",\n    \"12 10\\n4 10 9 6 7 2 1 11 3 8\\n1 4\\n0\\n7 2 4 5 6 7 8 11\\n3 1 10 11\\n3 4 8 12\\n6 4 7 8 10 11 12\\n2 2 11\\n1 11\\n6 3 4 8 10 11 12\\n1 12\\n1 1\\n0\\n\",\n    \"12 3\\n4 7 8\\n2 11 12\\n0\\n0\\n2 3 9\\n3 7 11 12\\n5 1 3 7 8 10\\n1 3\\n0\\n2 2 8\\n1 11\\n0\\n2 8 11\\n\",\n    \"12 9\\n2 10 6 3 4 12 7 1 5\\n0\\n0\\n0\\n1 8\\n0\\n1 8\\n0\\n1 3\\n0\\n0\\n0\\n1 8\\n\",\n    \"12 1\\n10\\n0\\n1 12\\n2 2 9\\n0\\n2 1 2\\n3 1 7 8\\n3 8 9 10\\n0\\n0\\n3 5 11 12\\n0\\n0\\n\",\n    \"12 4\\n5 1 7 3\\n0\\n3 4 5 12\\n0\\n1 10\\n1 12\\n1 9\\n3 3 4 9\\n1 1\\n1 11\\n1 5\\n2 1 4\\n0\\n\",\n    \"12 2\\n11 4\\n0\\n0\\n0\\n1 5\\n0\\n0\\n0\\n0\\n1 2\\n0\\n0\\n0\\n\",\n    \"12 2\\n6 8\\n6 2 4 5 7 9 11\\n4 8 9 11 12\\n0\\n2 8 9\\n2 8 12\\n4 2 3 5 9\\n2 9 12\\n0\\n0\\n4 3 4 7 9\\n2 7 8\\n0\\n\",\n    \"12 10\\n8 7 9 5 10 6 4 12 3 11\\n1 5\\n1 10\\n1 1\\n1 5\\n1 7\\n1 11\\n1 10\\n2 1 3\\n0\\n1 1\\n1 8\\n0\\n\",\n    \"12 1\\n4\\n2 4 11\\n1 8\\n2 2 5\\n0\\n0\\n1 3\\n0\\n0\\n1 2\\n1 9\\n2 2 6\\n0\\n\",\n    \"12 2\\n10 5\\n0\\n0\\n3 1 5 11\\n1 3\\n0\\n1 1\\n2 5 9\\n2 5 7\\n1 8\\n2 6 9\\n0\\n1 1\\n\"\n  ],\n  \"outputs\": [\n    \"5\\n1 2 3 4 5 \\n\",\n    \"6\\n1 2 9 4 5 3 \\n\",\n    \"-1\\n\",\n    \"3\\n1 2 4 \\n\",\n    \"2\\n1 4 \\n\",\n    \"2\\n4 5 \\n\",\n    \"6\\n2 6 3 4 1 5 \\n\",\n    \"6\\n5 3 1 4 2 6 \\n\",\n    \"5\\n1 2 3 4 5 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"3\\n1 3 2 \\n\",\n    \"2\\n5 1 \\n\",\n    \"1\\n1 \\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n1 2 \\n\",\n    \"2\\n2 1 \\n\",\n    \"1\\n1 \\n\",\n    \"2\\n1 2 \\n\",\n    \"1\\n2 \\n\",\n    \"3\\n2 3 1 \\n\",\n    \"-1\\n\",\n    \"6\\n3 1 2 4 5 8 \\n\",\n    \"6\\n4 5 3 2 6 1 \\n\",\n    \"2\\n1 3 \\n\",\n    \"3\\n2 3 1 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n1 2 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 3 2 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"2\\n3 1 \\n\",\n    \"2\\n2 3 \\n\",\n    \"1\\n1 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"3\\n1 2 3 \\n\",\n    \"4\\n3 4 1 2 \\n\",\n    \"-1\\n\",\n    \"2\\n3 4 \\n\",\n    \"4\\n2 4 3 1 \\n\",\n    \"1\\n2 \\n\",\n    \"-1\\n\",\n    \"4\\n3 1 2 4 \\n\",\n    \"1\\n4 \\n\",\n    \"2\\n1 3 \\n\",\n    \"4\\n4 1 2 3 \\n\",\n    \"-1\\n\",\n    \"4\\n1 4 2 3 \\n\",\n    \"4\\n1 4 3 2 \\n\",\n    \"4\\n2 4 1 3 \\n\",\n    \"1\\n1 \\n\",\n    \"1\\n5 \\n\",\n    \"5\\n1 2 3 5 4 \\n\",\n    \"5\\n4 1 2 3 5 \\n\",\n    \"2\\n2 4 \\n\",\n    \"-1\\n\",\n    \"5\\n3 2 4 5 1 \\n\",\n    \"4\\n1 2 4 5 \\n\",\n    \"2\\n1 3 \\n\",\n    \"-1\\n\",\n    \"4\\n2 1 3 4 \\n\",\n    \"1\\n2 \\n\",\n    \"3\\n2 4 5 \\n\",\n    \"1\\n3 \\n\",\n    \"3\\n2 1 5 \\n\",\n    \"3\\n2 3 4 \\n\",\n    \"6\\n3 4 2 6 5 1 \\n\",\n    \"-1\\n\",\n    \"1\\n2 \\n\",\n    \"3\\n1 5 6 \\n\",\n    \"6\\n1 2 3 4 5 6 \\n\",\n    \"6\\n4 5 2 6 1 3 \\n\",\n    \"2\\n2 5 \\n\",\n    \"6\\n1 3 6 2 4 5 \\n\",\n    \"6\\n6 1 2 3 5 4 \\n\",\n    \"-1\\n\",\n    \"6\\n1 2 3 4 5 6 \\n\",\n    \"6\\n4 1 3 2 5 6 \\n\",\n    \"5\\n1 6 4 5 3 \\n\",\n    \"1\\n1 \\n\",\n    \"-1\\n\",\n    \"7\\n1 5 6 2 3 4 7 \\n\",\n    \"7\\n1 2 3 4 5 6 7 \\n\",\n    \"2\\n2 3 \\n\",\n    \"6\\n6 3 4 7 2 5 \\n\",\n    \"7\\n3 5 2 7 1 4 6 \\n\",\n    \"5\\n1 7 6 3 2 \\n\",\n    \"6\\n5 2 6 4 7 1 \\n\",\n    \"2\\n6 5 \\n\",\n    \"6\\n2 5 7 3 6 4 \\n\",\n    \"7\\n1 2 7 5 3 6 4 \\n\",\n    \"7\\n6 4 1 7 2 3 5 \\n\",\n    \"1\\n1 \\n\",\n    \"-1\\n\",\n    \"1\\n2 \\n\",\n    \"-1\\n\",\n    \"2\\n2 1 \\n\",\n    \"2\\n1 2 \\n\",\n    \"-1\\n\",\n    \"3\\n1 7 4 \\n\",\n    \"2\\n1 2 \\n\",\n    \"4\\n7 1 2 6 \\n\",\n    \"7\\n2 3 5 4 6 1 7 \\n\",\n    \"5\\n1 2 3 7 8 \\n\",\n    \"6\\n1 3 2 4 7 8 \\n\",\n    \"3\\n1 2 6 \\n\",\n    \"6\\n8 4 3 7 5 6 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"5\\n5 7 1 4 6 \\n\",\n    \"5\\n1 6 7 3 8 \\n\",\n    \"8\\n1 2 3 5 7 4 6 8 \\n\",\n    \"8\\n8 1 3 4 6 2 5 7 \\n\",\n    \"8\\n4 6 3 8 1 2 5 7 \\n\",\n    \"3\\n1 3 4 \\n\",\n    \"1\\n3 \\n\",\n    \"8\\n3 1 4 2 5 6 7 8 \\n\",\n    \"7\\n1 3 7 8 4 5 6 \\n\",\n    \"9\\n1 2 3 4 5 6 7 8 9 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"3\\n2 6 9 \\n\",\n    \"-1\\n\",\n    \"8\\n4 2 3 5 7 8 6 9 \\n\",\n    \"7\\n1 2 4 5 6 7 9 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"7\\n8 7 3 1 2 4 6 \\n\",\n    \"2\\n4 7 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"2\\n4 9 \\n\",\n    \"3\\n7 3 5 \\n\",\n    \"2\\n5 1 \\n\",\n    \"1\\n4 \\n\",\n    \"10\\n7 9 2 4 8 1 6 10 3 5 \\n\",\n    \"-1\\n\",\n    \"7\\n1 3 4 5 6 10 8 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"5\\n4 1 2 3 6 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"6\\n1 11 2 3 7 10 \\n\",\n    \"7\\n6 7 3 4 9 11 10 \\n\",\n    \"6\\n3 2 7 8 10 11 \\n\",\n    \"-1\\n\",\n    \"8\\n2 11 1 10 3 4 7 9 \\n\",\n    \"8\\n7 9 2 11 3 5 10 6 \\n\",\n    \"11\\n2 3 4 7 11 9 1 5 8 10 6 \\n\",\n    \"7\\n1 2 3 4 6 8 7 \\n\",\n    \"5\\n2 8 5 9 11 \\n\",\n    \"11\\n1 3 2 4 5 9 11 6 7 8 10 \\n\",\n    \"11\\n2 1 7 11 10 6 8 9 3 4 5 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"11\\n11 10 1 6 9 2 3 5 7 8 12 \\n\",\n    \"-1\\n\",\n    \"-1\\n\",\n    \"2\\n9 8 \\n\",\n    \"-1\\n\",\n    \"6\\n2 3 8 9 4 7 \\n\",\n    \"10\\n1 2 3 8 4 5 6 7 10 12 \\n\",\n    \"6\\n1 12 2 5 11 10 \\n\",\n    \"9\\n1 3 12 5 10 4 11 9 7 \\n\",\n    \"3\\n5 4 11 \\n\",\n    \"9\\n8 9 12 7 11 2 3 5 6 \\n\",\n    \"-1\\n\",\n    \"1\\n4 \\n\",\n    \"-1\\n\"\n  ]\n}",
    "{\"inputs\": [\"5 3\\n3 2 1\\n\", \"5 3\\n2 3 1\\n\", \"5 1\\n3\\n\", \"5 2\\n3 4\\n\", \"20 19\\n2 18 19 11 9 20 15 1 8 14 4 6 5 12 17 16 7 13 3\\n\", \"10 1\\n6\\n\", \"20 18\\n8 14 18 10 1 3 7 15 2 12 17 19 5 4 11 13 20 16\\n\", \"10 2\\n3 7\\n\", \"100000 3\\n43791 91790 34124\\n\", \"20 17\\n9 11 19 4 8 16 13 3 1 6 18 2 20 10 17 7 5\\n\", \"10 3\\n2 10 3\\n\", \"100000 4\\n8269 53984 47865 42245\\n\", \"20 16\\n8 1 5 11 15 14 7 20 16 9 12 13 18 4 6 10\\n\", \"10 4\\n2 4 1 10\\n\", \"100000 5\\n82211 48488 99853 11566 42120\\n\", \"20 15\\n6 7 14 13 8 4 15 2 11 9 12 16 5 1 20\\n\", \"10 5\\n2 10 5 8 4\\n\", \"100000 6\\n98217 55264 24242 71840 2627 67839\\n\", \"20 14\\n10 15 4 3 1 5 11 12 13 14 6 2 19 20\\n\", \"10 6\\n4 5 2 1 6 3\\n\", \"100000 7\\n44943 51099 61988 40497 85738 74092 2771\\n\", \"20 13\\n6 16 5 19 8 1 4 18 2 20 10 11 13\\n\", \"10 7\\n10 4 3 8 2 5 6\\n\", \"100000 8\\n88153 88461 80211 24770 13872 57414 32941 63030\\n\", \"20 12\\n20 11 14 7 16 13 9 1 4 18 6 12\\n\", \"10 8\\n7 9 3 6 2 4 1 8\\n\", \"40 39\\n25 4 26 34 35 11 22 23 21 2 1 28 20 8 36 5 27 15 39 7 24 14 17 19 33 6 38 16 18 3 32 10 30 13 37 31 29 9 12\\n\", \"20 1\\n20\\n\", \"40 38\\n32 35 36 4 22 6 15 21 40 13 33 17 5 24 28 9 1 23 25 14 26 3 8 11 37 30 18 16 19 20 27 12 39 2 10 38 29 31\\n\", \"20 2\\n1 13\\n\", \"200000 3\\n60323 163214 48453\\n\", \"40 37\\n26 16 40 10 9 30 8 33 39 19 4 11 2 3 38 21 22 12 1 27 20 37 24 17 23 14 13 29 7 28 34 31 25 35 6 32 5\\n\", \"20 3\\n16 6 14\\n\", \"200000 4\\n194118 175603 110154 129526\\n\", \"40 36\\n27 33 34 40 16 39 1 10 9 12 8 37 17 7 24 30 2 31 13 23 20 18 29 21 4 28 25 35 6 22 36 15 3 11 5 26\\n\", \"20 4\\n2 10 4 9\\n\", \"200000 5\\n53765 19781 63409 69811 120021\\n\", \"40 35\\n2 1 5 3 11 32 13 16 37 26 6 10 8 35 25 24 7 38 21 17 40 14 9 34 33 20 29 12 22 28 36 31 30 19 27\\n\", \"20 5\\n11 19 6 2 12\\n\", \"200000 6\\n33936 11771 42964 153325 684 8678\\n\", \"40 34\\n35 31 38 25 29 9 32 23 24 16 3 26 39 2 17 28 14 1 30 34 5 36 33 7 22 13 21 12 27 19 40 10 18 15\\n\", \"20 6\\n3 6 9 13 20 14\\n\", \"200000 7\\n175932 99083 128533 75304 164663 7578 174396\\n\", \"40 33\\n11 15 22 26 21 6 8 5 32 39 28 29 30 13 2 40 33 27 17 31 7 36 9 19 3 38 37 12 10 16 1 23 35\\n\", \"20 7\\n7 5 6 13 16 3 17\\n\", \"200000 8\\n197281 11492 67218 100058 179300 182264 17781 192818\\n\", \"40 32\\n22 7 35 31 14 28 9 20 10 3 38 6 15 36 33 16 37 2 11 13 26 23 30 12 40 5 21 1 34 19 27 24\\n\", \"20 8\\n1 16 14 11 7 9 2 12\\n\", \"30 3\\n17 5 3\\n\", \"30 3\\n29 25 21\\n\", \"10 6\\n2 1 4 3 6 5\\n\", \"4 3\\n2 1 3\\n\", \"6 4\\n5 4 3 1\\n\", \"4 3\\n1 2 3\\n\", \"6 4\\n1 3 2 6\\n\", \"5 4\\n3 2 1 5\\n\", \"10 4\\n6 4 1 3\\n\", \"4 3\\n3 4 2\\n\", \"4 3\\n3 1 4\\n\", \"3 2\\n2 3\\n\", \"4 3\\n1 4 2\\n\", \"4 3\\n3 1 2\\n\", \"2 1\\n1\\n\", \"3 2\\n3 2\\n\", \"4 3\\n4 1 2\\n\", \"3 2\\n3 1\\n\", \"4 3\\n2 1 4\\n\", \"8 5\\n3 1 4 2 7\\n\", \"6 4\\n2 5 1 4\\n\", \"10 5\\n10 1 8 5 6\\n\", \"10 3\\n6 4 3\\n\", \"10 3\\n2 1 6\\n\", \"10 3\\n8 1 7\\n\", \"10 2\\n5 4\\n\", \"10 3\\n1 2 10\\n\", \"10 4\\n4 1 6 3\\n\", \"10 3\\n8 1 5\\n\", \"10 4\\n1 4 9 8\\n\", \"10 3\\n3 1 6\\n\", \"10 6\\n1 2 5 4 3 6\\n\", \"10 9\\n9 8 7 5 4 3 2 1 6\\n\", \"10 4\\n4 7 5 10\\n\", \"10 5\\n8 6 2 1 5\\n\", \"10 7\\n7 5 2 1 4 3 6\\n\", \"10 4\\n1 2 10 6\\n\", \"10 6\\n1 10 9 5 4 3\\n\", \"10 8\\n6 10 4 7 9 8 5 3\\n\", \"10 4\\n6 1 10 3\\n\", \"10 9\\n9 6 1 4 2 3 5 10 7\\n\", \"10 9\\n10 1 9 3 2 4 5 8 6\\n\", \"10 4\\n10 8 1 7\\n\", \"10 4\\n2 1 3 6\\n\", \"10 3\\n2 1 4\\n\", \"10 3\\n4 1 5\\n\", \"10 5\\n9 8 1 2 10\\n\", \"10 3\\n9 8 3\\n\", \"10 4\\n8 2 1 5\\n\", \"10 6\\n6 5 3 1 2 4\\n\", \"10 2\\n1 2\\n\", \"10 6\\n9 6 5 2 1 4\\n\", \"10 4\\n2 1 7 3\\n\", \"10 2\\n6 5\\n\", \"10 3\\n2 1 5\\n\", \"10 4\\n3 1 2 4\\n\", \"10 3\\n8 5 4\\n\", \"10 4\\n2 1 8 4\\n\", \"10 3\\n8 3 2\\n\", \"10 3\\n5 4 2\\n\", \"10 9\\n10 8 7 5 6 2 1 9 4\\n\", \"10 4\\n2 1 6 4\\n\", \"10 4\\n2 1 3 9\\n\", \"10 3\\n1 4 3\\n\", \"10 7\\n3 2 1 9 8 6 5\\n\", \"10 4\\n10 7 1 5\\n\", \"10 4\\n8 7 1 2\\n\", \"10 4\\n1 5 4 2\\n\", \"10 5\\n2 1 9 3 7\\n\", \"10 4\\n2 1 5 3\\n\", \"10 5\\n9 6 1 8 2\\n\", \"20 13\\n3 2 1 7 4 5 6 11 10 9 8 13 12\\n\", \"20 14\\n3 2 1 7 4 5 6 14 11 10 9 8 13 12\\n\", \"10 5\\n9 4 2 1 5\\n\", \"10 5\\n1 5 2 10 3\\n\", \"10 8\\n6 5 3 1 2 4 9 8\\n\", \"10 4\\n10 9 3 7\\n\", \"10 7\\n10 8 5 1 2 7 3\\n\", \"10 3\\n3 1 5\\n\", \"10 5\\n1 9 8 4 3\\n\", \"10 3\\n1 8 4\\n\", \"10 4\\n6 2 1 4\\n\", \"10 3\\n1 6 4\\n\", \"10 3\\n10 9 3\\n\", \"10 9\\n8 10 4 1 3 2 9 7 5\\n\", \"10 3\\n7 10 6\\n\", \"10 3\\n9 10 8\\n\", \"10 6\\n10 8 1 6 2 7\\n\", \"10 6\\n6 5 1 2 9 3\\n\", \"10 3\\n10 1 8\\n\", \"10 9\\n1 9 7 10 5 8 4 6 3\\n\", \"10 5\\n1 9 3 2 5\\n\", \"10 4\\n10 1 9 7\\n\", \"10 8\\n1 10 3 2 9 4 8 5\\n\", \"10 1\\n1\\n\", \"10 7\\n9 7 1 6 5 4 2\\n\", \"10 9\\n10 2 1 7 8 3 5 6 9\\n\", \"10 4\\n2 1 3 10\\n\", \"10 9\\n5 1 4 6 3 9 8 10 7\\n\", \"10 6\\n8 2 1 7 6 5\\n\", \"10 5\\n2 9 8 6 1\\n\", \"10 4\\n9 2 1 6\\n\", \"10 3\\n2 1 7\\n\", \"10 7\\n4 1 2 10 9 6 3\\n\", \"10 6\\n10 2 1 3 9 4\\n\", \"10 4\\n9 2 1 4\\n\", \"10 3\\n5 1 4\\n\", \"10 4\\n4 1 2 10\\n\", \"8 6\\n5 4 3 2 1 8\\n\", \"10 4\\n1 6 5 4\\n\", \"10 2\\n10 2\\n\", \"10 5\\n1 6 2 10 5\\n\", \"10 9\\n6 1 2 10 9 5 3 4 8\\n\", \"10 5\\n4 1 7 2 3\\n\", \"10 4\\n2 1 3 4\\n\", \"11 2\\n3 2\\n\", \"6 5\\n3 2 1 4 5\\n\", \"5 4\\n2 1 3 5\\n\", \"10 6\\n3 2 1 5 4 6\\n\", \"11 5\\n1 8 7 6 5\\n\", \"10 3\\n2 1 3\\n\", \"10 4\\n2 1 7 6\\n\", \"10 4\\n5 4 1 8\\n\", \"10 4\\n9 1 5 4\\n\", \"10 3\\n6 1 4\\n\", \"10 6\\n1 9 3 2 4 6\\n\", \"10 3\\n10 1 9\\n\", \"10 3\\n1 9 7\\n\", \"10 2\\n2 10\\n\", \"10 5\\n9 2 1 4 3\\n\", \"10 6\\n1 2 3 6 5 4\\n\", \"10 5\\n7 6 5 1 4\\n\", \"10 9\\n8 1 3 4 10 5 9 7 2\\n\"], \"outputs\": [\"3 2 1 5 4 \", \"-1\\n\", \"3 2 1 5 4 \", \"-1\\n\", \"-1\\n\", \"6 5 4 3 2 1 10 9 8 7 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 \", \"-1\\n\", \"1 13 12 11 10 9 8 7 6 5 4 3 2 20 19 18 17 16 15 14 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"17 5 3 2 1 4 16 15 14 13 12 11 10 9 8 7 6 30 29 28 27 26 25 24 23 22 21 20 19 18 \", \"29 25 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 24 23 22 28 27 26 30 \", \"2 1 4 3 6 5 10 9 8 7 \", \"2 1 3 4 \", \"5 4 3 1 2 6 \", \"1 2 3 4 \", \"1 3 2 6 5 4 \", \"3 2 1 5 4 \", \"6 4 1 3 2 5 10 9 8 7 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"1 4 2 3 \", \"3 1 2 4 \", \"1 2 \", \"3 2 1 \", \"4 1 2 3 \", \"3 1 2 \", \"2 1 4 3 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"6 4 3 2 1 5 10 9 8 7 \", \"2 1 6 5 4 3 10 9 8 7 \", \"8 1 7 6 5 4 3 2 10 9 \", \"5 4 3 2 1 10 9 8 7 6 \", \"1 2 10 9 8 7 6 5 4 3 \", \"-1\\n\", \"8 1 5 4 3 2 7 6 10 9 \", \"-1\\n\", \"-1\\n\", \"1 2 5 4 3 6 10 9 8 7 \", \"9 8 7 5 4 3 2 1 6 10 \", \"-1\\n\", \"8 6 2 1 5 4 3 7 10 9 \", \"7 5 2 1 4 3 6 10 9 8 \", \"1 2 10 6 5 4 3 9 8 7 \", \"1 10 9 5 4 3 2 8 7 6 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"10 1 9 3 2 4 5 8 6 7 \", \"10 8 1 7 6 5 4 3 2 9 \", \"2 1 3 6 5 4 10 9 8 7 \", \"2 1 4 3 10 9 8 7 6 5 \", \"-1\\n\", \"-1\\n\", \"9 8 3 2 1 7 6 5 4 10 \", \"8 2 1 5 4 3 7 6 10 9 \", \"6 5 3 1 2 4 10 9 8 7 \", \"1 2 10 9 8 7 6 5 4 3 \", \"9 6 5 2 1 4 3 8 7 10 \", \"2 1 7 3 6 5 4 10 9 8 \", \"6 5 4 3 2 1 10 9 8 7 \", \"2 1 5 4 3 10 9 8 7 6 \", \"3 1 2 4 10 9 8 7 6 5 \", \"8 5 4 3 2 1 7 6 10 9 \", \"2 1 8 4 3 7 6 5 10 9 \", \"8 3 2 1 7 6 5 4 10 9 \", \"5 4 2 1 3 10 9 8 7 6 \", \"-1\\n\", \"2 1 6 4 3 5 10 9 8 7 \", \"2 1 3 9 8 7 6 5 4 10 \", \"1 4 3 2 10 9 8 7 6 5 \", \"3 2 1 9 8 6 5 4 7 10 \", \"10 7 1 5 4 3 2 6 9 8 \", \"8 7 1 2 6 5 4 3 10 9 \", \"1 5 4 2 3 10 9 8 7 6 \", \"2 1 9 3 7 6 5 4 8 10 \", \"2 1 5 3 4 10 9 8 7 6 \", \"-1\\n\", \"3 2 1 7 4 5 6 11 10 9 8 13 12 20 19 18 17 16 15 14 \", \"3 2 1 7 4 5 6 14 11 10 9 8 13 12 20 19 18 17 16 15 \", \"-1\\n\", \"-1\\n\", \"6 5 3 1 2 4 9 8 7 10 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"1 9 8 4 3 2 7 6 5 10 \", \"1 8 4 3 2 7 6 5 10 9 \", \"6 2 1 4 3 5 10 9 8 7 \", \"1 6 4 3 2 5 10 9 8 7 \", \"10 9 3 2 1 8 7 6 5 4 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"10 1 8 7 6 5 4 3 2 9 \", \"-1\\n\", \"1 9 3 2 5 4 8 7 6 10 \", \"10 1 9 7 6 5 4 3 2 8 \", \"1 10 3 2 9 4 8 5 7 6 \", \"1 10 9 8 7 6 5 4 3 2 \", \"9 7 1 6 5 4 2 3 8 10 \", \"-1\\n\", \"2 1 3 10 9 8 7 6 5 4 \", \"-1\\n\", \"8 2 1 7 6 5 4 3 10 9 \", \"-1\\n\", \"9 2 1 6 5 4 3 8 7 10 \", \"2 1 7 6 5 4 3 10 9 8 \", \"-1\\n\", \"10 2 1 3 9 4 8 7 6 5 \", \"9 2 1 4 3 8 7 6 5 10 \", \"5 1 4 3 2 10 9 8 7 6 \", \"-1\\n\", \"5 4 3 2 1 8 7 6 \", \"1 6 5 4 3 2 10 9 8 7 \", \"10 2 1 9 8 7 6 5 4 3 \", \"-1\\n\", \"-1\\n\", \"-1\\n\", \"2 1 3 4 10 9 8 7 6 5 \", \"3 2 1 11 10 9 8 7 6 5 4 \", \"3 2 1 4 5 6 \", \"2 1 3 5 4 \", \"3 2 1 5 4 6 10 9 8 7 \", \"1 8 7 6 5 4 3 2 11 10 9 \", \"2 1 3 10 9 8 7 6 5 4 \", \"2 1 7 6 5 4 3 10 9 8 \", \"-1\\n\", \"9 1 5 4 3 2 8 7 6 10 \", \"6 1 4 3 2 5 10 9 8 7 \", \"1 9 3 2 4 6 5 8 7 10 \", \"10 1 9 8 7 6 5 4 3 2 \", \"1 9 7 6 5 4 3 2 8 10 \", \"-1\\n\", \"9 2 1 4 3 8 7 6 5 10 \", \"1 2 3 6 5 4 10 9 8 7 \", \"7 6 5 1 4 3 2 10 9 8 \", \"-1\\n\"]}",
    "{\n  \"inputs\": [\n    \"1 7 3\\n\",\n    \"10 10 0\\n\",\n    \"1 -4 5\\n\",\n    \"0 60 50\\n\",\n    \"1 -4 -5\\n\",\n    \"0 1 0\\n\",\n    \"10 10 42\\n\",\n    \"-1000000000 1000000000 -1\\n\",\n    \"10 16 4\\n\",\n    \"-1000000000 1000000000 5\\n\",\n    \"1000000000 -1000000000 5\\n\",\n    \"1000000000 -1000000000 0\\n\",\n    \"1000000000 1000000000 0\\n\",\n    \"115078364 -899474523 -1\\n\",\n    \"-245436499 416383245 992\\n\",\n    \"-719636354 536952440 2\\n\",\n    \"-198350539 963391024 68337739\\n\",\n    \"-652811055 875986516 1091\\n\",\n    \"119057893 -516914539 -39748277\\n\",\n    \"989140430 731276607 -36837689\\n\",\n    \"677168390 494583489 -985071853\\n\",\n    \"58090193 777423708 395693923\\n\",\n    \"479823846 -403424770 -653472589\\n\",\n    \"-52536829 -132023273 -736287999\\n\",\n    \"-198893776 740026818 -547885271\\n\",\n    \"-2 -2 -2\\n\",\n    \"-2 -2 -1\\n\",\n    \"-2 -2 0\\n\",\n    \"-2 -2 1\\n\",\n    \"-2 -2 2\\n\",\n    \"-2 -1 -2\\n\",\n    \"-2 -1 -1\\n\",\n    \"-2 -1 0\\n\",\n    \"-2 -1 1\\n\",\n    \"-2 -1 2\\n\",\n    \"-2 0 -2\\n\",\n    \"-2 0 -1\\n\",\n    \"-2 0 0\\n\",\n    \"-2 0 1\\n\",\n    \"-2 0 2\\n\",\n    \"-2 1 -2\\n\",\n    \"-2 1 -1\\n\",\n    \"-2 1 0\\n\",\n    \"-2 1 1\\n\",\n    \"-2 1 2\\n\",\n    \"-2 2 -2\\n\",\n    \"-2 2 -1\\n\",\n    \"-2 2 0\\n\",\n    \"-2 2 1\\n\",\n    \"-2 2 2\\n\",\n    \"-1 -2 -2\\n\",\n    \"-1 -2 -1\\n\",\n    \"-1 -2 0\\n\",\n    \"-1 -2 1\\n\",\n    \"-1 -2 2\\n\",\n    \"-1 -1 -2\\n\",\n    \"-1 -1 -1\\n\",\n    \"-1 -1 0\\n\",\n    \"-1 -1 1\\n\",\n    \"-1 -1 2\\n\",\n    \"-1 0 -2\\n\",\n    \"-1 0 -1\\n\",\n    \"-1 0 0\\n\",\n    \"-1 0 1\\n\",\n    \"-1 0 2\\n\",\n    \"-1 1 -2\\n\",\n    \"-1 1 -1\\n\",\n    \"-1 1 0\\n\",\n    \"-1 1 1\\n\",\n    \"-1 1 2\\n\",\n    \"-1 2 -2\\n\",\n    \"-1 2 -1\\n\",\n    \"-1 2 0\\n\",\n    \"-1 2 1\\n\",\n    \"-1 2 2\\n\",\n    \"0 -2 -2\\n\",\n    \"0 -2 -1\\n\",\n    \"0 -2 0\\n\",\n    \"0 -2 1\\n\",\n    \"0 -2 2\\n\",\n    \"0 -1 -2\\n\",\n    \"0 -1 -1\\n\",\n    \"0 -1 0\\n\",\n    \"0 -1 1\\n\",\n    \"0 -1 2\\n\",\n    \"0 0 -2\\n\",\n    \"0 0 -1\\n\",\n    \"0 0 0\\n\",\n    \"0 0 1\\n\",\n    \"0 0 2\\n\",\n    \"0 1 -2\\n\",\n    \"0 1 -1\\n\",\n    \"0 1 0\\n\",\n    \"0 1 1\\n\",\n    \"0 1 2\\n\",\n    \"0 2 -2\\n\",\n    \"0 2 -1\\n\",\n    \"0 2 0\\n\",\n    \"0 2 1\\n\",\n    \"0 2 2\\n\",\n    \"1 -2 -2\\n\",\n    \"1 -2 -1\\n\",\n    \"1 -2 0\\n\",\n    \"1 -2 1\\n\",\n    \"1 -2 2\\n\",\n    \"1 -1 -2\\n\",\n    \"1 -1 -1\\n\",\n    \"1 -1 0\\n\",\n    \"1 -1 1\\n\",\n    \"1 -1 2\\n\",\n    \"1 0 -2\\n\",\n    \"1 0 -1\\n\",\n    \"1 0 0\\n\",\n    \"1 0 1\\n\",\n    \"1 0 2\\n\",\n    \"1 1 -2\\n\",\n    \"1 1 -1\\n\",\n    \"1 1 0\\n\",\n    \"1 1 1\\n\",\n    \"1 1 2\\n\",\n    \"1 2 -2\\n\",\n    \"1 2 -1\\n\",\n    \"1 2 0\\n\",\n    \"1 2 1\\n\",\n    \"1 2 2\\n\",\n    \"2 -2 -2\\n\",\n    \"2 -2 -1\\n\",\n    \"2 -2 0\\n\",\n    \"2 -2 1\\n\",\n    \"2 -2 2\\n\",\n    \"2 -1 -2\\n\",\n    \"2 -1 -1\\n\",\n    \"2 -1 0\\n\",\n    \"2 -1 1\\n\",\n    \"2 -1 2\\n\",\n    \"2 0 -2\\n\",\n    \"2 0 -1\\n\",\n    \"2 0 0\\n\",\n    \"2 0 1\\n\",\n    \"2 0 2\\n\",\n    \"2 1 -2\\n\",\n    \"2 1 -1\\n\",\n    \"2 1 0\\n\",\n    \"2 1 1\\n\",\n    \"2 1 2\\n\",\n    \"2 2 -2\\n\",\n    \"2 2 -1\\n\",\n    \"2 2 0\\n\",\n    \"2 2 1\\n\",\n    \"2 2 2\\n\",\n    \"-1000000000 1000000000 1\\n\",\n    \"-1000000000 1000000000 2\\n\",\n    \"1000000000 -1000000000 -1\\n\",\n    \"5 2 3\\n\",\n    \"2 1 -1\\n\",\n    \"3 2 1\\n\",\n    \"0 -5 -3\\n\",\n    \"2 5 5\\n\",\n    \"0 10 1\\n\",\n    \"15 5 -5\\n\",\n    \"2 1 1\\n\",\n    \"20 10 0\\n\",\n    \"20 15 5\\n\",\n    \"1 6 1\\n\",\n    \"1000000000 0 -1000000000\\n\",\n    \"1 1 -5\\n\",\n    \"4 6 1\\n\",\n    \"-5 -10 -5\\n\",\n    \"2 0 0\\n\",\n    \"10 9 -1\\n\",\n    \"-2 -1 -1\\n\",\n    \"1 13 3\\n\",\n    \"2 3 0\\n\",\n    \"1 1 -1\\n\",\n    \"5 -10 -5\\n\",\n    \"5 3 1\\n\",\n    \"1 1000000000 1\\n\",\n    \"-1000000000 1000000000 1000000000\\n\"\n  ],\n  \"outputs\": [\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"YES\\n\"\n  ]\n}",
    "{\n  \"inputs\": [\n    \"3\\n1\\n4\\n3\\n\",\n    \"0\\n0\\n0\\n0\\n\",\n    \"1\\n2\\n3\\n4\\n\",\n    \"1000000000\\n1000000000\\n1000000000\\n1000000000\\n\",\n    \"1000000000\\n1000000000\\n1000000000\\n999999999\\n\",\n    \"1000000000\\n999999999\\n1000000000\\n1000000000\\n\",\n    \"0\\n1000000000\\n0\\n0\\n\",\n    \"0\\n0\\n1\\n0\\n\",\n    \"4\\n3\\n2\\n1\\n\",\n    \"1\\n2\\n2\\n1\\n\",\n    \"2\\n0\\n2\\n0\\n\",\n    \"1\\n0\\n1\\n1\\n\",\n    \"20123\\n1\\n1\\n1\\n\",\n    \"0\\n40\\n2\\n0\\n\",\n    \"925\\n22\\n24\\n111\\n\",\n    \"1\\n20\\n20\\n1\\n\",\n    \"0\\n1\\n1\\n0\\n\",\n    \"1\\n1\\n0\\n1\\n\",\n    \"20123\\n2\\n3\\n4\\n\",\n    \"0\\n0\\n0\\n1\\n\",\n    \"1\\n0\\n6\\n1\\n\",\n    \"0\\n0\\n10\\n0\\n\",\n    \"1\\n0\\n3\\n1\\n\",\n    \"2\\n2\\n6\\n2\\n\",\n    \"4\\n5\\n10\\n4\\n\",\n    \"0\\n0\\n3\\n0\\n\",\n    \"0\\n0\\n3\\n3\\n\",\n    \"1\\n0\\n5\\n1\\n\",\n    \"2\\n0\\n10\\n2\\n\",\n    \"1\\n10\\n10\\n1\\n\",\n    \"4\\n5\\n100\\n4\\n\",\n    \"1\\n2\\n3\\n1\\n\",\n    \"2\\n100\\n100\\n2\\n\",\n    \"1\\n1\\n4\\n1\\n\",\n    \"1\\n2\\n100\\n1\\n\",\n    \"1\\n0\\n100\\n1\\n\",\n    \"1\\n0\\n10\\n1\\n\",\n    \"1\\n2\\n11\\n1\\n\",\n    \"1\\n0\\n0\\n1\\n\",\n    \"0\\n2\\n2\\n0\\n\",\n    \"1\\n0\\n4\\n1\\n\",\n    \"1\\n1\\n7\\n1\\n\",\n    \"0\\n10\\n1\\n0\\n\",\n    \"5\\n5\\n1000\\n5\\n\",\n    \"2\\n0\\n5\\n2\\n\",\n    \"1\\n1\\n10\\n1\\n\",\n    \"0\\n0\\n4\\n0\\n\",\n    \"0\\n3\\n1\\n0\\n\",\n    \"0\\n2\\n1\\n0\\n\",\n    \"0\\n3\\n9\\n0\\n\",\n    \"0\\n0\\n2\\n0\\n\",\n    \"0\\n100\\n1\\n0\\n\",\n    \"0\\n7\\n2\\n0\\n\",\n    \"0\\n1\\n0\\n1\\n\",\n    \"1\\n5\\n0\\n1\\n\",\n    \"2\\n6\\n6\\n2\\n\",\n    \"1\\n1\\n100\\n1\\n\",\n    \"3\\n0\\n7\\n3\\n\",\n    \"1\\n500\\n500\\n1\\n\",\n    \"1\\n2\\n0\\n1\\n\",\n    \"1\\n0\\n10000000\\n1\\n\",\n    \"1\\n1\\n100000\\n1\\n\",\n    \"1\\n3\\n5\\n1\\n\",\n    \"0\\n1\\n3\\n0\\n\",\n    \"3\\n1\\n100\\n3\\n\",\n    \"2\\n0\\n1\\n2\\n\",\n    \"0\\n2\\n0\\n1\\n\",\n    \"1\\n0\\n1000000\\n1\\n\",\n    \"0\\n1\\n1\\n1\\n\",\n    \"1\\n0\\n500\\n1\\n\",\n    \"4\\n0\\n20\\n4\\n\",\n    \"0\\n4\\n1\\n0\\n\",\n    \"4\\n5\\n100000000\\n4\\n\",\n    \"5\\n5\\n3\\n5\\n\",\n    \"0\\n1\\n10\\n0\\n\",\n    \"5\\n1\\n20\\n5\\n\",\n    \"2\\n0\\n100\\n2\\n\",\n    \"1\\n100\\n100\\n1\\n\",\n    \"1\\n2\\n5\\n1\\n\",\n    \"0\\n1\\n0\\n0\\n\",\n    \"1\\n5\\n10\\n1\\n\",\n    \"5\\n5\\n2\\n5\\n\",\n    \"1\\n3\\n10\\n1\\n\",\n    \"2\\n2\\n9\\n2\\n\",\n    \"1\\n1000000000\\n1000000000\\n1\\n\",\n    \"0\\n0\\n0\\n5\\n\",\n    \"1\\n1\\n3\\n1\\n\",\n    \"5\\n5\\n1000000\\n5\\n\",\n    \"2\\n2\\n10\\n2\\n\",\n    \"1\\n900\\n900\\n1\\n\",\n    \"5\\n0\\n0\\n5\\n\",\n    \"3\\n2\\n7\\n3\\n\",\n    \"2\\n1\\n5\\n2\\n\",\n    \"1\\n2\\n6\\n1\\n\",\n    \"0\\n1\\n2\\n0\\n\",\n    \"0\\n3\\n4\\n0\\n\",\n    \"5\\n5\\n10000\\n5\\n\",\n    \"1\\n1\\n2\\n1\\n\",\n    \"4\\n1\\n10\\n4\\n\",\n    \"1\\n2\\n10\\n1\\n\",\n    \"4\\n0\\n0\\n4\\n\",\n    \"5\\n5\\n100000\\n5\\n\",\n    \"4\\n3\\n0\\n3\\n\",\n    \"2\\n0\\n200\\n2\\n\",\n    \"1\\n0\\n0\\n2\\n\",\n    \"10\\n21\\n21\\n10\\n\",\n    \"0\\n5\\n1\\n0\\n\",\n    \"1\\n10\\n100\\n1\\n\",\n    \"3\\n0\\n0\\n1\\n\",\n    \"4\\n2\\n133\\n4\\n\",\n    \"5\\n1\\n50\\n5\\n\",\n    \"0\\n1\\n0\\n10\\n\",\n    \"2\\n0\\n7\\n2\\n\",\n    \"2\\n0\\n0\\n3\\n\",\n    \"4\\n0\\n10\\n4\\n\",\n    \"3\\n1\\n8\\n3\\n\",\n    \"0\\n3\\n3\\n0\\n\",\n    \"7\\n1\\n0\\n7\\n\",\n    \"0\\n2\\n3\\n0\\n\",\n    \"2\\n0\\n0\\n1\\n\",\n    \"1\\n1\\n50\\n1\\n\",\n    \"2\\n10\\n10\\n2\\n\",\n    \"5\\n0\\n228\\n5\\n\",\n    \"4\\n3\\n9\\n4\\n\",\n    \"1\\n0\\n8\\n1\\n\",\n    \"666\\n666\\n666\\n666\\n\",\n    \"5\\n5\\n12\\n5\\n\",\n    \"1\\n47\\n47\\n1\\n\",\n    \"0\\n1\\n100\\n0\\n\",\n    \"1\\n0\\n1999\\n1\\n\",\n    \"0\\n5\\n5\\n0\\n\",\n    \"1\\n0\\n2019\\n1\\n\",\n    \"0\\n3\\n5\\n0\\n\",\n    \"0\\n5\\n2\\n0\\n\",\n    \"1\\n1\\n5\\n1\\n\",\n    \"1\\n1\\n200\\n1\\n\",\n    \"100\\n100\\n1000\\n100\\n\",\n    \"0\\n10\\n2\\n0\\n\",\n    \"0\\n4\\n10\\n0\\n\",\n    \"1\\n0\\n0\\n0\\n\",\n    \"2\\n2\\n3\\n4\\n\",\n    \"2\\n0\\n0\\n2\\n\",\n    \"1\\n1\\n101\\n1\\n\",\n    \"1\\n0\\n50\\n1\\n\",\n    \"1\\n0\\n1000\\n1\\n\",\n    \"3\\n2\\n12\\n3\\n\",\n    \"12\\n4\\n0\\n13\\n\",\n    \"0\\n6\\n1\\n0\\n\",\n    \"2\\n1\\n45\\n2\\n\",\n    \"2\\n5\\n8\\n2\\n\",\n    \"0\\n2\\n0\\n3\\n\",\n    \"2\\n0\\n0\\n4\\n\",\n    \"2\\n1\\n69\\n2\\n\",\n    \"1\\n5\\n0\\n2\\n\",\n    \"1\\n0\\n2\\n1\\n\",\n    \"11\\n1\\n111\\n11\\n\",\n    \"0\\n4\\n3\\n0\\n\",\n    \"0\\n1\\n5\\n0\\n\",\n    \"1\\n3\\n3\\n1\\n\",\n    \"100007\\n1\\n1\\n1\\n\",\n    \"34\\n95\\n0\\n16\\n\",\n    \"5\\n0\\n0\\n0\\n\",\n    \"1\\n2\\n3\\n5\\n\",\n    \"3\\n1\\n0\\n4\\n\",\n    \"16\\n93\\n0\\n2\\n\",\n    \"0\\n0\\n0\\n3\\n\",\n    \"20\\n24\\n45\\n20\\n\",\n    \"23\\n0\\n49\\n23\\n\",\n    \"99\\n49\\n0\\n0\\n\",\n    \"100000\\n100000\\n100000\\n100000\\n\",\n    \"200000\\n200000\\n200000\\n200000\\n\",\n    \"0\\n5\\n0\\n2\\n\",\n    \"1\\n123\\n123\\n1\\n\"\n  ],\n  \"outputs\": [\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"0\\n\",\n    \"1\\n\"\n  ]\n}",
    "{\n  \"inputs\": [\n    \"10 5 3\\n\",\n    \"10 5 7\\n\",\n    \"10 5 12\\n\",\n    \"840585600 770678331 788528791\\n\",\n    \"25462281 23343504 8024619\\n\",\n    \"723717988 205757169 291917494\\n\",\n    \"27462087 20831796 15492397\\n\",\n    \"966696824 346707476 1196846860\\n\",\n    \"290274403 41153108 327683325\\n\",\n    \"170963478 151220598 222269210\\n\",\n    \"14264008 309456 11132789\\n\",\n    \"886869816 281212106 52891064\\n\",\n    \"330543750 243917820 205522400\\n\",\n    \"457658451 18625039 157624558\\n\",\n    \"385908940 143313325 509731380\\n\",\n    \"241227633 220621961 10025257\\n\",\n    \"474139818 268918981 388282504\\n\",\n    \"25963410 3071034 820199\\n\",\n    \"656346757 647995766 75748423\\n\",\n    \"588568132 411878522 521753621\\n\",\n    \"735788762 355228487 139602545\\n\",\n    \"860798593 463398487 506871376\\n\",\n    \"362624055 110824996 194551217\\n\",\n    \"211691721 195866131 313244576\\n\",\n    \"45661815 26072719 9643822\\n\",\n    \"757183104 590795077 709609355\\n\",\n    \"418386749 1915035 197248338\\n\",\n    \"763782282 297277890 246562421\\n\",\n    \"893323188 617630677 607049638\\n\",\n    \"506708261 356545583 296093684\\n\",\n    \"984295813 427551190 84113823\\n\",\n    \"774984967 61373612 96603505\\n\",\n    \"774578969 342441237 91492393\\n\",\n    \"76495801 8780305 56447339\\n\",\n    \"48538385 582843 16805978\\n\",\n    \"325794610 238970909 553089099\\n\",\n    \"834925315 316928679 711068031\\n\",\n    \"932182199 454838315 267066713\\n\",\n    \"627793782 552043394 67061810\\n\",\n    \"24317170 17881607 218412\\n\",\n    \"1000000000 1000 1\\n\",\n    \"1000000000 1000 2\\n\",\n    \"1000000000 1 1000\\n\",\n    \"100 100 100\\n\",\n    \"100 100 99\\n\",\n    \"100 100 101\\n\",\n    \"100 100 199\\n\",\n    \"1000000000 1000000000 1999999999\\n\",\n    \"10 5 5\\n\",\n    \"5 3 5\\n\",\n    \"10 3 3\\n\",\n    \"10 5 6\\n\",\n    \"3 2 4\\n\",\n    \"10 5 14\\n\",\n    \"6 1 4\\n\",\n    \"10 10 19\\n\",\n    \"10 4 11\\n\",\n    \"2 2 3\\n\",\n    \"10 5 11\\n\",\n    \"600 200 700\\n\",\n    \"2000 1000 2001\\n\",\n    \"1000 1000 1001\\n\",\n    \"5 4 6\\n\",\n    \"2 1 2\\n\",\n    \"10 3 10\\n\",\n    \"15 10 10\\n\",\n    \"10 5 13\\n\",\n    \"2 2 2\\n\",\n    \"5 5 6\\n\",\n    \"10 6 12\\n\",\n    \"7 5 8\\n\",\n    \"10 4 9\\n\",\n    \"9 2 6\\n\",\n    \"5 2 6\\n\",\n    \"6 2 6\\n\",\n    \"5 5 8\\n\",\n    \"3 3 5\\n\",\n    \"10 2 5\\n\",\n    \"5 3 7\\n\",\n    \"5 4 8\\n\",\n    \"10 6 11\\n\",\n    \"5 3 6\\n\",\n    \"10 6 14\\n\",\n    \"10 10 10\\n\",\n    \"1000000000 1 1000000000\\n\",\n    \"20 4 22\\n\",\n    \"5 4 4\\n\",\n    \"4 3 6\\n\",\n    \"12 8 18\\n\",\n    \"10 5 10\\n\",\n    \"100 50 149\\n\",\n    \"4 4 4\\n\",\n    \"7 6 9\\n\",\n    \"16 10 21\\n\",\n    \"10 2 11\\n\",\n    \"600 200 500\\n\",\n    \"100 30 102\\n\",\n    \"10 10 18\\n\",\n    \"15 3 10\\n\",\n    \"1000000000 1000000000 1000000000\\n\",\n    \"5 5 5\\n\",\n    \"10 3 12\\n\",\n    \"747 457 789\\n\",\n    \"5 4 7\\n\",\n    \"15 5 11\\n\",\n    \"3 2 2\\n\",\n    \"7 6 8\\n\",\n    \"7 4 8\\n\",\n    \"10 4 13\\n\",\n    \"10 3 9\\n\",\n    \"20 2 21\\n\",\n    \"6 5 9\\n\",\n    \"10 9 18\\n\",\n    \"12 4 9\\n\",\n    \"10 7 15\\n\",\n    \"999999999 999999998 1500000000\\n\",\n    \"20 5 20\\n\",\n    \"4745 4574 4757\\n\",\n    \"10 7 12\\n\",\n    \"17 15 18\\n\",\n    \"3 1 3\\n\",\n    \"100 3 7\\n\",\n    \"6 2 7\\n\",\n    \"8 5 10\\n\",\n    \"3 3 3\\n\",\n    \"9 5 10\\n\",\n    \"10 6 13\\n\",\n    \"13 10 14\\n\",\n    \"13 12 15\\n\",\n    \"10 4 12\\n\",\n    \"41 3 3\\n\",\n    \"1000000000 1000000000 1400000000\\n\",\n    \"10 3 11\\n\",\n    \"12 7 18\\n\",\n    \"15 3 17\\n\",\n    \"10 2 8\\n\",\n    \"1000000000 1000 1000000999\\n\",\n    \"5 5 9\\n\",\n    \"100 3 6\\n\",\n    \"100 5 50\\n\",\n    \"10000 10 10000\\n\",\n    \"1 1 1\\n\",\n    \"6 4 4\\n\",\n    \"9979797 555554 10101010\\n\",\n    \"13 5 12\\n\",\n    \"9 4 10\\n\",\n    \"7 5 10\\n\",\n    \"100000000 10000000 100005000\\n\",\n    \"100000 50000 100001\\n\",\n    \"15 10 20\\n\",\n    \"4 4 5\\n\",\n    \"5 3 3\\n\",\n    \"30 5 30\\n\",\n    \"200000 10 200005\\n\",\n    \"10 9 12\\n\",\n    \"10 6 15\\n\",\n    \"1000000000 10 1000000000\\n\",\n    \"7 5 11\\n\",\n    \"9 4 4\\n\",\n    \"14 3 15\\n\",\n    \"1000000000 100000000 1000000000\\n\",\n    \"40 10 22\\n\",\n    \"50 10 51\\n\",\n    \"999999997 999999995 1999999991\\n\",\n    \"92 79 144\\n\",\n    \"8 4 4\\n\"\n  ],\n  \"outputs\": [\n    \"3\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"770678331\\n\",\n    \"8024619\\n\",\n    \"205757169\\n\",\n    \"15492397\\n\",\n    \"116557440\\n\",\n    \"3744186\\n\",\n    \"99914866\\n\",\n    \"309456\\n\",\n    \"52891064\\n\",\n    \"205522400\\n\",\n    \"18625039\\n\",\n    \"19490885\\n\",\n    \"10025257\\n\",\n    \"268918981\\n\",\n    \"820199\\n\",\n    \"75748423\\n\",\n    \"411878522\\n\",\n    \"139602545\\n\",\n    \"463398487\\n\",\n    \"110824996\\n\",\n    \"94313276\\n\",\n    \"9643822\\n\",\n    \"590795077\\n\",\n    \"1915035\\n\",\n    \"246562421\\n\",\n    \"607049638\\n\",\n    \"296093684\\n\",\n    \"84113823\\n\",\n    \"61373612\\n\",\n    \"91492393\\n\",\n    \"8780305\\n\",\n    \"582843\\n\",\n    \"11676420\\n\",\n    \"316928679\\n\",\n    \"267066713\\n\",\n    \"67061810\\n\",\n    \"218412\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"100\\n\",\n    \"99\\n\",\n    \"99\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"100\\n\",\n    \"999\\n\",\n    \"999\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"2\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"4\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"4\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"200\\n\",\n    \"28\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"1000000000\\n\",\n    \"5\\n\",\n    \"1\\n\",\n    \"415\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"2\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"499999997\\n\",\n    \"5\\n\",\n    \"4562\\n\",\n    \"5\\n\",\n    \"14\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"4\\n\",\n    \"3\\n\",\n    \"9\\n\",\n    \"10\\n\",\n    \"2\\n\",\n    \"3\\n\",\n    \"600000000\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"2\\n\",\n    \"1\\n\",\n    \"1\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"434341\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"2\\n\",\n    \"9995000\\n\",\n    \"49999\\n\",\n    \"5\\n\",\n    \"3\\n\",\n    \"3\\n\",\n    \"5\\n\",\n    \"5\\n\",\n    \"7\\n\",\n    \"1\\n\",\n    \"10\\n\",\n    \"1\\n\",\n    \"4\\n\",\n    \"2\\n\",\n    \"100000000\\n\",\n    \"10\\n\",\n    \"9\\n\",\n    \"1\\n\",\n    \"27\\n\",\n    \"4\\n\"\n  ]\n}",
    "{\n  \"inputs\": [\n    \"cab\\n\",\n    \"acdb\\n\",\n    \"a\\n\",\n    \"ab\\n\",\n    \"ba\\n\",\n    \"dijee\\n\",\n    \"bhrmc\\n\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\",\n    \"bababaaababaabbbbbabbbbbbaaabbabaaaaabbbbbaaaabbbbabaabaabababbbabbabbabaaababbabbababaaaaabaaaabbba\\n\",\n    \"bccbbcccbccbacacbaccaababcbaababaaaaabcaaabcaacbabcaababaabaccacacccbacbcacbbbaacaaccccabbbbacbcbbba\\n\",\n    \"eejahjfbbcdhbieiigaihidhageiechaadieecaaehcehjbddgcjgagdfgffdaaihbecebdjhjagghecdhbhdfbedhfhfafbjajg\\n\",\n    \"bnrdfnybkzepmluyrhofwnwvfmkdwolvyzrqhuhztvlwjldqmoyxzytpfmrgouymeupxrvpbesyxixnrfbxnqcwgmgjstknqtwrr\\n\",\n    \"bcaeaae\\n\",\n    \"edcadcbcdd\\n\",\n    \"a\\n\",\n    \"a\\n\",\n    \"a\\n\",\n    \"b\\n\",\n    \"b\\n\",\n    \"a\\n\",\n    \"c\\n\",\n    \"a\\n\",\n    \"b\\n\",\n    \"c\\n\",\n    \"b\\n\",\n    \"a\\n\",\n    \"e\\n\",\n    \"b\\n\",\n    \"b\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"bb\\n\",\n    \"bb\\n\",\n    \"ba\\n\",\n    \"ca\\n\",\n    \"ab\\n\",\n    \"cb\\n\",\n    \"bb\\n\",\n    \"aa\\n\",\n    \"da\\n\",\n    \"ab\\n\",\n    \"cd\\n\",\n    \"aaa\\n\",\n    \"aaa\\n\",\n    \"aaa\\n\",\n    \"aab\\n\",\n    \"aaa\\n\",\n    \"baa\\n\",\n    \"bab\\n\",\n    \"baa\\n\",\n    \"ccc\\n\",\n    \"ddd\\n\",\n    \"ccd\\n\",\n    \"bca\\n\",\n    \"cde\\n\",\n    \"ece\\n\",\n    \"bdd\\n\",\n    \"aaaa\\n\",\n    \"aaaa\\n\",\n    \"aaaa\\n\",\n    \"abaa\\n\",\n    \"abab\\n\",\n    \"bbbb\\n\",\n    \"bbba\\n\",\n    \"caba\\n\",\n    \"ccbb\\n\",\n    \"abac\\n\",\n    \"daba\\n\",\n    \"cdbb\\n\",\n    \"bddd\\n\",\n    \"dacb\\n\",\n    \"abcc\\n\",\n    \"aaaaa\\n\",\n    \"aaaaa\\n\",\n    \"aaaaa\\n\",\n    \"baaab\\n\",\n    \"aabbb\\n\",\n    \"aabaa\\n\",\n    \"abcba\\n\",\n    \"bacbc\\n\",\n    \"bacba\\n\",\n    \"bdbda\\n\",\n    \"accbb\\n\",\n    \"dbccc\\n\",\n    \"decca\\n\",\n    \"dbbdd\\n\",\n    \"accec\\n\",\n    \"aaaaaa\\n\",\n    \"aaaaaa\\n\",\n    \"aaaaaa\\n\",\n    \"bbbbab\\n\",\n    \"bbbbab\\n\",\n    \"aaaaba\\n\",\n    \"cbbbcc\\n\",\n    \"aaacac\\n\",\n    \"bacbbc\\n\",\n    \"cacacc\\n\",\n    \"badbdc\\n\",\n    \"ddadad\\n\",\n    \"ccdece\\n\",\n    \"eecade\\n\",\n    \"eabdcb\\n\",\n    \"aaaaaaa\\n\",\n    \"aaaaaaa\\n\",\n    \"aaaaaaa\\n\",\n    \"aaabbaa\\n\",\n    \"baaabab\\n\",\n    \"bbababa\\n\",\n    \"bcccacc\\n\",\n    \"cbbcccc\\n\",\n    \"abacaaa\\n\",\n    \"ccdbdac\\n\",\n    \"bbacaba\\n\",\n    \"abbaccc\\n\",\n    \"bdcbcab\\n\",\n    \"dabcbce\\n\",\n    \"abaaabe\\n\",\n    \"aaaaaaaa\\n\",\n    \"aaaaaaaa\\n\",\n    \"aaaaaaaa\\n\",\n    \"ababbbba\\n\",\n    \"aaaaaaba\\n\",\n    \"babbbaab\\n\",\n    \"bcaccaab\\n\",\n    \"bbccaabc\\n\",\n    \"cacaaaac\\n\",\n    \"daacbddc\\n\",\n    \"cdbdcdaa\\n\",\n    \"bccbdacd\\n\",\n    \"abbeaade\\n\",\n    \"ccabecba\\n\",\n    \"ececaead\\n\",\n    \"aaaaaaaaa\\n\",\n    \"aaaaaaaaa\\n\",\n    \"aaaaaaaaa\\n\",\n    \"aabaaabbb\\n\",\n    \"abbbbbaab\\n\",\n    \"bbbaababb\\n\",\n    \"babcaaccb\\n\",\n    \"ccbcabaac\\n\",\n    \"caaaccccb\\n\",\n    \"abbcdbddb\\n\",\n    \"dbcaacbbb\\n\",\n    \"cadcbddac\\n\",\n    \"ecebadadb\\n\",\n    \"bdbeeccdd\\n\",\n    \"daaedecda\\n\",\n    \"aaaaaaaaaa\\n\",\n    \"aaaaaaaaaa\\n\",\n    \"aaaaaaaaaa\\n\",\n    \"abaaaaabbb\\n\",\n    \"bbaaaabaaa\\n\",\n    \"bbabbaaaaa\\n\",\n    \"cbaabcaacc\\n\",\n    \"aaaaccccab\\n\",\n    \"bccaccaacc\\n\",\n    \"dbdccdcacd\\n\",\n    \"caaddaaccb\\n\",\n    \"adbbabcbdc\\n\",\n    \"cdeabdbbad\\n\",\n    \"eeddcbeeec\\n\",\n    \"bbcebddeba\\n\"\n  ],\n  \"outputs\": [\n    \"abc\\n\",\n    \"abdc\\n\",\n    \"a\\n\",\n    \"ab\\n\",\n    \"ab\\n\",\n    \"deeji\\n\",\n    \"bcmrh\\n\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\n\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\\n\",\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabbbcbcbbbbcccccbbbccbcbccccccbbbcbbccbcbbbbcbbccbccbccbcccbbccb\\n\",\n    \"aaaaaaaaaaaaagjjbffhfhdebfdhbhdcehggjhjdbecebhidffgfdggjcgddbjhecheceeidhceieghdihigiieibhdcbbfjhjee\\n\",\n    \"bbbbcggjknqrrwttsmwqnxfrnxixysepvrxpuemyuogrmfptyzxyomqdljwlvtzhuhqrzyvlowdkmfvwnwfohryulmpezkynfdrn\\n\",\n    \"aaaecbe\\n\",\n    \"abccdcddde\\n\",\n    \"a\\n\",\n    \"a\\n\",\n    \"a\\n\",\n    \"b\\n\",\n    \"b\\n\",\n    \"a\\n\",\n    \"c\\n\",\n    \"a\\n\",\n    \"b\\n\",\n    \"c\\n\",\n    \"b\\n\",\n    \"a\\n\",\n    \"e\\n\",\n    \"b\\n\",\n    \"b\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"aa\\n\",\n    \"bb\\n\",\n    \"bb\\n\",\n    \"ab\\n\",\n    \"ac\\n\",\n    \"ab\\n\",\n    \"bc\\n\",\n    \"bb\\n\",\n    \"aa\\n\",\n    \"ad\\n\",\n    \"ab\\n\",\n    \"cd\\n\",\n    \"aaa\\n\",\n    \"aaa\\n\",\n    \"aaa\\n\",\n    \"aab\\n\",\n    \"aaa\\n\",\n    \"aab\\n\",\n    \"abb\\n\",\n    \"aab\\n\",\n    \"ccc\\n\",\n    \"ddd\\n\",\n    \"ccd\\n\",\n    \"acb\\n\",\n    \"cde\\n\",\n    \"cee\\n\",\n    \"bdd\\n\",\n    \"aaaa\\n\",\n    \"aaaa\\n\",\n    \"aaaa\\n\",\n    \"aaab\\n\",\n    \"aabb\\n\",\n    \"bbbb\\n\",\n    \"abbb\\n\",\n    \"aabc\\n\",\n    \"bbcc\\n\",\n    \"aabc\\n\",\n    \"aabd\\n\",\n    \"bbdc\\n\",\n    \"bddd\\n\",\n    \"abcd\\n\",\n    \"abcc\\n\",\n    \"aaaaa\\n\",\n    \"aaaaa\\n\",\n    \"aaaaa\\n\",\n    \"aaabb\\n\",\n    \"aabbb\\n\",\n    \"aaaab\\n\",\n    \"aabcb\\n\",\n    \"abbcc\\n\",\n    \"aabcb\\n\",\n    \"adbdb\\n\",\n    \"abbcc\\n\",\n    \"bcccd\\n\",\n    \"acced\\n\",\n    \"bbddd\\n\",\n    \"accce\\n\",\n    \"aaaaaa\\n\",\n    \"aaaaaa\\n\",\n    \"aaaaaa\\n\",\n    \"abbbbb\\n\",\n    \"abbbbb\\n\",\n    \"aaaaab\\n\",\n    \"bbbccc\\n\",\n    \"aaaacc\\n\",\n    \"abbbcc\\n\",\n    \"aacccc\\n\",\n    \"abbcdd\\n\",\n    \"aadddd\\n\",\n    \"cccede\\n\",\n    \"acdeee\\n\",\n    \"abbcde\\n\",\n    \"aaaaaaa\\n\",\n    \"aaaaaaa\\n\",\n    \"aaaaaaa\\n\",\n    \"aaaaabb\\n\",\n    \"aaaabbb\\n\",\n    \"aaabbbb\\n\",\n    \"acccbcc\\n\",\n    \"bbccccc\\n\",\n    \"aaaaacb\\n\",\n    \"acdbdcc\\n\",\n    \"aaabcbb\\n\",\n    \"aabbccc\\n\",\n    \"abcbcdb\\n\",\n    \"abbccde\\n\",\n    \"aaaabbe\\n\",\n    \"aaaaaaaa\\n\",\n    \"aaaaaaaa\\n\",\n    \"aaaaaaaa\\n\",\n    \"aaabbbbb\\n\",\n    \"aaaaaaab\\n\",\n    \"aaabbbbb\\n\",\n    \"aaabcccb\\n\",\n    \"aabccbbc\\n\",\n    \"aaaaaccc\\n\",\n    \"aabccddd\\n\",\n    \"aadcdbdc\\n\",\n    \"acdbccbd\\n\",\n    \"aaadebbe\\n\",\n    \"aabcebcc\\n\",\n    \"aadecece\\n\",\n    \"aaaaaaaaa\\n\",\n    \"aaaaaaaaa\\n\",\n    \"aaaaaaaaa\\n\",\n    \"aaaaabbbb\\n\",\n    \"aaabbbbbb\\n\",\n    \"aaabbbbbb\\n\",\n    \"aaabcccbb\\n\",\n    \"aaabcbccc\\n\",\n    \"aaabccccc\\n\",\n    \"abbbbdddc\\n\",\n    \"aabbbccbd\\n\",\n    \"aacddbcdc\\n\",\n    \"aabddbece\\n\",\n    \"bbccddeed\\n\",\n    \"aaadceded\\n\",\n    \"aaaaaaaaaa\\n\",\n    \"aaaaaaaaaa\\n\",\n    \"aaaaaaaaaa\\n\",\n    \"aaaaaabbbb\\n\",\n    \"aaaaaaabbb\\n\",\n    \"aaaaaabbbb\\n\",\n    \"aaaacbbccc\\n\",\n    \"aaaaabcccc\\n\",\n    \"aaaccccbcc\\n\",\n    \"accdccdbdd\\n\",\n    \"aaaabccddc\\n\",\n    \"aabbbbccdd\\n\",\n    \"aabbdbdedc\\n\",\n    \"bcceeeddee\\n\",\n    \"abeddbecbb\\n\"\n  ]\n}",
    "{\n  \"inputs\": [\n    \"6\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\",\n    \"1\\n2\\n10 1\\n11 3\\n\",\n    \"1\\n2\\n5 2\\n8 6\\n\",\n    \"1\\n2\\n43 34\\n44 35\\n\",\n    \"1\\n2\\n4 1\\n5 3\\n\",\n    \"1\\n2\\n100 0\\n101 2\\n\",\n    \"1\\n3\\n2 1\\n4 1\\n5 3\\n\",\n    \"1\\n4\\n0 0\\n0 0\\n2 1\\n3 3\\n\",\n    \"1\\n2\\n10 1\\n12 7\\n\",\n    \"1\\n2\\n10 3\\n13 8\\n\",\n    \"1\\n2\\n10 0\\n11 2\\n\",\n    \"1\\n2\\n765 432\\n767 436\\n\",\n    \"1\\n2\\n1 0\\n2 2\\n\",\n    \"1\\n99\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n1 1\\n\",\n    \"1\\n3\\n1 1\\n2 1\\n5 5\\n\",\n    \"1\\n2\\n3 1\\n6 6\\n\",\n    \"1\\n2\\n2 1\\n3 3\\n\",\n    \"1\\n2\\n100 1\\n101 3\\n\",\n    \"1\\n2\\n2 0\\n3 2\\n\",\n    \"1\\n2\\n5 0\\n10 6\\n\",\n    \"1\\n2\\n3 0\\n5 5\\n\",\n    \"1\\n3\\n0 0\\n100 0\\n101 2\\n\",\n    \"1\\n2\\n10 1\\n11 4\\n\",\n    \"1\\n2\\n10 2\\n11 4\\n\",\n    \"1\\n2\\n3 1\\n5 4\\n\",\n    \"1\\n4\\n1 0\\n3 2\\n13 13\\n15 15\\n\",\n    \"1\\n2\\n5 0\\n7 3\\n\",\n    \"1\\n3\\n1 1\\n10 1\\n11 5\\n\",\n    \"1\\n3\\n0 0\\n5 1\\n7 4\\n\",\n    \"1\\n4\\n0 0\\n1 0\\n2 0\\n3 3\\n\",\n    \"1\\n3\\n0 0\\n2 1\\n3 3\\n\",\n    \"1\\n2\\n3 1\\n4 3\\n\",\n    \"1\\n4\\n4 2\\n7 6\\n8 8\\n9 9\\n\",\n    \"2\\n3\\n0 0\\n100 0\\n104 5\\n3\\n0 0\\n100 0\\n104 4\\n\",\n    \"1\\n3\\n1 1\\n3 2\\n4 4\\n\",\n    \"1\\n2\\n6 1\\n8 4\\n\",\n    \"1\\n2\\n5 1\\n6 3\\n\",\n    \"1\\n3\\n1 1\\n4 2\\n5 4\\n\",\n    \"2\\n4\\n1 1\\n10 10\\n100 10\\n1000 920\\n4\\n1 5\\n1000 100\\n1000 100\\n1000 100\\n\",\n    \"1\\n2\\n4 3\\n9 9\\n\",\n    \"1\\n2\\n10 2\\n12 5\\n\",\n    \"1\\n2\\n100 50\\n101 99\\n\",\n    \"1\\n3\\n1 0\\n4 0\\n6 4\\n\",\n    \"1\\n2\\n5 1\\n6 4\\n\",\n    \"1\\n2\\n10 1\\n12 4\\n\",\n    \"1\\n2\\n3 2\\n5 5\\n\",\n    \"1\\n2\\n4 3\\n7 7\\n\",\n    \"1\\n3\\n0 0\\n10 1\\n15 7\\n\",\n    \"1\\n3\\n401 1\\n402 2\\n403 4\\n\",\n    \"1\\n3\\n5 0\\n7 4\\n10 10\\n\",\n    \"1\\n3\\n1 1\\n100 1\\n101 10\\n\",\n    \"1\\n3\\n0 0\\n4 3\\n5 5\\n\",\n    \"1\\n2\\n5 3\\n10 9\\n\",\n    \"1\\n2\\n500 0\\n501 400\\n\",\n    \"1\\n5\\n1 0\\n1 0\\n5 5\\n6 6\\n7 7\\n\",\n    \"1\\n2\\n5 2\\n9 8\\n\",\n    \"1\\n2\\n4 2\\n6 5\\n\",\n    \"1\\n2\\n5 1\\n6 6\\n\",\n    \"1\\n2\\n3 2\\n4 4\\n\",\n    \"1\\n2\\n5 2\\n6 5\\n\",\n    \"1\\n2\\n6 2\\n8 5\\n\",\n    \"1\\n2\\n1 0\\n3 3\\n\",\n    \"1\\n3\\n1 1\\n4 1\\n5 3\\n\",\n    \"1\\n2\\n12 10\\n15 15\\n\",\n    \"1\\n2\\n10 1\\n11 7\\n\",\n    \"1\\n5\\n1 1\\n2 1\\n3 1\\n4 1\\n5 3\\n\",\n    \"1\\n3\\n7 3\\n8 4\\n9 6\\n\",\n    \"1\\n3\\n4 2\\n5 4\\n6 5\\n\",\n    \"1\\n2\\n6 3\\n7 5\\n\",\n    \"1\\n2\\n5 3\\n6 5\\n\",\n    \"1\\n4\\n3 2\\n5 4\\n8 8\\n9 9\\n\",\n    \"1\\n2\\n100 51\\n101 99\\n\",\n    \"1\\n2\\n5 2\\n15 14\\n\",\n    \"1\\n2\\n4 2\\n5 4\\n\",\n    \"2\\n2\\n1 0\\n2 2\\n1\\n0 1\\n\",\n    \"1\\n2\\n1 0\\n10 10\\n\",\n    \"5\\n5\\n42 18\\n70 25\\n82 28\\n96 43\\n99 48\\n5\\n85 49\\n90 49\\n92 50\\n95 50\\n99 50\\n5\\n37 50\\n95 50\\n100 50\\n100 50\\n100 50\\n5\\n59 34\\n100 38\\n100 38\\n100 39\\n100 41\\n5\\n40 39\\n97 47\\n97 50\\n99 50\\n100 50\\n\",\n    \"1\\n3\\n10 2\\n12 7\\n13 8\\n\",\n    \"1\\n2\\n5 4\\n6 6\\n\",\n    \"4\\n1\\n1 2\\n3\\n1 1\\n2 2\\n3 2\\n3\\n1 1\\n1 1\\n1 1\\n5\\n0 0\\n0 0\\n1 0\\n1 0\\n2 2\\n\",\n    \"1\\n2\\n5 0\\n7 4\\n\",\n    \"1\\n3\\n4 2\\n6 5\\n6 5\\n\",\n    \"1\\n3\\n1 1\\n30 20\\n40 40\\n\",\n    \"1\\n2\\n8 1\\n9 5\\n\",\n    \"3\\n2\\n1 0\\n4 4\\n1\\n1 2\\n2\\n4 0\\n6 3\\n\",\n    \"1\\n3\\n0 0\\n50 20\\n55 30\\n\",\n    \"1\\n3\\n0 0\\n11 5\\n21 20\\n\",\n    \"1\\n2\\n108 1\\n110 22\\n\",\n    \"1\\n2\\n100 10\\n101 101\\n\",\n    \"1\\n2\\n10 3\\n11 5\\n\",\n    \"1\\n2\\n4 1\\n10 9\\n\",\n    \"1\\n2\\n7 6\\n8 8\\n\",\n    \"1\\n3\\n1 1\\n30 10\\n31 20\\n\",\n    \"1\\n3\\n1 1\\n5 1\\n6 6\\n\",\n    \"1\\n4\\n4 1\\n5 1\\n6 4\\n6 4\\n\",\n    \"1\\n2\\n10 1\\n11 10\\n\",\n    \"1\\n2\\n10 5\\n11 7\\n\",\n    \"1\\n3\\n1 1\\n2 1\\n3 3\\n\",\n    \"1\\n3\\n10 5\\n12 8\\n13 9\\n\",\n    \"1\\n2\\n11 1\\n12 3\\n\",\n    \"1\\n3\\n5 0\\n7 5\\n8 8\\n\",\n    \"1\\n5\\n25 10\\n26 12\\n27 13\\n28 14\\n29 15\\n\",\n    \"1\\n2\\n5 2\\n6 4\\n\",\n    \"1\\n5\\n1 0\\n1 0\\n5 1\\n6 3\\n7 4\\n\",\n    \"1\\n2\\n10 8\\n12 11\\n\",\n    \"1\\n2\\n10 5\\n16 12\\n\",\n    \"1\\n2\\n110 2\\n115 112\\n\",\n    \"1\\n4\\n1 1\\n2 1\\n5 1\\n6 3\\n\",\n    \"1\\n2\\n10 1\\n101 101\\n\",\n    \"1\\n2\\n2 0\\n7 6\\n\",\n    \"1\\n2\\n5 0\\n6 3\\n\",\n    \"1\\n2\\n5 1\\n7 4\\n\",\n    \"1\\n2\\n10 8\\n20 19\\n\",\n    \"2\\n2\\n4 1\\n5 3\\n2\\n100 50\\n101 99\\n\",\n    \"1\\n2\\n2 1\\n4 4\\n\",\n    \"1\\n3\\n0 0\\n5 3\\n6 6\\n\",\n    \"1\\n2\\n30 10\\n31 21\\n\",\n    \"1\\n2\\n100 5\\n101 10\\n\",\n    \"1\\n3\\n0 0\\n10 5\\n11 8\\n\",\n    \"1\\n2\\n4 3\\n8 8\\n\",\n    \"3\\n3\\n2 1\\n3 2\\n4 4\\n2\\n5 3\\n5 6\\n2\\n2 2\\n3 2\\n\",\n    \"1\\n2\\n100 3\\n105 50\\n\",\n    \"1\\n2\\n5 1\\n8 5\\n\",\n    \"10\\n5\\n88 60\\n10 3\\n48 21\\n90 70\\n40 88\\n5\\n20 81\\n39 98\\n34 87\\n100 82\\n21 21\\n2\\n46 91\\n89 71\\n2\\n81 98\\n25 36\\n3\\n84 97\\n40 32\\n17 29\\n2\\n56 16\\n96 75\\n5\\n35 24\\n82 73\\n23 15\\n45 95\\n79 90\\n2\\n68 13\\n70 100\\n3\\n94 35\\n95 77\\n31 86\\n5\\n99 14\\n12 54\\n81 60\\n80 29\\n46 55\\n\",\n    \"1\\n3\\n1 1\\n500 1\\n501 99\\n\",\n    \"11\\n5\\n85 49\\n90 49\\n92 50\\n95 50\\n99 50\\n5\\n85 49\\n90 49\\n92 50\\n95 50\\n99 50\\n1\\n3 4\\n5\\n42 18\\n70 25\\n82 28\\n96 43\\n99 48\\n5\\n37 50\\n95 50\\n100 50\\n100 50\\n100 50\\n5\\n59 34\\n100 38\\n100 38\\n100 39\\n100 41\\n5\\n40 39\\n97 47\\n97 50\\n99 50\\n100 50\\n5\\n42 18\\n70 25\\n82 28\\n96 43\\n99 48\\n5\\n37 50\\n95 50\\n100 50\\n100 50\\n100 50\\n5\\n59 34\\n100 38\\n100 38\\n100 39\\n100 41\\n5\\n40 39\\n97 47\\n97 50\\n99 50\\n100 50\\n\",\n    \"1\\n3\\n5 1\\n6 3\\n7 4\\n\",\n    \"1\\n2\\n10 7\\n12 10\\n\",\n    \"1\\n2\\n5 2\\n7 6\\n\",\n    \"2\\n3\\n4 2\\n5 5\\n6 6\\n3\\n1 1\\n3 3\\n4 4\\n\",\n    \"1\\n2\\n3 0\\n5 3\\n\",\n    \"1\\n2\\n4 3\\n6 6\\n\",\n    \"1\\n3\\n3 2\\n4 2\\n5 5\\n\",\n    \"1\\n3\\n99 49\\n100 50\\n101 99\\n\",\n    \"1\\n2\\n13 10\\n16 15\\n\",\n    \"1\\n3\\n1 1\\n3 2\\n7 7\\n\",\n    \"1\\n3\\n5 2\\n6 5\\n7 6\\n\",\n    \"1\\n2\\n10 8\\n11 10\\n\",\n    \"2\\n2\\n2 0\\n3 2\\n3\\n0 0\\n3 1\\n4 3\\n\",\n    \"1\\n4\\n1 0\\n2 1\\n4 4\\n6 5\\n\",\n    \"1\\n2\\n11 0\\n13 4\\n\",\n    \"1\\n2\\n2 1\\n5 5\\n\",\n    \"1\\n2\\n100 3\\n105 9\\n\",\n    \"1\\n2\\n2 0\\n3 3\\n\",\n    \"1\\n3\\n10 9\\n11 11\\n11 11\\n\",\n    \"1\\n2\\n10 6\\n15 12\\n\",\n    \"19\\n1\\n1 1\\n1\\n2 2\\n1\\n3 3\\n1\\n4 4\\n1\\n5 5\\n1\\n6 6\\n1\\n7 7\\n1\\n8 8\\n1\\n9 9\\n1\\n10 10\\n1\\n11 11\\n1\\n12 12\\n1\\n13 13\\n1\\n14 14\\n1\\n15 15\\n1\\n16 16\\n1\\n17 17\\n1\\n18 18\\n1\\n19 19\\n\",\n    \"20\\n2\\n1 0\\n1000 3\\n3\\n4 2\\n4 2\\n4 2\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n3\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1000 3\\n4\\n10 1\\n15 2\\n10 2\\n15 2\\n1\\n765 432\\n2\\n4 4\\n4 3\\n5\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n\",\n    \"1\\n3\\n5 2\\n6 4\\n7 6\\n\",\n    \"1\\n3\\n1 1\\n10 3\\n13 7\\n\",\n    \"1\\n3\\n0 0\\n5 3\\n6 5\\n\",\n    \"1\\n3\\n0 0\\n3 1\\n4 3\\n\",\n    \"1\\n3\\n1 1\\n10 1\\n11 7\\n\",\n    \"1\\n4\\n0 0\\n1 1\\n10 1\\n11 3\\n\",\n    \"4\\n3\\n2 1\\n3 2\\n4 4\\n2\\n5 3\\n5 6\\n2\\n2 2\\n3 2\\n3\\n1 1\\n2 2\\n145 1\\n\",\n    \"1\\n4\\n1 0\\n5 4\\n10 5\\n11 7\\n\",\n    \"1\\n11\\n1 1\\n1 1\\n3 1\\n20 18\\n21 19\\n43 41\\n43 41\\n44 42\\n46 44\\n47 45\\n48 47\\n\",\n    \"1\\n5\\n5 1\\n6 3\\n7 4\\n8 5\\n9 5\\n\",\n    \"1\\n3\\n1 0\\n5 1\\n6 3\\n\",\n    \"1\\n2\\n4 3\\n5 5\\n\",\n    \"1\\n3\\n2 2\\n10 3\\n11 5\\n\",\n    \"1\\n3\\n5 4\\n8 8\\n9 8\\n\",\n    \"10\\n2\\n1 2\\n3 3\\n1\\n5 3\\n2\\n3 0\\n4 5\\n1\\n3 5\\n1\\n0 5\\n2\\n5 4\\n0 4\\n2\\n0 1\\n0 5\\n1\\n4 3\\n2\\n5 3\\n2 5\\n2\\n5 4\\n5 1\\n\",\n    \"1\\n2\\n18 10\\n22 15\\n\"\n  ],\n  \"outputs\": [\n    \"NO\\nYES\\nNO\\nYES\\nNO\\nYES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nYES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\nYES\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nYES\\nYES\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\nYES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nYES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"YES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\nYES\\n\",\n    \"YES\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\nNO\\nYES\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nNO\\nYES\\nNO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\n\",\n    \"NO\\nYES\\nNO\\nNO\\nNO\\nNO\\nNO\\nYES\\nNO\\nNO\\n\",\n    \"NO\\n\"\n  ]\n}"
  ],
  "difficulty": [
    "interview",
    "interview",
    "interview",
    "interview",
    "interview",
    "interview",
    "interview",
    "interview",
    "interview",
    "interview"
  ],
  "url": [
    "https://codeforces.com/problemset/problem/670/A",
    "https://codeforces.com/problemset/problem/678/C",
    "https://codeforces.com/problemset/problem/1082/B",
    "https://codeforces.com/problemset/problem/770/C",
    "https://codeforces.com/problemset/problem/911/E",
    "https://codeforces.com/problemset/problem/675/A",
    "https://codeforces.com/problemset/problem/1132/A",
    "https://codeforces.com/problemset/problem/851/A",
    "https://codeforces.com/problemset/problem/797/C",
    "https://codeforces.com/problemset/problem/1334/A"
  ],
  "starter_code": [
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    ""
  ]
}